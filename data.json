{
    "project": {
        "name": "WanaPlan",
        "description": "",
        "version": "2.4.3",
        "url": "http://www.wanaplan.com/"
    },
    "files": {
        "js\\Components\\AnalyticsComponent\\AnalyticsComponent.js": {
            "name": "js\\Components\\AnalyticsComponent\\AnalyticsComponent.js",
            "modules": {
                "Component": 1
            },
            "classes": {
                "AnalyticsComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\AvatarComponent\\AvatarComponent3D.js": {
            "name": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "modules": {},
            "classes": {
                "AvatarComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\AvatarComponent\\HideAvatarComponent.js": {
            "name": "js\\Components\\AvatarComponent\\HideAvatarComponent.js",
            "modules": {},
            "classes": {
                "HideAvatarComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CameraComponent\\CameraComponent.js": {
            "name": "js\\Components\\CameraComponent\\CameraComponent.js",
            "modules": {},
            "classes": {
                "CameraComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "modules": {},
            "classes": {
                "ConfiguratorModComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "modules": {},
            "classes": {
                "FloorComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorController.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "modules": {},
            "classes": {
                "FloorController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorStructure.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "modules": {},
            "classes": {
                "FloorStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "modules": {},
            "classes": {
                "HopperComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "modules": {},
            "classes": {
                "HopperComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "modules": {},
            "classes": {
                "HopperStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs\\Spiral.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs\\Spiral.js",
            "modules": {
                "Programmable": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\AssimpImporter.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\AssimpImporter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\OBJImporter.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\OBJImporter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "modules": {},
            "classes": {
                "wnp.Programmable": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedPhotoFrame.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedPhotoFrame.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "modules": {},
            "classes": {
                "DecorationComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\DragComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "modules": {},
            "classes": {
                "DragComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "modules": {},
            "classes": {
                "EditionComponent3D": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\EphemeralInfoComponent.js": {
            "name": "js\\Components\\CoreComponents\\Object\\EphemeralInfoComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\GroupManager.js": {
            "name": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "modules": {},
            "classes": {
                "GroupManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "modules": {},
            "classes": {
                "ObjectComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\ObjectStructure.js": {
            "name": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "modules": {},
            "classes": {
                "ObjectStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "modules": {},
            "classes": {
                "TransformObjectComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "modules": {},
            "classes": {
                "OvertureComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "modules": {},
            "classes": {
                "OvertureComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "modules": {},
            "classes": {
                "OvertureStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\Graph.js": {
            "name": "js\\Components\\CoreComponents\\Point\\Graph.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\PointComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "modules": {},
            "classes": {
                "PointComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\PointStructure.js": {
            "name": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "modules": {},
            "classes": {
                "PointStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "modules": {},
            "classes": {
                "RoomComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "modules": {},
            "classes": {
                "RoomComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js",
            "modules": {},
            "classes": {
                "RoomHierarchy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomStructure.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "modules": {},
            "classes": {
                "RoomStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "modules": {},
            "classes": {
                "SpiralStairwayStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "modules": {},
            "classes": {
                "StairwayComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "modules": {},
            "classes": {
                "StairwayComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "modules": {},
            "classes": {
                "StairwayStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "modules": {},
            "classes": {
                "StraightStairwayStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "modules": {},
            "classes": {
                "SubSlopeComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "modules": {},
            "classes": {
                "SubSlopeComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "modules": {},
            "classes": {
                "SubSlopeOvertureComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "modules": {},
            "classes": {
                "SubSlopeOvertureStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "modules": {},
            "classes": {
                "SubSlopeStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\PolygonWall.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "modules": {},
            "classes": {
                "PolygonWall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "modules": {},
            "classes": {
                "WallComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "modules": {},
            "classes": {
                "WallComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallPane3D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "modules": {},
            "classes": {
                "WallPane3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallStructure.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "modules": {},
            "classes": {
                "WallStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CustomComponents\\OutsideComponent3D.js": {
            "name": "js\\Components\\CustomComponents\\OutsideComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\DebugComponent\\DebugComponent2D.js": {
            "name": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\DebugComponent\\DebugComponent3D.js": {
            "name": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GridComponent\\GridComponent2D.js": {
            "name": "js\\Components\\GridComponent\\GridComponent2D.js",
            "modules": {},
            "classes": {
                "GridComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GridComponent\\GridComponent3D.js": {
            "name": "js\\Components\\GridComponent\\GridComponent3D.js",
            "modules": {},
            "classes": {
                "GridComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js": {
            "name": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\HistoryComponent\\HistoryComponent.js": {
            "name": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "modules": {},
            "classes": {
                "HistoryComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js": {
            "name": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "modules": {},
            "classes": {
                "BaseTopMenuComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\ExitComponent.js": {
            "name": "js\\Components\\InternalComponents\\ExitComponent.js",
            "modules": {},
            "classes": {
                "ExitComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\FullscreenComponent.js": {
            "name": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "modules": {},
            "classes": {
                "FullscreenComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\NewComponent.js": {
            "name": "js\\Components\\InternalComponents\\NewComponent.js",
            "modules": {},
            "classes": {
                "NewComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\OptionsComponent.js": {
            "name": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "modules": {},
            "classes": {
                "OptionsComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\SaveComponent.js": {
            "name": "js\\Components\\InternalComponents\\SaveComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js": {
            "name": "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js",
            "modules": {},
            "classes": {
                "ScreenshotMenuComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\TransparencyComponent.js": {
            "name": "js\\Components\\InternalComponents\\TransparencyComponent.js",
            "modules": {},
            "classes": {
                "TransparencyComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\LockComponent\\LockComponent.js": {
            "name": "js\\Components\\LockComponent\\LockComponent.js",
            "modules": {},
            "classes": {
                "LockComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js": {
            "name": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "modules": {},
            "classes": {
                "MagnetismComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js": {
            "name": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MagnetismComponent\\WorkingMagnetismComponent3D.js": {
            "name": "js\\Components\\MagnetismComponent\\WorkingMagnetismComponent3D.js",
            "modules": {},
            "classes": {
                "MagnetismComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MeasureComponent\\EditMeasureComponent.js": {
            "name": "js\\Components\\MeasureComponent\\EditMeasureComponent.js",
            "modules": {},
            "classes": {
                "EditMeasureComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MeasureComponent\\MeasureComponent.js": {
            "name": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "modules": {},
            "classes": {
                "MeasureComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MeasureComponent\\MeasureStructure.js": {
            "name": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "modules": {},
            "classes": {
                "MeasureStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MenuComponents\\TopMenuComponent.js": {
            "name": "js\\Components\\MenuComponents\\TopMenuComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MobileComponent\\MobileComponent.js": {
            "name": "js\\Components\\MobileComponent\\MobileComponent.js",
            "modules": {},
            "classes": {
                "MobileComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MobileComponent\\MobileInputComponent.js": {
            "name": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "modules": {},
            "classes": {
                "MobileInputComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js": {
            "name": "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js": {
            "name": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PedagoComponent\\PedagoComponent.js": {
            "name": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "modules": {},
            "classes": {
                "PedagoComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js": {
            "name": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "modules": {},
            "classes": {
                "HardwareScalingComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js": {
            "name": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PrintComponent\\PrintComponent2D.js": {
            "name": "js\\Components\\PrintComponent\\PrintComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PrintComponent\\PrintComponent3D.js": {
            "name": "js\\Components\\PrintComponent\\PrintComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\RemoteControlComponent\\RemoteControlComponent3D.js": {
            "name": "js\\Components\\RemoteControlComponent\\RemoteControlComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\Assets\\DGMLoadComponent.js": {
            "name": "js\\Components\\StandaloneComponent\\Assets\\DGMLoadComponent.js",
            "modules": {},
            "classes": {
                "DGM_LoadComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\Assets\\DGMSaveComponent.js": {
            "name": "js\\Components\\StandaloneComponent\\Assets\\DGMSaveComponent.js",
            "modules": {},
            "classes": {
                "DGM_SaveComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js": {
            "name": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "modules": {},
            "classes": {
                "DGM_ZoomComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js": {
            "name": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "modules": {},
            "classes": {
                "SA_ConnectionStatusDetector": 1,
                "SA_Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js": {
            "name": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "modules": {},
            "classes": {
                "SA_DatabaseManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\SA_NewComponent.js": {
            "name": "js\\Components\\StandaloneComponent\\SA_NewComponent.js",
            "modules": {},
            "classes": {
                "SA_NewComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\SA_StorageManager.js": {
            "name": "js\\Components\\StandaloneComponent\\SA_StorageManager.js",
            "modules": {},
            "classes": {
                "SA_StorageManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\SA_WebService.js": {
            "name": "js\\Components\\StandaloneComponent\\SA_WebService.js",
            "modules": {},
            "classes": {
                "SA_WebService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\StandaloneComponent\\StandaloneComponent.js": {
            "name": "js\\Components\\StandaloneComponent\\StandaloneComponent.js",
            "modules": {},
            "classes": {
                "StandaloneComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseComponent2D.js": {
            "name": "js\\Components\\BaseComponent2D.js",
            "modules": {},
            "classes": {
                "BaseComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseComponent3D.js": {
            "name": "js\\Components\\BaseComponent3D.js",
            "modules": {},
            "classes": {
                "BaseComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseStructure.js": {
            "name": "js\\Components\\BaseStructure.js",
            "modules": {},
            "classes": {
                "BaseStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GeneralOptionComponent2D.js": {
            "name": "js\\Components\\GeneralOptionComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ProgrammableLoader.js": {
            "name": "js\\Components\\ProgrammableLoader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Api.e2D.js": {
            "name": "js\\Core\\Api\\Api.e2D.js",
            "modules": {
                "API": 1
            },
            "classes": {
                "API.e2D": 1
            },
            "fors": {},
            "namespaces": {
                "API": 1
            }
        },
        "js\\Core\\Api\\Api.e3D.js": {
            "name": "js\\Core\\Api\\Api.e3D.js",
            "modules": {},
            "classes": {
                "API.e3D": 1
            },
            "fors": {},
            "namespaces": {
                "API": 1
            }
        },
        "js\\Core\\Api\\Api.html.js": {
            "name": "js\\Core\\Api\\Api.html.js",
            "modules": {},
            "classes": {
                "API.html": 1
            },
            "fors": {},
            "namespaces": {
                "API": 1
            }
        },
        "js\\Core\\Api\\Api.js": {
            "name": "js\\Core\\Api\\Api.js",
            "modules": {},
            "classes": {
                "API": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Api.material.js": {
            "name": "js\\Core\\Api\\Api.material.js",
            "modules": {},
            "classes": {
                "API.material": 1
            },
            "fors": {},
            "namespaces": {
                "API": 1
            }
        },
        "js\\Core\\Api\\Api.ui.js": {
            "name": "js\\Core\\Api\\Api.ui.js",
            "modules": {},
            "classes": {
                "API.ui": 1
            },
            "fors": {},
            "namespaces": {
                "API": 1
            }
        },
        "js\\Core\\Api\\Api.utils.js": {
            "name": "js\\Core\\Api\\Api.utils.js",
            "modules": {},
            "classes": {
                "API.utils": 1
            },
            "fors": {},
            "namespaces": {
                "API": 1
            }
        },
        "js\\Core\\Input\\KeyboardManager.js": {
            "name": "js\\Core\\Input\\KeyboardManager.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "wnp.KeyboardManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Input\\PointerManager.js": {
            "name": "js\\Core\\Input\\PointerManager.js",
            "modules": {},
            "classes": {
                "wnp.PointerManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Input\\TouchManager.js": {
            "name": "js\\Core\\Input\\TouchManager.js",
            "modules": {},
            "classes": {
                "wnp.Input.TouchManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.Input": 1
            }
        },
        "js\\Core\\Materials\\Glass.js": {
            "name": "js\\Core\\Materials\\Glass.js",
            "modules": {
                "Materials": 1
            },
            "classes": {
                "wnp.GlassMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\Leather.js": {
            "name": "js\\Core\\Materials\\Leather.js",
            "modules": {},
            "classes": {
                "wnp.LeatherMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\Metal.js": {
            "name": "js\\Core\\Materials\\Metal.js",
            "modules": {},
            "classes": {
                "wnp.MetalMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\Plastic.js": {
            "name": "js\\Core\\Materials\\Plastic.js",
            "modules": {},
            "classes": {
                "wnp.PlasticMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\Sample.js": {
            "name": "js\\Core\\Materials\\Sample.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Textured.js": {
            "name": "js\\Core\\Materials\\Textured.js",
            "modules": {},
            "classes": {
                "wnp.TexturedMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\Tile.js": {
            "name": "js\\Core\\Materials\\Tile.js",
            "modules": {},
            "classes": {
                "wnp.TileMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\White.js": {
            "name": "js\\Core\\Materials\\White.js",
            "modules": {},
            "classes": {
                "wnp.WhiteMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\Wood.js": {
            "name": "js\\Core\\Materials\\Wood.js",
            "modules": {},
            "classes": {
                "wnp.WoodMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Rendering\\ImageProcessor.js": {
            "name": "js\\Core\\Rendering\\ImageProcessor.js",
            "modules": {
                "Rendering": 1
            },
            "classes": {
                "wnp.ImageProcessor": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Rendering\\Outliner.js": {
            "name": "js\\Core\\Rendering\\Outliner.js",
            "modules": {},
            "classes": {
                "wnp.Outliner": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Widgets\\Clone.js": {
            "name": "js\\Core\\Widgets\\Clone.js",
            "modules": {
                "Widget": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Elevation.js": {
            "name": "js\\Core\\Widgets\\Elevation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Group.js": {
            "name": "js\\Core\\Widgets\\Group.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Info.js": {
            "name": "js\\Core\\Widgets\\Info.js",
            "modules": {},
            "classes": {
                "Info": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Lock.js": {
            "name": "js\\Core\\Widgets\\Lock.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Remove.js": {
            "name": "js\\Core\\Widgets\\Remove.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Rotator.js": {
            "name": "js\\Core\\Widgets\\Rotator.js",
            "modules": {},
            "classes": {
                "Rotator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Assimp2jsonImporter.js": {
            "name": "js\\Core\\Assimp2jsonImporter.js",
            "modules": {},
            "classes": {
                "AssimpImporter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Box3.js": {
            "name": "js\\Core\\Box3.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\CameraFeatures.js": {
            "name": "js\\Core\\CameraFeatures.js",
            "modules": {
                "Helpers": 1
            },
            "classes": {
                "wnp.CameraFeatures": 1,
                "wnp.AnimationCancelor": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Configuration.js": {
            "name": "js\\Core\\Configuration.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Controls.js": {
            "name": "js\\Core\\Controls.js",
            "modules": {},
            "classes": {
                "Controls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Core.js": {
            "name": "js\\Core\\Core.js",
            "modules": {
                "Core": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Engine3D.js": {
            "name": "js\\Core\\Engine3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Material.js": {
            "name": "js\\Core\\Material.js",
            "modules": {},
            "classes": {
                "wnp.StandardMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\MaterialFactory.js": {
            "name": "js\\Core\\MaterialFactory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\MaterialInfo.js": {
            "name": "js\\Core\\MaterialInfo.js",
            "modules": {},
            "classes": {
                "MaterialInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials.js": {
            "name": "js\\Core\\Materials.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\_extra_docs.js": {
            "name": "js\\Core\\_extra_docs.js",
            "modules": {
                "Events": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\DummyHelper.js": {
            "name": "js\\Helpers\\DummyHelper.js",
            "modules": {},
            "classes": {
                "Dummy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\GeometryHelper.js": {
            "name": "js\\Helpers\\GeometryHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\GlobalHelper.js": {
            "name": "js\\Helpers\\GlobalHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\HTMLHelper.js": {
            "name": "js\\Helpers\\HTMLHelper.js",
            "modules": {},
            "classes": {
                "GlobalHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\ObjectHelper.js": {
            "name": "js\\Helpers\\ObjectHelper.js",
            "modules": {},
            "classes": {
                "ObjectHelper": 1,
                "ObjectHelper.AABB": 1,
                "ObjectHelper.OBB": 1,
                "ObjectHelper.OyBB": 1,
                "ObjectHelper.collision": 1,
                "ObjectHelper.Interval": 1
            },
            "fors": {},
            "namespaces": {
                "ObjectHelper": 1
            }
        },
        "js\\Helpers\\Symbols2D.js": {
            "name": "js\\Helpers\\Symbols2D.js",
            "modules": {},
            "classes": {
                "wnp.Symbols2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\uuid.js": {
            "name": "js\\Helpers\\uuid.js",
            "modules": {},
            "classes": {
                "wnp.uuid": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Logger.js": {
            "name": "js\\Logger.js",
            "modules": {},
            "classes": {
                "Logger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\LoopTimer.js": {
            "name": "js\\LoopTimer.js",
            "modules": {},
            "classes": {
                "wnp.LoopTimer": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\_extracted_events.js": {
            "name": "js\\_extracted_events.js",
            "modules": {
                "EVENTS": 1
            },
            "classes": {
                "EVENTS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\bootstrap.js": {
            "name": "js\\bootstrap.js",
            "modules": {
                "Wanaplan": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js": {
            "name": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Wanaplan": {
            "name": "Wanaplan",
            "submodules": {
                "Component": 1,
                "Programmable": 1,
                "API": 1,
                "Input": 1,
                "Materials": 1,
                "Rendering": 1,
                "Widget": 1,
                "Helpers": 1,
                "Core": 1,
                "Events": 1
            },
            "classes": {
                "AnalyticsComponent": 1,
                "AvatarComponent3D": 1,
                "HideAvatarComponent": 1,
                "CameraComponent": 1,
                "ConfiguratorModComponent3D": 1,
                "FloorComponent3D": 1,
                "FloorController": 1,
                "FloorStructure": 1,
                "HopperComponent2D": 1,
                "HopperComponent3D": 1,
                "HopperStructure": 1,
                "AssimpImporter": 1,
                "wnp.Programmable": 1,
                "DecorationComponent": 1,
                "DragComponent3D": 1,
                "EditionComponent3D": 1,
                "GroupManager": 1,
                "ObjectComponent3D": 1,
                "ObjectStructure": 1,
                "TransformObjectComponent3D": 1,
                "OvertureComponent2D": 1,
                "OvertureComponent3D": 1,
                "OvertureStructure": 1,
                "PointComponent2D": 1,
                "PointStructure": 1,
                "RoomComponent2D": 1,
                "RoomComponent3D": 1,
                "RoomHierarchy": 1,
                "RoomStructure": 1,
                "SpiralStairwayStructure": 1,
                "StairwayComponent2D": 1,
                "StairwayComponent3D": 1,
                "StairwayStructure": 1,
                "StraightStairwayStructure": 1,
                "SubSlopeComponent2D": 1,
                "SubSlopeComponent3D": 1,
                "SubSlopeOvertureComponent2D": 1,
                "SubSlopeOvertureStructure": 1,
                "SubSlopeStructure": 1,
                "PolygonWall": 1,
                "WallComponent2D": 1,
                "WallComponent3D": 1,
                "WallPane3D": 1,
                "WallStructure": 1,
                "GridComponent2D": 1,
                "GridComponent3D": 1,
                "HistoryComponent": 1,
                "BaseTopMenuComponent2D": 1,
                "ExitComponent": 1,
                "FullscreenComponent": 1,
                "NewComponent": 1,
                "OptionsComponent": 1,
                "ScreenshotMenuComponent": 1,
                "TransparencyComponent": 1,
                "LockComponent": 1,
                "MagnetismComponent2D": 1,
                "MagnetismComponent3D": 1,
                "EditMeasureComponent": 1,
                "MeasureComponent": 1,
                "MeasureStructure": 1,
                "MobileComponent": 1,
                "MobileInputComponent": 1,
                "PedagoComponent": 1,
                "HardwareScalingComponent3D": 1,
                "DGM_LoadComponent": 1,
                "DGM_SaveComponent": 1,
                "DGM_ZoomComponent": 1,
                "SA_ConnectionStatusDetector": 1,
                "SA_Timer": 1,
                "SA_DatabaseManager": 1,
                "SA_NewComponent": 1,
                "SA_StorageManager": 1,
                "SA_WebService": 1,
                "StandaloneComponent": 1,
                "BaseComponent2D": 1,
                "BaseComponent3D": 1,
                "BaseStructure": 1,
                "API.e2D": 1,
                "API.e3D": 1,
                "API.html": 1,
                "API": 1,
                "API.material": 1,
                "API.ui": 1,
                "API.utils": 1,
                "wnp.KeyboardManager": 1,
                "wnp.PointerManager": 1,
                "wnp.Input.TouchManager": 1,
                "wnp.GlassMaterial": 1,
                "wnp.LeatherMaterial": 1,
                "wnp.MetalMaterial": 1,
                "wnp.PlasticMaterial": 1,
                "wnp.TexturedMaterial": 1,
                "wnp.TileMaterial": 1,
                "wnp.WhiteMaterial": 1,
                "wnp.WoodMaterial": 1,
                "wnp.ImageProcessor": 1,
                "wnp.Outliner": 1,
                "Info": 1,
                "Rotator": 1,
                "wnp.CameraFeatures": 1,
                "wnp.AnimationCancelor": 1,
                "Controls": 1,
                "wnp.StandardMaterial": 1,
                "MaterialInfo": 1,
                "Dummy": 1,
                "GlobalHelper": 1,
                "ObjectHelper": 1,
                "ObjectHelper.AABB": 1,
                "ObjectHelper.OBB": 1,
                "ObjectHelper.OyBB": 1,
                "ObjectHelper.collision": 1,
                "ObjectHelper.Interval": 1,
                "wnp.Symbols2D": 1,
                "wnp.uuid": 1,
                "Logger": 1,
                "wnp.LoopTimer": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "namespaces": {
                "wnp": 1,
                "API": 1,
                "wnp.Input": 1,
                "ObjectHelper": 1
            },
            "tag": "module",
            "file": "js\\LoopTimer.js",
            "line": 9,
            "description": "Bootstrap de Wanaplan.",
            "extends": "BaseComponent3D\n\nComponent which handle the transformation of object on the scene\nEvery object's transformation should be executed here\n\nHandle historization and magnetism\n\nHas a special behavior for on-dragging objects :\n  Instead of notifying every little step, merge togeter the transformation that occurs inside a beginTransformObject - endTransformObject period"
        },
        "Component": {
            "name": "Component",
            "submodules": {},
            "classes": {
                "AnalyticsComponent": 1,
                "AvatarComponent3D": 1,
                "HideAvatarComponent": 1,
                "CameraComponent": 1,
                "ConfiguratorModComponent3D": 1,
                "FloorComponent3D": 1,
                "FloorController": 1,
                "FloorStructure": 1,
                "HopperComponent2D": 1,
                "HopperComponent3D": 1,
                "HopperStructure": 1,
                "DecorationComponent": 1,
                "DragComponent3D": 1,
                "EditionComponent3D": 1,
                "ObjectComponent3D": 1,
                "ObjectStructure": 1,
                "TransformObjectComponent3D": 1,
                "OvertureComponent2D": 1,
                "OvertureComponent3D": 1,
                "OvertureStructure": 1,
                "PointComponent2D": 1,
                "PointStructure": 1,
                "RoomComponent2D": 1,
                "RoomComponent3D": 1,
                "RoomHierarchy": 1,
                "RoomStructure": 1,
                "SpiralStairwayStructure": 1,
                "StairwayComponent2D": 1,
                "StairwayComponent3D": 1,
                "StairwayStructure": 1,
                "StraightStairwayStructure": 1,
                "SubSlopeComponent2D": 1,
                "SubSlopeComponent3D": 1,
                "SubSlopeOvertureComponent2D": 1,
                "SubSlopeOvertureStructure": 1,
                "SubSlopeStructure": 1,
                "PolygonWall": 1,
                "WallComponent2D": 1,
                "WallComponent3D": 1,
                "WallPane3D": 1,
                "WallStructure": 1,
                "GridComponent2D": 1,
                "BaseTopMenuComponent2D": 1,
                "ExitComponent": 1,
                "FullscreenComponent": 1,
                "NewComponent": 1,
                "OptionsComponent": 1,
                "ScreenshotMenuComponent": 1,
                "TransparencyComponent": 1,
                "LockComponent": 1,
                "MagnetismComponent2D": 1,
                "MagnetismComponent3D": 1,
                "EditMeasureComponent": 1,
                "MeasureComponent": 1,
                "MeasureStructure": 1,
                "MobileComponent": 1,
                "MobileInputComponent": 1,
                "PedagoComponent": 1,
                "HardwareScalingComponent3D": 1,
                "SA_ConnectionStatusDetector": 1,
                "SA_Timer": 1,
                "SA_DatabaseManager": 1,
                "SA_NewComponent": 1,
                "SA_StorageManager": 1,
                "SA_WebService": 1,
                "StandaloneComponent": 1,
                "BaseComponent2D": 1,
                "BaseComponent3D": 1,
                "BaseStructure": 1,
                "MaterialInfo": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\MaterialInfo.js",
            "line": 6,
            "description": "Wanaplan components."
        },
        "Programmable": {
            "name": "Programmable",
            "submodules": {},
            "classes": {
                "wnp.Programmable": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 11,
            "description": "Procedural 3D meshes."
        },
        "API": {
            "name": "API",
            "submodules": {},
            "classes": {
                "API.e2D": 1,
                "API.e3D": 1,
                "API.html": 1,
                "API": 1,
                "API.material": 1,
                "API.ui": 1,
                "API.utils": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "API": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Api\\Api.utils.js",
            "line": 7,
            "description": "Wanaplan API for developers."
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "classes": {
                "wnp.KeyboardManager": 1,
                "wnp.PointerManager": 1,
                "wnp.Input.TouchManager": 1,
                "Controls": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1,
                "wnp.Input": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Controls.js",
            "line": 8,
            "tag": "main",
            "itemtype": "main",
            "description": "Handling of user input devices."
        },
        "Materials": {
            "name": "Materials",
            "submodules": {},
            "classes": {
                "wnp.GlassMaterial": 1,
                "wnp.LeatherMaterial": 1,
                "wnp.MetalMaterial": 1,
                "wnp.PlasticMaterial": 1,
                "wnp.TexturedMaterial": 1,
                "wnp.TileMaterial": 1,
                "wnp.WhiteMaterial": 1,
                "wnp.WoodMaterial": 1,
                "wnp.StandardMaterial": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Material.js",
            "line": 12,
            "description": "3D Materials optimized for a fast rendering in Wanaplan.  \nBABYLON.StandardMaterial and BABYLON.MultiMaterial are still supported, but the wnp.XXXXXMaterial classes are provided  \nto save some precious rendering time, especially when you have a lot of materials.",
            "tag": "main",
            "itemtype": "main"
        },
        "Rendering": {
            "name": "Rendering",
            "submodules": {},
            "classes": {
                "wnp.ImageProcessor": 1,
                "wnp.Outliner": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 6,
            "description": "This class provides an easy way to apply a shader on a full screen quad, in order to process pixels in screen-space.  \nIt can be used as static or instanciated."
        },
        "Widget": {
            "name": "Widget",
            "submodules": {},
            "classes": {
                "Info": 1,
                "Rotator": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 21,
            "description": "3D Widgets"
        },
        "Helpers": {
            "name": "Helpers",
            "submodules": {},
            "classes": {
                "wnp.CameraFeatures": 1,
                "wnp.AnimationCancelor": 1,
                "GlobalHelper": 1,
                "ObjectHelper": 1,
                "ObjectHelper.AABB": 1,
                "ObjectHelper.OBB": 1,
                "ObjectHelper.OyBB": 1,
                "ObjectHelper.collision": 1,
                "ObjectHelper.Interval": 1,
                "wnp.Symbols2D": 1,
                "wnp.uuid": 1,
                "wnp.LoopTimer": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1,
                "ObjectHelper": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\LoopTimer.js",
            "line": 9,
            "description": "Various static helper functions."
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Core.js",
            "line": 1,
            "description": "Wanaplan Core.",
            "tag": "main",
            "itemtype": "main"
        },
        "Events": {
            "name": "Events",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\_extra_docs.js",
            "line": 53,
            "description": "Events",
            "tag": "main",
            "itemtype": "main"
        },
        "EVENTS": {
            "name": "EVENTS",
            "submodules": {},
            "classes": {
                "EVENTS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "js\\_extracted_events.js",
            "line": 7,
            "description": "Wanaplan Event List.",
            "itemtype": "main"
        }
    },
    "classes": {
        "AnalyticsComponent": {
            "name": "AnalyticsComponent",
            "shortname": "AnalyticsComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\AnalyticsComponent\\AnalyticsComponent.js",
            "line": 64,
            "description": "Analytics Component to enable stat tracking with Google Analytics.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan core",
                    "type": "wnp.Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "AvatarComponent3D": {
            "name": "AvatarComponent3D",
            "shortname": "AvatarComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 9,
            "description": "This component adds and handles a 3D avatar on the scene.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "HideAvatarComponent": {
            "name": "HideAvatarComponent",
            "shortname": "HideAvatarComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\AvatarComponent\\HideAvatarComponent.js",
            "line": 7,
            "description": "Component to hide the avatar when the camera is too close to it.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "CameraComponent": {
            "name": "CameraComponent",
            "shortname": "CameraComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 8,
            "description": "Camera Component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan core",
                    "type": "wnp.Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "ConfiguratorModComponent3D": {
            "name": "ConfiguratorModComponent3D",
            "shortname": "ConfiguratorModComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 6,
            "description": "This component is responsible for holding the state of the configurator :\nstate = idle | animationIn | ready | animationOut\n\nIt listens to events that alter this state.\nAn event cycle follows this pattern :\n\n wnp.request.configurator.start\n           |\n wnp.engine3D.configurator.animationIn.begin\n           |\n wnp.engine3D.configurator.animationIn.end\n           |\n wnp.engine3D.configurator.start\n           |\n           |\n wnp.request.configurator.stop\n           |\n wnp.engine3D.configurator.stop\n           |\n wnp.engine3D.configurator.animationOut.begin\n           |\n wnp.engine3D.configurator.animationOut.end\n           |\n           v\n\n If the animation component is not present, this component simulates the animationIn|Out event to ensure consistency with others components\n\n\n It is also responsible for inhibiting actions that should not be performed in configurator mode.",
            "extends": "BaseComponent3D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan core",
                    "type": "wnp.Core"
                }
            ]
        },
        "FloorComponent3D": {
            "name": "FloorComponent3D",
            "shortname": "FloorComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 8,
            "description": "This component is responsible for handling the floor mesh containers in 3D.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "FloorController": {
            "name": "FloorController",
            "shortname": "FloorController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 6,
            "description": "A remote control to interact with the floors.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "FloorStructure": {
            "name": "FloorStructure",
            "shortname": "FloorStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 7,
            "description": "Floor.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "HopperComponent2D": {
            "name": "HopperComponent2D",
            "shortname": "HopperComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 9,
            "description": "Hopper 2D.\nComponent which handles :\n- actions performed in 2D relatively to the hopper. Such as :\n     - adding a hopper\n     - displaying the hopper context menu\n     - translating the hopper\n     - modifying the shape of the hopper ( moving / adding / removing points )\n- the 2D rendering of the hopper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "HopperComponent3D": {
            "name": "HopperComponent3D",
            "shortname": "HopperComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 10,
            "description": "3D Hopper component which handles the 3D rendering of the hopper.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "HopperStructure": {
            "name": "HopperStructure",
            "shortname": "HopperStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 7,
            "description": "Hopper's structure.",
            "extends": "BaseStructure",
            "is_constructor": 1,
            "params": [
                {
                    "name": "points",
                    "description": "The polygon which defines the hopper shape, default is a 100cm large square.",
                    "type": "BABYLON.Vector2[]",
                    "optional": true
                }
            ]
        },
        "AssimpImporter": {
            "name": "AssimpImporter",
            "shortname": "AssimpImporter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 3,
            "description": "An importer for assimp2json export.",
            "is_constructor": 1,
            "extends": "Programmable",
            "params": [
                {
                    "name": "engine",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "structure",
                    "description": "A structure for this programmable.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "A set of custom parameters.",
                    "type": "Object"
                }
            ],
            "static": 1
        },
        "wnp.Programmable": {
            "name": "wnp.Programmable",
            "shortname": "wnp.Programmable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 11,
            "description": "Abstract class from which all the programmables inherit.  \nA programmable is responsible for exposing the parameters of an object and building the associated mesh.  \nA programmable life cycle follows a strict process. See the [wiki](https://github.com/wanadev/WanaplanAPI/wiki/Object) for more informations.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "The BABYLON engine.",
                    "type": "BABYLON.Engine"
                },
                {
                    "name": "structure",
                    "description": "An object structure to embed the programmable in.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "params",
                    "description": "Optionnal parameters to build the object.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ]
        },
        "DecorationComponent": {
            "name": "DecorationComponent",
            "shortname": "DecorationComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 25,
            "description": "This component manages the decoration of all the objects in the scene.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan core.",
                    "type": "Core"
                }
            ]
        },
        "DragComponent3D": {
            "name": "DragComponent3D",
            "shortname": "DragComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 10,
            "description": "This component is responsible for handling the object moving by drag an drop.\nListens to the drag event, solves it by detecting the object under the cursor.\nWhen a draggable object is dragged, solve the new position computation using the projection of the cursor on the scene.\nThen apply the move using the TransformComponent3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "EditionComponent3D": {
            "name": "EditionComponent3D",
            "shortname": "EditionComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 8,
            "description": "Component managing the user-guided edition of the 3D scene.\nManages all interactions involving modifications of the scene's geometry.\nNecessary when the scene can be edited by the user.\n > For instance, in viewer mode, this component is inactive.\n\nThis component sends internal events when an object is manipulated, which can be listened to by the widgets for example.\nTo set/remove a callback for one of these events, use the functions `on` and `off` of this component (see Controls for the declaration).\nHere is the list of all events you can set callbacks to, and the type of the argument provided to the callback :\n\n* deselectObject (no argument)\n* dispose (BABYLON.Mesh) \n* refresh (BABYLON.Mesh)\n* selectObject (BABYLON.Mesh)\n* special (MouseEvent)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "wnp.Core"
                }
            ],
            "extends": "Controls"
        },
        "GroupManager": {
            "name": "GroupManager",
            "shortname": "GroupManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 5,
            "description": "This class abstracts groups of objects\nIt provides an interface to group objects together, historize the actions, etc\nIt requires `EditionComponent3D` to manage the scene objects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "editionComponent",
                    "description": "The parent edition component.",
                    "type": "EditionComponent3D"
                }
            ]
        },
        "ObjectComponent3D": {
            "name": "ObjectComponent3D",
            "shortname": "ObjectComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 21,
            "description": "Handles the 3D object instanciation for wanaplan.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "ObjectStructure": {
            "name": "ObjectStructure",
            "shortname": "ObjectStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 9,
            "description": "Structure of an object.",
            "is_constructor": 1,
            "extends": "BaseStructure",
            "params": [
                {
                    "name": "fileName",
                    "description": "name of the programmable file",
                    "type": "String"
                },
                {
                    "name": "baseUrl",
                    "description": "path to the programmable file",
                    "type": "String"
                },
                {
                    "name": "transforms",
                    "description": "object containing the transform properties of the object with fields : position, rotation, scaling, modelRotation, preferredYAngle",
                    "type": "Object"
                },
                {
                    "name": "builderId",
                    "description": "name of the builder",
                    "type": "String"
                }
            ]
        },
        "TransformObjectComponent3D": {
            "name": "TransformObjectComponent3D",
            "shortname": "TransformObjectComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 6,
            "description": "This component handles the transformation (rotation/translation) of every mesh on the scene.\nThis conveniently provides an history of tranformations, especially when the user moves an object from point A to point B,\ntravelling around the whole scene - (It merges translations and rotation into a resultant one).",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan.",
                    "type": "wnp.Core"
                }
            ]
        },
        "OvertureComponent2D": {
            "name": "OvertureComponent2D",
            "shortname": "OvertureComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 7,
            "description": "Overture component 2D.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "OvertureComponent3D": {
            "name": "OvertureComponent3D",
            "shortname": "OvertureComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 10,
            "description": "Overture Component 3D.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "OvertureStructure": {
            "name": "OvertureStructure",
            "shortname": "OvertureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 7,
            "description": "Overture structure.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "PointComponent2D": {
            "name": "PointComponent2D",
            "shortname": "PointComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 7,
            "description": "Class managing the 2D wall points.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "PointStructure": {
            "name": "PointStructure",
            "shortname": "PointStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 7,
            "description": "Class representing wall points.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "RoomComponent2D": {
            "name": "RoomComponent2D",
            "shortname": "RoomComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 7,
            "description": "Rooms in 2D.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "RoomComponent3D": {
            "name": "RoomComponent3D",
            "shortname": "RoomComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 6,
            "description": "This component handles rooms in the 3D context.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "RoomHierarchy": {
            "name": "RoomHierarchy",
            "shortname": "RoomHierarchy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js",
            "line": 7,
            "description": "Room Hierarchy tree.",
            "is_constructor": 1
        },
        "RoomStructure": {
            "name": "RoomStructure",
            "shortname": "RoomStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 9,
            "description": "A room object.\nMore info can be found in the [Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Rooms).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "SpiralStairwayStructure": {
            "name": "SpiralStairwayStructure",
            "shortname": "SpiralStairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 9,
            "description": "Stairway structure for the spiral stairway.",
            "is_constructor": 1,
            "extends": "StairwayStructure"
        },
        "StairwayComponent2D": {
            "name": "StairwayComponent2D",
            "shortname": "StairwayComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 11,
            "description": "Stairway Component 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan.",
                    "type": "wnp.Core"
                }
            ]
        },
        "StairwayComponent3D": {
            "name": "StairwayComponent3D",
            "shortname": "StairwayComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 10,
            "description": "Stairway component 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan.",
                    "type": "wnp.Core"
                }
            ]
        },
        "StairwayStructure": {
            "name": "StairwayStructure",
            "shortname": "StairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 10,
            "description": "The structure of a stairway.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "StraightStairwayStructure": {
            "name": "StraightStairwayStructure",
            "shortname": "StraightStairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 8,
            "description": "Stairway structure for straight stairways.",
            "is_constructor": 1,
            "extends": "StairwayStructure"
        },
        "SubSlopeComponent2D": {
            "name": "SubSlopeComponent2D",
            "shortname": "SubSlopeComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 9,
            "description": "Creates and draws subslopes in 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan.",
                    "type": "wnp.Core"
                }
            ]
        },
        "SubSlopeComponent3D": {
            "name": "SubSlopeComponent3D",
            "shortname": "SubSlopeComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 10,
            "description": "Creates and draws subslopes in 3D.",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan.",
                    "type": "wnp.Core"
                }
            ],
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "SubSlopeOvertureComponent2D": {
            "name": "SubSlopeOvertureComponent2D",
            "shortname": "SubSlopeOvertureComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 8,
            "description": "SubSlopeOuverture 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "SubSlopeOvertureStructure": {
            "name": "SubSlopeOvertureStructure",
            "shortname": "SubSlopeOvertureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 10,
            "description": "The structure for a subslope overture (dormer, velux... ).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "SubSlopeStructure": {
            "name": "SubSlopeStructure",
            "shortname": "SubSlopeStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 8,
            "description": "A subslope object.\nMore info can be found in the [Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Subslopes).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "PolygonWall": {
            "name": "PolygonWall",
            "shortname": "PolygonWall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 7,
            "description": "Polygonal walls.\nRepresents the standard wanaplan wall, which is a closed polygon of N points.",
            "is_constructor": 1,
            "extends": "WallStructure"
        },
        "WallComponent2D": {
            "name": "WallComponent2D",
            "shortname": "WallComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 7,
            "description": "2D Wall management.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "WallComponent3D": {
            "name": "WallComponent3D",
            "shortname": "WallComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 6,
            "description": "3D Walls management.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "WallPane3D": {
            "name": "WallPane3D",
            "shortname": "WallPane3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 9,
            "description": "3D decorable wall panes.",
            "is_constructor": 1,
            "extends": "MeasureStructure",
            "params": [
                {
                    "name": "points",
                    "description": "Array of 2 vectors, for the 2 endings of the wall pane.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "parent",
                    "description": "Parent wall, which induced the wall pane.",
                    "type": "WallStructure"
                },
                {
                    "name": "parentWallSide",
                    "description": "A normal vector to the wall pane. It indicates on which side of the parent wall the pane lies.",
                    "type": "BABYLON.Vector2"
                }
            ]
        },
        "WallStructure": {
            "name": "WallStructure",
            "shortname": "WallStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 7,
            "description": "Base abstract class for walls.\nMore info can be found in the [Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Wall%20Points).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "GridComponent2D": {
            "name": "GridComponent2D",
            "shortname": "GridComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\GridComponent\\GridComponent2D.js",
            "line": 11,
            "description": "2D Background grid.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "GridComponent3D": {
            "name": "GridComponent3D",
            "shortname": "GridComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 5,
            "description": "This component manages the whole 3D environnement,\nspecifically the 3D grid, the skybox, and the lights.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "HistoryComponent": {
            "name": "HistoryComponent",
            "shortname": "HistoryComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 36,
            "description": "Component which handles the history of undos and redos.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "BaseTopMenuComponent2D": {
            "name": "BaseTopMenuComponent2D",
            "shortname": "BaseTopMenuComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 6,
            "description": "A base 2D component to manage top and sub menus.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "name",
                    "description": "The component's name.",
                    "type": "String"
                }
            ]
        },
        "ExitComponent": {
            "name": "ExitComponent",
            "shortname": "ExitComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 8,
            "description": "This component is responsible to quit the application and redirect the user to an external URL.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ]
        },
        "FullscreenComponent": {
            "name": "FullscreenComponent",
            "shortname": "FullscreenComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 6,
            "description": "This component is responsible for adding a button in the top menu to toggle fullscreen mode.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseTopMenuComponent2D"
        },
        "NewComponent": {
            "name": "NewComponent",
            "shortname": "NewComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 8,
            "description": "This component is responsible for creating new plans.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseTopMenuComponent2D"
        },
        "OptionsComponent": {
            "name": "OptionsComponent",
            "shortname": "OptionsComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "line": 6,
            "description": "This component handles the options in the top menu.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "ScreenshotMenuComponent": {
            "name": "ScreenshotMenuComponent",
            "shortname": "ScreenshotMenuComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js",
            "line": 6,
            "description": "This component adds a button in the top menu to take a screenshot.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "TransparencyComponent": {
            "name": "TransparencyComponent",
            "shortname": "TransparencyComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\TransparencyComponent.js",
            "line": 12,
            "description": "This component enables the user to better see what he is doing by making walls and roofs transparent.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan.",
                    "type": "Core"
                }
            ]
        },
        "LockComponent": {
            "name": "LockComponent",
            "shortname": "LockComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 9,
            "description": "This component is responsible for adding a lock icon to lock/unlock the drag action on all objects in the scene.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "MagnetismComponent2D": {
            "name": "MagnetismComponent2D",
            "shortname": "MagnetismComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 7,
            "description": "2D Magnetism.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "MagnetismComponent3D": {
            "name": "MagnetismComponent3D",
            "shortname": "MagnetismComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MagnetismComponent\\WorkingMagnetismComponent3D.js",
            "line": 11,
            "description": "Composant chargé du magnétisme sur la scène 3D",
            "is_constructor": 1,
            "deprecated": true,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ]
        },
        "EditMeasureComponent": {
            "name": "EditMeasureComponent",
            "shortname": "EditMeasureComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MeasureComponent\\EditMeasureComponent.js",
            "line": 7,
            "description": "Component allowing to edit 2D Measures when clicking on them.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "wnp.Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "MeasureComponent": {
            "name": "MeasureComponent",
            "shortname": "MeasureComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 7,
            "description": "2D Measures.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "MeasureStructure": {
            "name": "MeasureStructure",
            "shortname": "MeasureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 7,
            "description": "The measure structure.\nAllows to merge and split measures.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "points",
                    "description": "The points where to split the measure, ordered by increasing distance to points[0].",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "parent",
                    "description": "Parent wall inducing the measure.",
                    "type": "WallStructure"
                },
                {
                    "name": "offsetVector",
                    "description": "Normalized vector indicating in which direction to offset the display of the measure in relation to the wall.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "extends": "BaseStructure"
        },
        "MobileComponent": {
            "name": "MobileComponent",
            "shortname": "MobileComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 7,
            "description": "This component is responsible for configuring Wanaplan on mobile devices.\nIt adapts graphics, adds a mobile stylesheet and removes some unecessary components.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "forceNoDirty",
                    "description": "If true, forces this component to be clean.",
                    "type": "Boolean"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "MobileInputComponent": {
            "name": "MobileInputComponent",
            "shortname": "MobileInputComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 8,
            "description": "This component is responsible for configuring the correct input mode on mobile devices.\nIt checks the user's input method (touch or mouse). If mouse is detected nothing is done and the\ncomponent is removed. Otherwise, touch screen support is enabled.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent2D"
        },
        "PedagoComponent": {
            "name": "PedagoComponent",
            "shortname": "PedagoComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 7,
            "description": "This component tests the browser capabilities and redirects the user to the suitable page.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "HardwareScalingComponent3D": {
            "name": "HardwareScalingComponent3D",
            "shortname": "HardwareScalingComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 6,
            "description": "This component manages hardware scaling on the rendering canvas.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The engine.",
                    "type": "Core"
                }
            ]
        },
        "DGM_LoadComponent": {
            "name": "DGM_LoadComponent",
            "shortname": "DGM_LoadComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMLoadComponent.js",
            "line": 2,
            "description": "A component used to load a stored plan in IndexedDB by its uuid.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "DGM_SaveComponent": {
            "name": "DGM_SaveComponent",
            "shortname": "DGM_SaveComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMSaveComponent.js",
            "line": 4,
            "description": "A component that send some informations about a plan when it's saved using the `WebSocket` API.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "DGM_ZoomComponent": {
            "name": "DGM_ZoomComponent",
            "shortname": "DGM_ZoomComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 2,
            "description": "This component is used to zoom or dezoom the 2D canvas with a double tap on the screen.\nDouble tap on the left of the screen for a dezoom and on the right of the screen for a zoom.\nThe zoom factor can be modified. It's possible to use this feature with a the double click mouse event.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "SA_ConnectionStatusDetector": {
            "name": "SA_ConnectionStatusDetector",
            "shortname": "SA_ConnectionStatusDetector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 7,
            "description": "This component is responsible to detect if the browser is online or offline.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "SA_Timer": {
            "name": "SA_Timer",
            "shortname": "SA_Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 134,
            "description": "A simple timer",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "SA_DatabaseManager": {
            "name": "SA_DatabaseManager",
            "shortname": "SA_DatabaseManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 7,
            "description": "An IndexedDB database manager. The constructor will try to normalize all prefixed objects.",
            "is_constructor": 1
        },
        "SA_NewComponent": {
            "name": "SA_NewComponent",
            "shortname": "SA_NewComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\SA_NewComponent.js",
            "line": 8,
            "description": "This component is responsible to create a new plan in standalone mode.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "SA_StorageManager": {
            "name": "SA_StorageManager",
            "shortname": "SA_StorageManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\SA_StorageManager.js",
            "line": 18,
            "description": "This component is responsible to save and load plans in standalone mode.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "SA_WebService": {
            "name": "SA_WebService",
            "shortname": "SA_WebService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\SA_WebService.js",
            "line": 7,
            "description": "A web service manager responible to send saved plan on the server.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "options",
                    "description": "A dictionary that contains options.",
                    "type": "Object"
                }
            ]
        },
        "StandaloneComponent": {
            "name": "StandaloneComponent",
            "shortname": "StandaloneComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\StandaloneComponent\\StandaloneComponent.js",
            "line": 7,
            "description": "This component is responsible to load required scripts for the standalone mode.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "BaseComponent2D": {
            "name": "BaseComponent2D",
            "shortname": "BaseComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 7,
            "description": "Base class for 2D components.",
            "is_constructor": 1,
            "abstract": "",
            "params": [
                {
                    "name": "core",
                    "description": "Core instance",
                    "type": "wnp.Core"
                },
                {
                    "name": "name",
                    "description": "Component name",
                    "type": "String"
                }
            ]
        },
        "BaseComponent3D": {
            "name": "BaseComponent3D",
            "shortname": "BaseComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 7,
            "description": "Base class for 3D components.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Instance of the Core.",
                    "type": "wnp.Core"
                },
                {
                    "name": "name",
                    "description": "Name of the component.",
                    "type": "String"
                }
            ]
        },
        "BaseStructure": {
            "name": "BaseStructure",
            "shortname": "BaseStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseStructure.js",
            "line": 9,
            "description": "Base Virtual Class for component's data",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A generic name for the data type",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "API.e2D": {
            "name": "API.e2D",
            "shortname": "API.e2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API",
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 7,
            "description": "API for wanaplan's 2D engine.",
            "is_constructor": 1
        },
        "API.e3D": {
            "name": "API.e3D",
            "shortname": "API.e3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API",
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 7,
            "description": "API for wanaplan's 3D engine.",
            "is_constructor": 1
        },
        "API.html": {
            "name": "API.html",
            "shortname": "API.html",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API",
            "file": "js\\Core\\Api\\Api.html.js",
            "line": 7,
            "description": "API for Wanaplan html helpers.",
            "is_constructor": 1
        },
        "API": {
            "name": "API",
            "shortname": "API",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "",
            "file": "js\\Core\\Api\\Api.js",
            "line": 11,
            "description": "API wanaplan",
            "is_constructor": 1
        },
        "API.material": {
            "name": "API.material",
            "shortname": "API.material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API",
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 7,
            "description": "API for Wanaplan materials.",
            "is_constructor": 1
        },
        "API.ui": {
            "name": "API.ui",
            "shortname": "API.ui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API",
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 7,
            "description": "API for Wanaplan User Interface.",
            "is_constructor": 1
        },
        "API.utils": {
            "name": "API.utils",
            "shortname": "API.utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API",
            "file": "js\\Core\\Api\\Api.utils.js",
            "line": 7,
            "description": "API utilities.",
            "is_constructor": 1
        },
        "wnp.KeyboardManager": {
            "name": "wnp.KeyboardManager",
            "shortname": "wnp.KeyboardManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp",
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 38,
            "description": "The keyboard manager updates a dictionary of key states.\nIt can easily be used anywhere in the application."
        },
        "wnp.PointerManager": {
            "name": "wnp.PointerManager",
            "shortname": "wnp.PointerManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp",
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 11,
            "description": "The pointer manager is an abstraction of `MouseEvent`, `TouchEvent` and `PointerEvent` and is responsible for managing\nall types of 'pointer' input in Wanaplan.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "callback",
                    "description": "Function called when an event is caught (can be null).",
                    "type": "Function"
                },
                {
                    "name": "domElement",
                    "description": "The DOM element to use for event listening.",
                    "type": "HTMLElement"
                },
                {
                    "name": "param",
                    "description": "Additional parameters `{ offsets: BABYLON.Vector3(0,0), width: 0, height: 0 }`.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "wnp.Input.TouchManager": {
            "name": "wnp.Input.TouchManager",
            "shortname": "wnp.Input.TouchManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp.Input",
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 11,
            "description": "Manages touch events on mobile devices.\nAll events are listed below along with their parameters. You can register/unregister your own callbacks using the methods `on` and `off`.  \n__N.B__ : Use event.clientX or event.pageX to get the positions, depending on the browser you target.  \n\n## Events :\n* `touchDown`, button : Number\n* `touchUp`\n* `touchMove`\n* `tap`\n* `dblTap`\n* `longPress`\n* `swipe`\n* `rotate`",
            "is_constructor": 1,
            "params": [
                {
                    "name": "domElement",
                    "description": "The targeted DOM element.",
                    "type": "HTMLElement"
                }
            ]
        },
        "wnp.GlassMaterial": {
            "name": "wnp.GlassMaterial",
            "shortname": "wnp.GlassMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Glass.js",
            "line": 10,
            "description": "A material to represent objects made of glass.\nHas an env map, and is transparent.",
            "is_constructor": 1,
            "extends": "wnp.MetalMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "baseColor",
                            "description": "Glass color. White by default.",
                            "type": "BABYLON.Color3",
                            "optional": true
                        },
                        {
                            "name": "brillance",
                            "description": "Glass brillance, between 0 and 1. Default : 0.5",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Glass opacity, between 0 and 1. Default : 0.3",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "wnp.LeatherMaterial": {
            "name": "wnp.LeatherMaterial",
            "shortname": "wnp.LeatherMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Leather.js",
            "line": 10,
            "description": "A material to represent objects made of leather.",
            "is_constructor": 1,
            "extends": "wnp.TexturedMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ]
        },
        "wnp.MetalMaterial": {
            "name": "wnp.MetalMaterial",
            "shortname": "wnp.MetalMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 10,
            "description": "A material to represent objects made of metal.\nHas an env map",
            "is_constructor": 1,
            "extends": "wnp.StandardMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "baseColor",
                            "description": "Metal color. Grey-ish by default.",
                            "type": "BABYLON.Color3",
                            "optional": true
                        },
                        {
                            "name": "brillance",
                            "description": "Metal brillance, between 0 and 1. Default : 0.5",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "wnp.PlasticMaterial": {
            "name": "wnp.PlasticMaterial",
            "shortname": "wnp.PlasticMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Plastic.js",
            "line": 10,
            "description": "A material to represent objects made of plastic.\nKinda glossy !",
            "is_constructor": 1,
            "extends": "wnp.WhiteMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "baseColor",
                            "description": "Plastic color. White by default.",
                            "type": "BABYLON.Color3",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "wnp.TexturedMaterial": {
            "name": "wnp.TexturedMaterial",
            "shortname": "wnp.TexturedMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 10,
            "description": "A simple Textured material.",
            "is_constructor": 1,
            "extends": "wnp.StandardMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "diffuseTexture",
                            "description": "Diffuse texture.",
                            "type": "BABYLON.Texture",
                            "optional": true
                        },
                        {
                            "name": "bumpTexture",
                            "description": "Bump texture.",
                            "type": "BABYLON.Texture",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "wnp.TileMaterial": {
            "name": "wnp.TileMaterial",
            "shortname": "wnp.TileMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Tile.js",
            "line": 10,
            "description": "A material to represent Tiles",
            "is_constructor": 1,
            "deprecated": true,
            "extends": "wnp.TexturedMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ]
        },
        "wnp.WhiteMaterial": {
            "name": "wnp.WhiteMaterial",
            "shortname": "wnp.WhiteMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\White.js",
            "line": 10,
            "description": "Simple white material. Very light shading.",
            "is_constructor": 1,
            "extends": "wnp.StandardMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "factor",
                            "description": "Brightness factor.",
                            "type": "BABYLON.Color3",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "wnp.WoodMaterial": {
            "name": "wnp.WoodMaterial",
            "shortname": "wnp.WoodMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Wood.js",
            "line": 10,
            "description": "A material for wood objects.",
            "is_constructor": 1,
            "extends": "wnp.TexturedMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "params",
                    "description": "Material parameters",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "diffuseTexture",
                            "description": "The diffuse texture. If not specified, a default wood texture is set.",
                            "type": "BABYLON.Texture",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "wnp.ImageProcessor": {
            "name": "wnp.ImageProcessor",
            "shortname": "wnp.ImageProcessor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp",
            "file": "js\\Core\\Rendering\\ImageProcessor.js",
            "line": 6,
            "description": "This class provides an easy way to apply a shader on a full screen quad, in order to process pixels in screen-space.  \nIt can be used as static or instanciated.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "BABYLON",
                    "description": "Engine.",
                    "type": "BABYLON.Engine"
                }
            ]
        },
        "wnp.Outliner": {
            "name": "wnp.Outliner",
            "shortname": "wnp.Outliner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp",
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 6,
            "description": "Outlining effect manager. Renders an outline on mesh/submeshes as an emphasis effect.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ]
        },
        "Info": {
            "name": "Info",
            "shortname": "Info",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Widget",
            "namespace": "",
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 20,
            "description": "A 3D widget to display a 3D icon.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Rotator": {
            "name": "Rotator",
            "shortname": "Rotator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Widget",
            "namespace": "",
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 21,
            "description": "A 3D widget for rotate an object.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "wnp.CameraFeatures": {
            "name": "wnp.CameraFeatures",
            "shortname": "wnp.CameraFeatures",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 12,
            "description": "The Camera Features adds cool features for camera management."
        },
        "wnp.AnimationCancelor": {
            "name": "wnp.AnimationCancelor",
            "shortname": "AnimationCancelor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 535,
            "description": "Is relative to an animation started with computeAnimation.\nExposes functions which control the animation.\nAn `AnimationCancelor` object is returned by computed animation, and this class should not be instanciated in any another way."
        },
        "Controls": {
            "name": "Controls",
            "shortname": "Controls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "",
            "file": "js\\Core\\Controls.js",
            "line": 8,
            "description": "High-level controller for the 3D scene, that handles selection, dragging, and notifying events to 3D widgets.\nIt is derived into a higher level of abstraction class : EditionComponent3D, but can still be used by another component.\n\nControls is the selection/dragging system on wanaplan, it wraps all Engine3D events into a high-level system.\nYou provide a list of objects that can be selected and dragged.\nThese objects have a hierarchy (parent - children), and an ancestor, called the `root`.\n\nDragging :\nA referent parent is always set, you can only drag object that are direct children of the referent parent, or \ndirect children of the root.\n\nSelection :\nYou select objects by clicking on them. You can only select objects that are direct children of the referent parent, or \ndirect children of the root.\n\nHere is the list of all events you can set callbacks to, and the type of the argument provided to the callback :\n\n* before-dragstart (no argument)\n* before-dragging (BABYLON.Ray)\n* dragstart (BABYLON.PickingInfo)\n* dragging (BABYLON.PickingInfo)\n* dragend (BABYLON.PickingInfo)\n* mouseup (MouseEvent)\n* mousedown (MouseEvent)\n* mousemove (MouseEvent)\n* before-click (no argument)\n* click (BABYLON.PickingInfo)\n* double-click (BABYLON.PickingInfo)\n* select (BABYLON.PickingInfo)\n* deselect (BABYLON.PickingInfo)",
            "is_constructor": 1
        },
        "wnp.StandardMaterial": {
            "name": "wnp.StandardMaterial",
            "shortname": "wnp.StandardMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp",
            "file": "js\\Core\\Material.js",
            "line": 12,
            "description": "Abstract class for Materials.  \nN.B : This class is derived from `BABYLON.StandardMaterial`.  \nCheck the [Babylon SOKRATE](http://www.sokrate.fr/documentation/babylonjs/BABYLON.StandardMaterial.html)\ndocumentation for more information about materials.",
            "is_constructor": 1,
            "extends": "BABYLON.StandardMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "A name.",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ]
        },
        "MaterialInfo": {
            "name": "MaterialInfo",
            "shortname": "MaterialInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\MaterialInfo.js",
            "line": 6,
            "description": "Material information for wall panes",
            "is_constructor": 1,
            "params": [
                {
                    "name": "material",
                    "description": "material of the wall pane",
                    "type": "BABYLON.Material"
                }
            ]
        },
        "Dummy": {
            "name": "Dummy",
            "shortname": "Dummy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Helpers\\DummyHelper.js",
            "line": 7,
            "description": "A class that contains dummy objects.",
            "static": 1
        },
        "GlobalHelper": {
            "name": "GlobalHelper",
            "shortname": "GlobalHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "",
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 6,
            "description": "Various methods to handle the HTML structure modification.",
            "is_constructor": 1
        },
        "ObjectHelper": {
            "name": "ObjectHelper",
            "shortname": "ObjectHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 6,
            "description": "Various methods to handle 3D object manipulation.",
            "is_constructor": 1
        },
        "ObjectHelper.AABB": {
            "name": "ObjectHelper.AABB",
            "shortname": "ObjectHelper.AABB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 169,
            "description": "Axis Aligned Bounding Box.\n\nIn order to keep things simple and limit space complexity, this class holds minimal mandatory properties.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "max",
                    "description": "the point of the box which is the greatest ( in world reference )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "min",
                    "description": "the point of the box which is the smallest ( in world reference )",
                    "type": "BABYLON.Vector3"
                }
            ]
        },
        "ObjectHelper.OBB": {
            "name": "ObjectHelper.OBB",
            "shortname": "OBB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 274,
            "description": "Oriented Bounding Box.\n\nIn order to keep things simple and limit space complexity, this class holds minimal mandatory properties.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dimension",
                    "description": "the vector from the origin to the top corner ( positive vector )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "matrix",
                    "description": "the transormation matrix of the box, should be a rotation combined with a translation",
                    "type": "BABYLON.Matrix"
                }
            ]
        },
        "ObjectHelper.OyBB": {
            "name": "ObjectHelper.OyBB",
            "shortname": "OyBB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 364,
            "description": "Bounding Box Oriented along Y axis.\nSame as OBB but the rotation is only along the Y axis, which saves some computations.\n\nin order to keep things simple and limit space complexity, this class holds minimal mandatory properties.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dimension",
                    "description": "the vector from the origin to the top corner ( positive vector )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "matrix",
                    "description": "the transormation matrix of the box, should be a rotationY combined with a translation",
                    "type": "BABYLON.Matrix"
                }
            ]
        },
        "ObjectHelper.collision": {
            "name": "ObjectHelper.collision",
            "shortname": "collision",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 516,
            "description": "Collision checking.",
            "static": 1,
            "is_constructor": 1
        },
        "ObjectHelper.Interval": {
            "name": "ObjectHelper.Interval",
            "shortname": "Interval",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 1201,
            "description": "One Dimension Interval, can compute operations on intervals such as [ 1 , 2 ] U [ 3 ,4 ] ..",
            "is_constructor": 1
        },
        "wnp.Symbols2D": {
            "name": "wnp.Symbols2D",
            "shortname": "wnp.Symbols2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 10,
            "description": "Draw methods for standard 2D symbols",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "wnp.uuid": {
            "name": "wnp.uuid",
            "shortname": "wnp.uuid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Helpers\\uuid.js",
            "line": 8,
            "description": "Generating unique ids, according to RFC4122 http://www.ietf.org/rfc/rfc4122.txt",
            "is_constructor": 1
        },
        "Logger": {
            "name": "Logger",
            "shortname": "Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Logger.js",
            "line": 5,
            "description": "This class is dedicated to debugging by providing methods which are only active in debug mode.",
            "static": 1
        },
        "wnp.LoopTimer": {
            "name": "wnp.LoopTimer",
            "shortname": "wnp.LoopTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\LoopTimer.js",
            "line": 9,
            "description": "A simple timer.",
            "is_constructor": 1
        },
        "EVENTS": {
            "name": "EVENTS",
            "shortname": "EVENTS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EVENTS",
            "namespace": "",
            "file": "js\\_extracted_events.js",
            "line": 7,
            "description": "Events description (not a real class)"
        }
    },
    "classitems": [
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 21,
            "description": "The avatar mesh.",
            "itemtype": "property",
            "name": "avatar",
            "type": "{BABYLON.Mesh}",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 112,
            "description": "Changes the Avatar visibility state.",
            "itemtype": "method",
            "name": "setVisibility",
            "params": [
                {
                    "name": "isVisible",
                    "description": "True to set visible and false to set invisible.",
                    "type": "Boolean"
                }
            ],
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 125,
            "description": "Disables event listening.",
            "itemtype": "method",
            "name": "disable",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 137,
            "description": "Enables event listening.",
            "itemtype": "method",
            "name": "enable",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 150,
            "description": "Fired when the transform of an object is modified.",
            "itemtype": "event",
            "name": "wnp.engine3D.UIobject.transform",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 176,
            "description": "Fired to disable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.disable-orbit-camera",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 247,
            "description": "Fired when the 3D camera has been moved.",
            "itemtype": "event",
            "name": "wnp.engine3D.camera.move",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 253,
            "description": "Fired to enable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.enable-orbit-camera",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\HideAvatarComponent.js",
            "line": 41,
            "description": "Sets the visibility of the avatar according to the camera position.\nTriggered on event `wnp.engine3D.camera.zoom`",
            "itemtype": "method",
            "name": "onZoom",
            "class": "HideAvatarComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 35,
            "description": "A mesh bound to the lookAt position, that will move with the camera.\nBy default, it is the avatar mesh.",
            "itemtype": "property",
            "name": "lookAt",
            "type": "{BABYLON.Mesh}",
            "class": "CameraComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 55,
            "description": "The cameras.\nThe element of index 0 is a BABYLON.ArcRotateCamera, for orbit mode.\nThe element of index 1 is a BABYLON.FreeCamera, for FPS mode.",
            "itemtype": "property",
            "name": "camera",
            "type": "{BABYLON.Camera[]}",
            "class": "CameraComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 195,
            "description": "Fired to zoom the camera.",
            "itemtype": "event",
            "name": "wnp.engine3D.camera.zoom",
            "class": "CameraComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 222,
            "description": "Fired to change the camera.",
            "itemtype": "event",
            "name": "wnp.engine3D.cameraChanged",
            "class": "CameraComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 58,
            "description": "start displaying the handles at every camera move",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 74,
            "description": "stop displaying the handles",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 207,
            "description": "dispose handle specified by the name, or all the handles if name is omitted",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 271,
            "description": "fill the _availableHandlesobject with true for one handle if the object can be edited along this axis, flase else\nis based in the getPropertyName",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 1,
            "description": "listen masterReshaper",
            "extends": "BaseComponent3D",
            "requires": [
                "MasterReshaperComponent"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 103,
            "description": "display the handle when the object is resized, when false the handle will be hided",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 108,
            "description": "display the handle when the object is resized, when false the handle will be hided",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 113,
            "description": "animate the handle when the cursor is hover a face",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 118,
            "description": "display a plan to figure the new position of the dragged face",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 123,
            "description": "display a plan to figure the face when the cursor is over it",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 128,
            "description": "display a plan to figure the old face when it is dragged",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 133,
            "description": "round the object dimension",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 138,
            "description": "debug option",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 194,
            "description": "return the true bounding box, where position is the center of the box and dimension the dimension of the box",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 1,
            "description": "This component is responsible for notifying UI events to reshaper children.\nRegisters a unique reshaper with a askhand / releasehand mecanism\n\nAnswers events thrown by ConfiguratorModComponent",
            "extends": "BaseComponent3D",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 103,
            "description": "A reshaper should call this before being activated.\nIf requireHand returns true, then the reshaper is activated and can edit the object,\nelse it can't.\n\nThis prevents from having two active reshapers at the same time.",
            "itemtype": "method",
            "name": "requireHand",
            "params": [
                {
                    "name": "configurator",
                    "description": "the reshaper that needs to be activated",
                    "type": "Component"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 138,
            "description": "A reshaper should call this for deactivation,",
            "itemtype": "method",
            "name": "releaseHand",
            "params": [
                {
                    "name": "configurator",
                    "description": "the reshaper that needs to be deactivated",
                    "type": "Component"
                }
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 157,
            "description": "Starts the reshaper master, and all the reshapers depending on it",
            "itemtype": "method",
            "name": "start",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 186,
            "description": "Stops the reshaper master, and all the reshapers depending on it",
            "itemtype": "method",
            "name": "stop",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 93,
            "description": "Fired by the configurator component when an 'Animation-In' begins.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationIn.begin",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 99,
            "description": "launchs the animation to focus the camera on the object",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 159,
            "description": "Fired by the configurator component when an 'Animation-In' is done.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationIn.end",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 165,
            "description": "Fired by the configurator component when an 'Animation-Out' is done.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationOut.end",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 189,
            "description": "cancel the animation, leave the camera where it is",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 197,
            "description": "Fired by the configurator component when an 'Animation-Out' begins.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationOut.begin",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 203,
            "description": "go back to primar camera state",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 145,
            "description": "Fired by the configurator component when an 'Animation-In' begins.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationIn.begin",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 151,
            "description": "Fired by the configurator component when an 'Animation-In' is done.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationIn.end",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 157,
            "description": "Fired to ask the configurator to start an 'Animation-In'.",
            "itemtype": "event",
            "name": "wnp.request.configurator.animationIn.start",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 163,
            "description": "Tries to start the configurator,\nif the state is not suitable then does nothing.\n\nIf the animationInOut component is loaded, starts the animation, else simulates the animation event cycle and starts immediately.",
            "itemtype": "method",
            "name": "requestStart",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 190,
            "description": "Fired by the configurator component when an 'Animation-Out' begins.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationOut.begin",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 196,
            "description": "Fired by the configurator component when an 'Animation-Out' is done.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationOut.end",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 202,
            "description": "Fired to ask the configurator to start an 'Animation-Out'.",
            "itemtype": "event",
            "name": "wnp.request.configurator.animationOut.start",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 208,
            "description": "Tries to stop the configurator,\nif the state is not suitable then does nothing.\n\nIf the animationOut component is loaded, starts the animation, else simulates the animation event cycle and stops immediately.",
            "itemtype": "method",
            "name": "requestStop",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 230,
            "description": "Fired by the configurator component when an animation is canceled.",
            "itemtype": "event",
            "name": "wnp.request.configurator.animation.cancel",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 236,
            "description": "Stops the configurator immediately,\nstops the currently playing animation immediately if needed.\nThe difference with requestStop is that if the configurator is in an animated state, it will cause the animation to stop immediately.",
            "itemtype": "method",
            "name": "cancel",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 316,
            "description": "Fired to start the configurator.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.start",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 322,
            "description": "Fired to stop the configurator.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.stop",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 328,
            "description": "Fired when the configurator needs to be hidden.",
            "itemtype": "event",
            "name": "wnp.request.configurator.cancel",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "line": 465,
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 1,
            "description": "/!\\ does not support multimaterial yet",
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 73,
            "description": "apply transparency on walls when they are between the target and the camera",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 78,
            "description": "apply transparency on all the object",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 83,
            "description": "apply transparency on all the object",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 50,
            "description": "Called when the floor is selected.\nTriggered on event `wnp.request.floorSelected`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSelectFloor",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 67,
            "description": "Called when the floor needs to be deleted.\nTriggered on event `wnp.request.floorDeleted`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSelectFloor",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 80,
            "description": "Called when the plan is ready.\nWill delete the whole structure mesh.\nTriggered on `wnp.request.newPlanReady`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onNewPlanReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 101,
            "description": "Deletes a floor from the scene.\nThis disposes of the mesh of this floor AND ALL FLOORS ABOVE.\nTODO : weird behaviour, will be changed.",
            "itemtype": "method",
            "name": "deleteFloor",
            "params": [
                {
                    "name": "floor",
                    "description": "The floor structure.",
                    "type": "FloorStructure"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 120,
            "description": "Gets the mesh associated with the floor structure.",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "element",
                    "description": "The structure of the floor. If omitted, use the currently selected floor.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "The mesh associated to the floor structure.",
                "type": "BABYLON.Mesh"
            },
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 138,
            "description": "Fired when a floor is ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.floorReady",
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 144,
            "description": "Fired when all floors are ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.allFloorsReady",
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 150,
            "description": "Builds the floors :\n  - retrieve the currently selected floor.\n  - delete the floors above the currently selected one.\n  - rebuild all the floors between the start floor (passed in params) and the currently selected one.",
            "itemtype": "method",
            "name": "createFloor",
            "params": [
                {
                    "name": "start",
                    "description": "The floor id to be built. If omitted, start from the first one (0).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 197,
            "description": "Builds a floor mesh (empty).",
            "itemtype": "method",
            "name": "createFloorMesh",
            "params": [
                {
                    "name": "element",
                    "description": "The structure of the floor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the mesh built.",
                "type": "BABYLON.Mesh"
            },
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 68,
            "description": "Updates the HTML element of the remote control.\nTriggered on event `wnp.structure.locale.loaded`",
            "itemtype": "method",
            "name": "updateHTML",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 79,
            "description": "Removes the HTML code for the component.",
            "itemtype": "method",
            "name": "removeHTML",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 91,
            "description": "Builds the HTML code for the component.",
            "itemtype": "method",
            "name": "buildHTML",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 179,
            "description": "Inserts a floor before another.\n> For instance, you can move the 4th floor to the 1st floor,\n> This will shift up every floor after the current 1st one, including the 1st.",
            "itemtype": "method",
            "name": "insertFloorBefore",
            "params": [
                {
                    "name": "floorIndex",
                    "description": "The index of the floor to move.",
                    "type": "Number"
                },
                {
                    "name": "beforeIndex",
                    "description": "The index of the floor to insert before.",
                    "type": "Number"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 203,
            "description": "Selects a chosen floor.\nTriggered on event `click`on the floor html element.",
            "itemtype": "method",
            "name": "onItemClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 216,
            "description": "Shows a context menu to change the floor parameters\nTriggered on event `click` on the \"i\" inside the floor html element.",
            "itemtype": "method",
            "name": "onItemContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 251,
            "description": "Fired when a floor needs to be selected.",
            "itemtype": "event",
            "name": "wnp.request.floorSelected",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 257,
            "description": "Triggered when a floor property is changed in a context menu.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "target",
                    "description": "The floor object.",
                    "type": "FloorStructure"
                },
                {
                    "name": "property",
                    "description": "The property to change.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value of the property.",
                    "type": "Number"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 288,
            "description": "Fired when a floor needs to be deleted.",
            "itemtype": "event",
            "name": "wnp.request.floorDeleted",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 294,
            "description": "Deletes a floor.\nTriggered on `click` on the \"x\" inside the floor html element.",
            "itemtype": "method",
            "name": "onItemDelete",
            "params": [
                {
                    "name": "event",
                    "description": "The associated event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 337,
            "description": "Opens a new window allowing to add a new floor and choose properties to clone from the floor below.\nTriggered on `click` on the \"+\" HTML element.",
            "itemtype": "method",
            "name": "onAddItemClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated with the event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 394,
            "description": "Fired when a floor needs to be added.",
            "itemtype": "event",
            "name": "wnp.request.floorAdded",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 400,
            "description": "Adds a new floor while duplicating the properties specified in the options.\nTriggered on `click` on the add button of the duplication window.",
            "itemtype": "method",
            "name": "onAddItemConfirm",
            "params": [
                {
                    "name": "event",
                    "description": "The objet associated with the event.",
                    "type": "Event"
                },
                {
                    "name": "options",
                    "description": "The different options set by the user.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 425,
            "description": "Duplicates the current floor with the duplication rules chosen by the user.\n\noptions[\"walls\"] = true => Keep the wall.\noptions[\"objects\"] = true => Keep the objects.\netc...",
            "itemtype": "method",
            "name": "duplicateForFloor",
            "params": [
                {
                    "name": "options",
                    "description": "The different options set by the user.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 503,
            "description": "Fired when a floor needs to be selected.",
            "itemtype": "event",
            "name": "wnp.request.floorSelected",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 509,
            "description": "Selects a floor to display.",
            "itemtype": "method",
            "name": "selectFloor",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the floor to select.",
                    "type": "Number"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 18,
            "description": "Floor label, chosen by the user.",
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 26,
            "description": "Array of PointStructure referenced in this floor.",
            "itemtype": "property",
            "name": "points",
            "type": "{PointStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 34,
            "description": "Array of WallStructure referenced in this floor.",
            "itemtype": "property",
            "name": "walls",
            "type": "{WallStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 42,
            "description": "Array of OvertureStructure referenced in this floor.",
            "itemtype": "property",
            "name": "overtures",
            "type": "{OvertureStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 50,
            "description": "Array of RoomStructure referenced in this floor. These rooms are internal, see Wiki for more info.",
            "itemtype": "property",
            "name": "internalRooms",
            "type": "{RoomStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 58,
            "description": "Array of RoomStructure referenced in this floor. These rooms are external, see Wiki for more info.",
            "itemtype": "property",
            "name": "externalRooms",
            "type": "{RoomStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 65,
            "description": "Extra wall panes, needed for the decoration of the house to be complete. Act as fillers.",
            "itemtype": "property",
            "name": "extraPanes",
            "type": "{WallPane3D[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 73,
            "description": "Array of ObjectStructure referenced in this floor.",
            "itemtype": "property",
            "name": "objects",
            "type": "{ObjectStrcture[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 81,
            "description": "Array of StairwayStructure referenced in this floor.",
            "itemtype": "property",
            "name": "stairways",
            "type": "{StairwayStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 89,
            "description": "Array of HopperStructure referenced in this floor.",
            "itemtype": "property",
            "name": "hoppers",
            "type": "{HopperStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 97,
            "description": "Array of SubSlopeStructure referenced in this floor.",
            "itemtype": "property",
            "name": "subslopes",
            "type": "{SubSlopeStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 105,
            "description": "Array of SubSlopeOvertureStructure referenced in this floor.",
            "itemtype": "property",
            "name": "subSlopeOverture",
            "type": "{SubSlopeOvertureStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 113,
            "description": "Floor elevation. Represents the \"y\" coordinate of the bottom of the floor.",
            "itemtype": "property",
            "name": "elevation",
            "default": "0",
            "type": "{Number}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 122,
            "description": "Floor height. Represents the height difference between the top (ceiling) and the bottom of the floor.",
            "itemtype": "property",
            "name": "height",
            "default": "250",
            "type": "{Number}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 131,
            "description": "This flag signals if the geometry of the floor has been dirtied by some component.\nComponents should read this with ```isDirty()``` and update their logic if the floor is dirty.",
            "itemtype": "property",
            "name": "dirtyGeometry",
            "type": "{Boolean}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 143,
            "description": "Signals that the floor geometry has been dirtied, and needs to be updated.",
            "itemtype": "method",
            "name": "dirty",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 152,
            "description": "Signals that the floor geometry has been tidied, and no longer needs to be updated.",
            "itemtype": "method",
            "name": "tidy",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 161,
            "description": "Checks if the floor geometry has been dirtied.",
            "itemtype": "method",
            "name": "isDirty",
            "return": {
                "description": "The geometry status.",
                "type": "Boolean"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 222,
            "description": "Update the floor's walls' parents after deserialization.",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "deserialized FloorStructure",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 259,
            "description": "Inserts an element into the structure.",
            "itemtype": "method",
            "name": "insertElement",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the object (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element to insert.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 285,
            "description": "Returns all elements in a category.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "category",
                    "description": "Category of an element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of elements of the category.",
                "type": "BaseStructure[]"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 300,
            "description": "Returns an indexed element in the given category.",
            "itemtype": "method",
            "name": "getElementByIdentifier",
            "params": [
                {
                    "name": "id",
                    "description": "Id of the element.",
                    "type": "Number"
                },
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "Primary key of the search (ex: \"id\", \"name\", ...).",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"id\""
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 321,
            "description": "Deletes an element from a category in the structure.",
            "itemtype": "method",
            "name": "removeElement",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element to delete.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 347,
            "description": "Replaces all the elements of a category.",
            "itemtype": "method",
            "name": "removeElements",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "elements",
                    "description": "Array of elements to insert.",
                    "type": "BaseStructure[]"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 359,
            "description": "Clones the current floor structure.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "the cloned object",
                "type": "FloorStructure"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 377,
            "description": "Reindexes a collection.",
            "itemtype": "method",
            "name": "reindexElements",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection.",
                    "type": "Object[]"
                },
                {
                    "name": "start",
                    "description": "The start index.",
                    "type": "Number"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 395,
            "description": "Removes all the walls of the floor",
            "itemtype": "method",
            "name": "removeAllWalls",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 408,
            "description": "Adds walls to the floor. The walls will be merged together if needed, and with the existing walls of the floor if needed.",
            "itemtype": "method",
            "name": "addWallsAsPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The 2D polygon, is an array of point objects which must have x and y attribute ( BABYLON.Vector2 for example ). The polygon does not need to repeat the first and last elements, it's already considered closed.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "options",
                    "description": "Set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "height",
                            "description": "The height of the walls",
                            "type": "Number"
                        },
                        {
                            "name": "tickness",
                            "description": "The thickness of the walls",
                            "type": "Number"
                        },
                        {
                            "name": "line",
                            "description": "true if the polygon is a line, will connect the last and first point if left to false",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The added walls.",
                "type": "WallStructure[]"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 444,
            "description": "Adds one wall to the floor. The wall will be merged with the existing walls of the floor if needed.",
            "itemtype": "method",
            "name": "addOneWall",
            "params": [
                {
                    "name": "a",
                    "description": "The first point, must have x and y attribute ( BABYLON.Vector2 for example ).",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "b",
                    "description": "The second point, must have x and y attribute ( BABYLON.Vector2 for example ).",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "options",
                    "description": "Set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "height",
                            "description": "The height of the wall",
                            "type": "Number"
                        },
                        {
                            "name": "tickness",
                            "description": "The thickness of the wall",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The added wall",
                "type": "WallStructure"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 497,
            "description": "Instanciates a WallStructure with the desired parameters",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "prepareWallStructure",
            "params": [
                {
                    "name": "a",
                    "description": "The first point, must have x and y attribute ( BABYLON.Vector2 for exemple ).",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "b",
                    "description": "The second point, must have x and y attribute ( BABYLON.Vector2 for exemple ).",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "options",
                    "description": "Set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "height",
                            "description": "The height of the walls",
                            "type": "Number"
                        },
                        {
                            "name": "tickness",
                            "description": "The thickness of the walls",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The wall structure",
                "type": "WallStructure"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 95,
            "description": "Disables all the possible actions when the mouse leaves the hopper.\nTriggered on event `HopperComponent2D.hopper.leave`",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure leaved.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 111,
            "description": "Enables all the possible actions when the mouse hovers the hopper.\nTriggered on event `HopperComponent2D.hopper.hover`",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure hovered.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 128,
            "description": "Highlights the hopper.\nTriggered on event `HopperComponent2D.hopper-hover.dynamic-draw`",
            "itemtype": "method",
            "name": "onHoverHopper",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D context of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation of the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw (null).",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 143,
            "description": "Adds a point on the hover contour when the user double clicks on it.\nTriggered on event `HopperComponent2D.hopper.dblclick`",
            "itemtype": "method",
            "name": "onDblClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure clicked.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 168,
            "description": "Moves the hopper when it is dragged.\nTriggered on event `hopperComponent2D.hopper.drag`",
            "itemtype": "method",
            "name": "onDrag",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure dragged.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 222,
            "description": "Computes all the hoppers structures.",
            "itemtype": "method",
            "name": "compute",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 234,
            "description": "Checks the hopper consistency and deletes it if the hopper is no longer valid.\n - merges vertices that are close enough.\n - removes the hopper if it has less than 3 vertices ( invalid hopper ).",
            "itemtype": "method",
            "name": "computeHopper",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper structure to compute.",
                    "type": "HopperStructure"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 259,
            "description": "Calls computeHopper when the user stop dragging.\nTriggered on event `hopperComponent2D.stair-hover.drag-end`",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure dragged.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 273,
            "description": "Adds new events callbacks when the dragging starts.\nTriggered on event `HopperComponent2D.hopper.drag-start`",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure dragged.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 289,
            "description": "Adds new events callbacks when the user is in Hopper mode.\nTriggered on event `wnp.engine2d.onAddHopper`",
            "itemtype": "method",
            "name": "onAddHopper",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 302,
            "description": "Fired to unselect the currently selected main menu item.",
            "itemtype": "event",
            "name": "wnp.menu.main.deselect",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 308,
            "description": "Adds a new hopper on click.\nTriggered on event `hopperComponent2D.add-hopper.click`",
            "itemtype": "method",
            "name": "onAddHopperClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure added.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 330,
            "description": "Moves the new hopper to add when the mouse moves.\nTriggered on event `hopperComponent2D.dynamic-stair.mouse-move`",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure moved.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 347,
            "description": "Opens the context menu of the hopper.\nTriggered on event `HopperComponent2D.hopper.click`",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used to draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 404,
            "description": "Called when a value is changed in the context menu of the hopper.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "target",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "property",
                    "description": "The property changed.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value.",
                    "type": "Number|String"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 435,
            "description": "Called when the user closes the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 462,
            "description": "Fired to add a menu item to the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 483,
            "description": "Draws the hopper guide. It displays visual information on the hopper, depending on the context.\nBasically, it draws a highlight when the mouse is hovering a hopper element ( the whole hopper, a side , a point ).",
            "itemtype": "method",
            "name": "drawTarget",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "ctx",
                    "description": "The 2d context.",
                    "type": "Context2D"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 503,
            "description": "Draws the hopper.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "ctx",
                    "description": "The 2d context.",
                    "type": "Context2D"
                },
                {
                    "name": "translation",
                    "description": "The translation of the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "True if the hopper is currently selected, else false.",
                    "type": "Boolean"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 556,
            "description": "Returns the roomStructure of the room containing the hopper.\nWill try to attach the hopper to a room if hopper.room is not defined.\n\nIf force flag is up, try to attach the hopper even if hopper.room is already set.",
            "itemtype": "method",
            "name": "getRoom",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "force",
                    "description": "If set to true, ignore the internal attribute and try to attach to a room.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The room where the hopper is.",
                "type": "RoomStructure"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 584,
            "description": "Tests the collision of a point with the hopper's edges.",
            "itemtype": "method",
            "name": "isPointInHopperSide",
            "params": [
                {
                    "name": "vector",
                    "description": "The point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                }
            ],
            "return": {
                "description": "False if the point does not collide with any of the hopper's edges. Else the index of the side that collides.",
                "type": "Number|boolean"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 606,
            "description": "Tests the collision of a point with the area defined by the hopper.",
            "itemtype": "method",
            "name": "isPointInHopper",
            "params": [
                {
                    "name": "vector",
                    "description": "The point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                }
            ],
            "return": {
                "description": "True if the point collides, else false.",
                "type": "Boolean"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 22,
            "description": "The 3D hopper component needs the RoomComponent3D to get information about the room.",
            "itemtype": "property",
            "name": "roomcmp3D",
            "default": "null",
            "type": "{RoomComponent3D}",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 31,
            "description": "Material on the hopper hole.",
            "itemtype": "property",
            "name": "_commonHopperMaterial",
            "default": "The room material",
            "access": "private",
            "tagname": "",
            "type": "{BABYLON.Material}",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 55,
            "description": "Carves the room when the floor is ready.\nTriggered on event `wnp.engine3D.floorReady`",
            "onfloorready": "",
            "params": [
                {
                    "name": "event",
                    "description": "Composed of {floor : The floor, structure: The current structure}.",
                    "type": "Event"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 72,
            "description": "Applies the texture to the pointed part of the object.\nFor the hopper, the decorable parts are the inner planes of the hole and the sticks ( rail guards ).\n\n/!\\ This function is meant to be used in the context of the BABYLON.Mesh and will be used in a strict flow.\nIt's not meant to be used outside this flow and is therefore tagged as private.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "decorate",
            "warning": "This function must be bound with a mesh.",
            "params": [
                {
                    "name": "material",
                    "description": "The material of the decoration.",
                    "type": "Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "The information about the picked mesh.",
                    "type": "BABYLON.CollisionInfo"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 100,
            "description": "Merges the components of a rail guard.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "mergeGeometries",
            "params": [
                {
                    "name": "object",
                    "description": "The objects to merge.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 142,
            "description": "Builds the mesh that represents the sticks ( rail guard ) of the hopper structure passed in argument.",
            "itemtype": "method",
            "name": "createHopperSticks",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "scene",
                    "description": "The scene ( mandatory to create a mesh ).",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "False.",
                "type": "Boolean"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 228,
            "description": "The default materials of the hoppers.",
            "itemtype": "method",
            "name": "getDefaultMaterials",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "scene",
                    "description": "The scene ( mandatory to create a material ).",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "The materials.",
                "type": "Material[]"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 253,
            "description": "Sets the materials of the hopper using the traverse function.",
            "itemtype": "method",
            "name": "initMaterials",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object3d",
                    "description": "The 3D mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materials",
                    "description": "The materials to add to the 3D mesh.",
                    "type": "Material[]"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 271,
            "description": "Builds the hopper.\nCarves the hopper into the room floor and adds the sticks ( rail guard ).",
            "itemtype": "method",
            "name": "Build",
            "static": 1,
            "params": [
                {
                    "name": "room3d",
                    "description": "The room mesh where the hopper will be built.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "height",
                    "description": "The height position from where the hopper will be created, basically it's either 0 to carve the floor or the room height to carve the ceiling.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "heightM",
                    "description": "The maximum height to carve above the hopper.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "100"
                }
            ],
            "return": {
                "description": "The room mesh with the hopper.",
                "type": "BABYLON.Mesh"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 324,
            "itemtype": "method",
            "name": "Debug",
            "access": "private",
            "tagname": "",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 398,
            "description": "Enables the shadows for all children of a mesh.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "applyShadow",
            "params": [
                {
                    "name": "object3D",
                    "description": "The 3D mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 34,
            "description": "The vertices of the hopper.\nBy default, the hopper is a 100cm large square.\nPoints can be moved, added ( a hopper can have more than 4 vertices ), and removed ( as long as there is still at least 3 vertices ).\n\nNote that when we refer to the side i, it is the edge ( points[ i ] , points[ i+1 ] ).",
            "itemtype": "property",
            "name": "points",
            "type": "BABYLON.Vector2[]",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 47,
            "description": "Set of labeled materials used for painting the hopper.\n\nThe decorable meshes are:\n - rail_stick\n - rails\n - bas",
            "itemtype": "property",
            "name": "materials",
            "type": "BABYLON.Material[]",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 62,
            "description": "Indicates which sides of the hopper should have a guardrail.\nIt is an object with a boolean for each side.\nexample : {\n   0 : false,   // Side 0 has no guardrail\n   1 : true,    // whereas side 1 has one\n   ...\n   };",
            "itemtype": "property",
            "name": "sticks",
            "default": "{ 0:false , 1:false , 2:false , 3:false } A hopper without guardrails.",
            "type": "{Boolean[]}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 78,
            "description": "If the hopper is associated with a stairway, the stairway id ( null otherwise ).",
            "itemtype": "property",
            "name": "stairwayId",
            "default": "null",
            "type": "{String}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 88,
            "description": "Indicates if the hopper has been modified or if it's the default hopper.",
            "itemtype": "property",
            "name": "modified",
            "default": "false",
            "type": "{Boolean}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 127,
            "description": "Checks the consistency of the hopper.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "False if the structure is corrupted, true otherwise.",
                "type": "Boolean"
            },
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 150,
            "description": "Removes the hopper.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure from which the hopper must be removed.",
                    "type": "FloorStructure"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 160,
            "description": "Inserts a point at a given index.",
            "itemtype": "method",
            "name": "inserPointAt",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "The",
                    "description": "index where the point must be inserted in the array of points.",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "inserted point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 172,
            "description": "Moves the hopper by the translation vector passed in params ( relative move ).",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "moveVector",
                    "description": "The translation vector by which the hopper will by moved.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "line": 805,
            "description": "Permet d importer l objet window sur le chien assis",
            "itemtype": "method",
            "name": "importWindow",
            "params": [
                {
                    "name": "object",
                    "description": "qui correspond au chien assis",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "width",
                    "description": "la largeur du chien assis",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "la hauteur du chien assis",
                    "type": "Float"
                },
                {
                    "name": "z",
                    "description": "les coordonnees en hauteur de la fenetre",
                    "type": "Float"
                }
            ],
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "line": 859,
            "description": "Genere l objet 3D",
            "itemtype": "method",
            "name": "getObject3D",
            "params": [
                {
                    "name": "scene",
                    "description": "la scene 3D",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "L'objet 3D",
                "type": "BABYLON.Mesh"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\AssimpImporter.js",
            "line": 32,
            "description": "Gets default parameters for this programmable.",
            "itemtype": "method",
            "name": "getDefaultParams",
            "return": {
                "description": "Returns default parameters.",
                "type": "Object"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\AssimpImporter.js",
            "line": 51,
            "description": "Localize and sort parameters.",
            "itemtype": "method",
            "name": "localizeAndSortParams",
            "return": {
                "description": "Returns sorted parameters.",
                "type": "Object"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\AssimpImporter.js",
            "line": 72,
            "description": "Builds and gets the object 3D.",
            "itemtype": "method",
            "name": "getObject3D",
            "params": [
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                },
                {
                    "name": "callback",
                    "description": "A function called when the model is ready to use.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The mesh.",
                "type": "BABYLON.Mesh"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 27,
            "description": "Materials are stored here.",
            "itemtype": "property",
            "name": "materials",
            "type": "[BABYLON.Material]",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 35,
            "description": "The associated object structure of the programmable.",
            "itemtype": "property",
            "name": "structure",
            "type": "ObjectStructure",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 45,
            "description": "The id of the object.",
            "itemtype": "property",
            "name": "id",
            "type": "Number",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 53,
            "description": "Must be set to `true` if you have to load something asynchronously\nwhen building the 3D object (like a 3D model file import).\n__/!\\ only works with BABYLON importer /!\\__",
            "itemtype": "property",
            "name": "async",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 68,
            "description": "Returns a hashmap which associates a default material for each mesh.  \nVirtual function",
            "itemtype": "method",
            "name": "getDefaultMaterials",
            "params": [
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "Hashmap of materials, one for each mesh.",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 82,
            "description": "Programmable decoration function.\nThis method applies the given material to the targeted part of the object.",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "material",
                    "description": "The material.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "Picking info about the target, see `BABYLON.PickingInfo` documentation.",
                    "type": "BABYLON.PickingInfo"
                }
            ],
            "return": {
                "description": "The previous material.",
                "type": "BABYLON.Material"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 107,
            "description": "Programmable animation function\nThis method is called when requesting an animation on the object.\nVirtual function",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "object3d",
                    "description": "The mesh that must be animated in this context.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 119,
            "description": "Import a mesh to the babylon format in a programmable. The file babylon must have the extension .babylon. \nImport a mesh in .babylon format.\nThis method is asynchronous.",
            "warning": "A file .babylon.manifest is required.",
            "itemtype": "method",
            "name": "importBabylon",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "filePath",
                    "description": "The path to the .babylon file.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function called when the file is loaded, this function will receive the mesh as parameter.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The mesh which will contains the mesh once the file is loaded.",
                "type": "Babylon.Mesh"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 155,
            "description": "Merge the parameters, private function.",
            "itemtype": "method",
            "name": "mergeParams",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "The params to merge with the current instance.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 168,
            "description": "Returns all the parameters needed to build the 3D object, along with their default value.  \nVirtual function.",
            "itemtype": "method",
            "name": "getDefaultParams",
            "return": {
                "description": "Hashmap, keys = parameters, values = default values.",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 178,
            "description": "Returns the type of the paramaters.\nThis is used for the form in the programmable editor. \nBy default, all params are strings.",
            "itemtype": "method",
            "name": "getParamType",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The type.",
                "type": "String"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 224,
            "access": "private",
            "tagname": "",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 230,
            "description": "options\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 275,
            "description": "options\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 338,
            "description": "Creation of a programmable, using a file.",
            "itemtype": "method",
            "name": "createInstance",
            "static": 1,
            "params": [
                {
                    "name": "filename",
                    "description": "The name of the file to load. E.g : `Folder.Object.js`.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "The parameters to apply, will mask the default.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "materials",
                    "description": "The materials of the object, will mask the default.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "structure",
                    "description": "The object structure instance, that will embed the programmable file on the scene.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "callback",
                    "description": "Called when the programmable instance has been built.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "customPath",
                    "description": "The path of the object.",
                    "type": "String"
                },
                {
                    "name": "engine",
                    "description": "The engine.",
                    "type": "BABYLON.Engine"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 387,
            "description": "Serializes the object (to JSON).",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized.",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 402,
            "description": "Deserializes the object (from JSON).",
            "itemtype": "method",
            "name": "deserialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 418,
            "description": "Deserializes the object (from JSON).",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 435,
            "description": "Returns the user-customizable properties for this programmable.  \nAs of version 2.3, these properties are shown in a form when clicking on the object in the scene.\nIf not overriden, all default parameters are available for user customization.\nIf you want to override this behavior, you can use the method `generateFormForObject` to quickly generate the HTML code.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "The menu, as an HTML form.",
                "type": "String"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 476,
            "description": "Generates a HTML form for the provided parameters.",
            "itemtype": "method",
            "name": "generateFormForObject",
            "params": [
                {
                    "name": "param",
                    "description": "The parameters to show in the menu.",
                    "type": "Object"
                },
                {
                    "name": "instance",
                    "description": "The instance of the programmmable.",
                    "type": "ObjectStructure"
                }
            ],
            "return": {
                "description": "HTML code.",
                "type": "String"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 553,
            "description": "Get the width parameter.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getWidthParam",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 566,
            "description": "Get the height parameter.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getHeightParam",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 580,
            "description": "Get the depth parameter.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getDepthParam",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 50,
            "description": "Fired to add a menu item into the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 56,
            "description": "Fired to remove a menu item from the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.remove",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 152,
            "description": "Called when the context changes",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "context",
                    "description": "The current context : 2D or 3D.",
                    "type": "String"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 179,
            "description": "Fired when the decoration brush is ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.brushReady",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 185,
            "description": "Fired when a paint texture is chosen in the decoration menu.",
            "itemtype": "event",
            "name": "wnp.engine3D.paint",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 191,
            "description": "Starts brush mode to paint an object with a color.\nTriggered on event `wnp.engine3D.paint`",
            "itemtype": "method",
            "name": "onPaintHandler",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 211,
            "description": "Fired to replace a menu item from the main menu with another.",
            "itemtype": "event",
            "name": "wnp.menu.main.replace",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 217,
            "description": "Updates the item of the menu with the last color",
            "itemtype": "method",
            "name": "updateLastItemMenu",
            "params": [
                {
                    "name": "item",
                    "description": "The last item.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 241,
            "description": "Fired when an object is refreshed and if the history is needed.",
            "itemtype": "event",
            "name": "wnp.request.historyAction",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 247,
            "description": "Fired to decorate an object with a material.",
            "itemtype": "event",
            "name": "wnp.engine3D.decorate",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 253,
            "description": "Triggered on event `wnp.engine3D.click.collided` to change the material of an object.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 294,
            "description": "Assigns a new material to an object.",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "object",
                    "description": "Instance of an 3D object mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "material",
                    "description": "Instance of material to use on the object.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "Information on the collision between the ray sent on click and the object.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 306,
            "description": "Applies a new Material on an object.",
            "itemtype": "method",
            "name": "applyMaterial",
            "params": [
                {
                    "name": "object",
                    "description": "Instance of an object3D BABYLON.Mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "material",
                    "description": "Instance of material to use on the object.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collided",
                    "description": "The collision information",
                    "type": "Boolean"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 320,
            "description": "Gets a material.",
            "itemtype": "method",
            "name": "getMaterial",
            "return": {
                "description": "Material Info",
                "type": "MaterialInfo"
            },
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 330,
            "description": "Fired when an item from main menu needs to be deselected.",
            "itemtype": "event",
            "name": "wnp.menu.main.deselect",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 336,
            "description": "Stops the paint mode by setting all parameters to null.",
            "itemtype": "method",
            "name": "stopPainMode",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 358,
            "description": "Adds a history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters used",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 373,
            "description": "Undoes painting by calling the undoFunction of the type action when the ctrl-z is pressed.",
            "itemtype": "method",
            "name": "undoPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 384,
            "description": "Redoes painting by calling the redoFunction of the type action when the ctrl-y is pressed.",
            "itemtype": "method",
            "name": "redoPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 395,
            "description": "Fired to request a save of the history.",
            "itemtype": "event",
            "name": "wnp.request.saveHistory",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 401,
            "description": "Function called at undo or redo",
            "itemtype": "method",
            "name": "historyPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo or redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                },
                {
                    "name": "modifiedMaterial",
                    "description": "The material modified.",
                    "type": "wnp.material"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 415,
            "description": "Creates the history for the paint action",
            "itemtype": "method",
            "name": "setupHistory",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 119,
            "description": "Fired to disable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.disable-orbit-camera",
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 125,
            "description": "Fired to enable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.enable-orbit-camera",
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 54,
            "description": "Group Manager",
            "itemtype": "property",
            "name": "groupMgr",
            "type": "{GroupManager}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 67,
            "description": "The rotator widget:\nAllows the user to turn an object with the green circle.",
            "itemtype": "property",
            "name": "rotatorWidget",
            "type": "{Widget.Rotator}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 76,
            "description": "The info widget:\nAllows the user to have all the properties of an object by clicking on the info sprite.",
            "itemtype": "property",
            "name": "infoWidget",
            "type": "{Widget.Info}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 86,
            "description": "The elevation widget:\nCreates a widget panel on the right side of the screen\nand allows to change the elevation of an object by dragging the cursor of the elevation bar.",
            "itemtype": "property",
            "name": "elevationWidget",
            "type": "{Widget.Info}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 96,
            "description": "The clone widget:\nAllows the user to duplicate an object by clicking on the copy icon.",
            "itemtype": "property",
            "name": "cloneWidget",
            "type": "{Widget.Clone}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 105,
            "description": "The lock widget:\nAllows the user to lock/unlock an object by clicking on the lock icon.",
            "itemtype": "property",
            "name": "lockWidget",
            "type": "{Widget.Lock}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 114,
            "description": "The group widget:\nAllows the user to group/ungroup objects if several objects/a group are selected.",
            "itemtype": "property",
            "name": "groupWidget",
            "type": "{Widget.Group}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 123,
            "description": "The remove widget:\nAllows the user to remove an object by clicking on the trash icon.",
            "itemtype": "property",
            "name": "removeWidget",
            "type": "{Widget.Remove}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 133,
            "description": "The table of all widgets.",
            "itemtype": "property",
            "name": "widget",
            "type": "{Widget[]}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 177,
            "description": "Adds a widget in the object edition component.",
            "itemtype": "method",
            "name": "addWidget",
            "params": [
                {
                    "name": "widget",
                    "description": "The widget to add.",
                    "type": "Widget"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 291,
            "description": "Fired when the configurator is needed for a group.",
            "itemtype": "event",
            "name": "wnp.request.groupConfigurator.start",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 297,
            "description": "Fired when the configurator is needed for an object.",
            "itemtype": "event",
            "name": "wnp.request.configurator.start",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 303,
            "description": "Sends a different action for the configurator depending on the object's nature (Group or not).",
            "itemtype": "method",
            "name": "onIAction",
            "access": "private",
            "tagname": "",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 324,
            "description": "Triggered on Controls event `mousedown`.",
            "itemtype": "method",
            "name": "onMouseDownDerived",
            "params": [
                {
                    "name": "event",
                    "description": "The Controls event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 332,
            "description": "Triggered on Controls event `mouseup`.",
            "itemtype": "method",
            "name": "onMouseUpDerived",
            "params": [
                {
                    "name": "event",
                    "description": "The Controls event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 340,
            "description": "Triggered on Controls event `mousemove`.",
            "itemtype": "method",
            "name": "onMouseMoveDerived",
            "params": [
                {
                    "name": "event",
                    "description": "The Controls event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 348,
            "description": "Triggered on Controls event `before-dragstart`.\nTests if the object is locked before starting to drag.",
            "itemtype": "method",
            "name": "onBeforeDragStart",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 362,
            "description": "Triggered on event `wnp.engine3D.click.collided`.\nBehavior : if ctrl is pressed, the object is added to the current group, if the right button is pressed,\nthe `special` event is sent to the widgets.",
            "itemtype": "method",
            "name": "onClickDerived",
            "params": [
                {
                    "name": "pickingInfo",
                    "description": "The picking information on what is under the mouse.",
                    "type": "BABYLON.PickingInfo"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 388,
            "description": "Triggered on event `wnp.engine3D.dblclick.collided`.\nBehavior : triggers the function `animate` on the underlying mesh.",
            "itemtype": "method",
            "name": "onDoubleClickDerived",
            "params": [
                {
                    "name": "pickingInfo",
                    "description": "The picking information on what is under the mouse.",
                    "type": "BABYLON.PickingInfo"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 404,
            "description": "Fired when the delete button is pushed while a mesh is selected.",
            "itemtype": "event",
            "name": "wnp.request.object.remove",
            "params": [
                {
                    "name": "object",
                    "description": "The currently selected object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "FloorStructure"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 412,
            "description": "Triggered on event `wnp.keyboardManager.keyDown`.\nBehavior : When the user uses ctrl-d (duplicates the object) and\nthe delete key (removes the object).",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 439,
            "description": "Triggered on event `wnp.request.object.remove`.\nRemoves an object.",
            "itemtype": "method",
            "name": "onRemoveObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 450,
            "description": "Triggered on event `wnp.request.newPlanReady`.\nCalled when the user clicks on the new plan button.",
            "itemtype": "method",
            "name": "onNewPlan",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 461,
            "description": "Triggered on event `wnp.engine3D.object.create`.\nCalled when a mesh is added to the scene.",
            "itemtype": "method",
            "name": "onCreateObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 490,
            "description": "Triggered on event `wnp.engine3D.object.refresh`.\nCalled when an object is refreshed",
            "itemtype": "method",
            "name": "onRefreshObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 502,
            "description": "Triggered on event `wnp.engine3D.object.dispose`.\nCalled when an object is removed from the scene.",
            "itemtype": "method",
            "name": "onDispose",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 515,
            "description": "Triggered on event `wnp.engine3D.allFloorsReady`.\nCalled when the floor id changes.",
            "itemtype": "method",
            "name": "onDispose",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 526,
            "description": "Disables the widgets for an object.",
            "itemtype": "method",
            "name": "disableWidget",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 535,
            "description": "Enables the widgets for an object.",
            "itemtype": "method",
            "name": "EnableWidget",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 558,
            "description": "Checks if a mesh is selectable.",
            "itemtype": "method",
            "name": "isSelectableObject",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a selectable mesh or not.",
                "type": "Boolean"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 569,
            "description": "Checks if an overture is selectable.",
            "itemtype": "method",
            "name": "isSelectableOverture",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a selectable mesh or not.",
                "type": "Boolean"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 580,
            "description": "Checks if a stairway is selectable.",
            "itemtype": "method",
            "name": "isSelectableStairway",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a selectable mesh or not.",
                "type": "Boolean"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 591,
            "description": "Gets the currently selected object.",
            "itemtype": "method",
            "name": "getSelectedObject",
            "return": {
                "description": "The currently selected object.",
                "type": "BABYLON.Mesh"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 601,
            "description": "Triggered on Controls event `select`.",
            "itemtype": "method",
            "name": "onSelectObject",
            "params": [
                {
                    "name": "object",
                    "description": "The selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 647,
            "description": "Triggered on Controls event `deselect`.",
            "itemtype": "method",
            "name": "onSelectObject",
            "params": [
                {
                    "name": "object",
                    "description": "The selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 659,
            "description": "Fired when the history is needed on an action.",
            "itemtype": "event",
            "name": "wnp.request.historyAction",
            "params": [
                {
                    "name": "component",
                    "description": "The component of the action (here it is EditionComponent3D).",
                    "type": "BaseComponent3D"
                },
                {
                    "name": "object",
                    "description": "The target object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "params",
                    "description": "Parameters of the history.",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The type of action done.",
                    "type": "String"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 669,
            "description": "Refreshes an object. Rebuilds the entire 3D object, given the programmable instance it is linked to.",
            "itemtype": "method",
            "name": "refreshObject",
            "params": [
                {
                    "name": "object3D",
                    "description": "the mesh to refresh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "The options : noHistory and modifiedProperties",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 702,
            "description": "Fired to request a save of the history.",
            "itemtype": "event",
            "name": "wnp.request.saveHistory",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 708,
            "description": "Fired to clone an object",
            "itemtype": "event",
            "name": "wnp.engine3D.object.clone",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 714,
            "description": "Triggered on event `wnp.request.object.clone`.\nCalled when the user clones an object or a group.",
            "itemtype": "method",
            "name": "onCloneObject",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 749,
            "itemtype": "event",
            "name": "wnp.editionComponent.removeObject",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 755,
            "description": "Removes an object or a group.",
            "itemtype": "method",
            "name": "onCloneObject",
            "params": [
                {
                    "name": "object3D",
                    "description": "The object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "doNotAddHistory",
                    "description": "Add or not to the history.",
                    "type": "Boolean"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 804,
            "description": "TODO",
            "itemtype": "method",
            "name": "onAddToProducts",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS Event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 878,
            "description": "Adds a history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 901,
            "description": "The undo function for the refresh action.",
            "itemtype": "method",
            "name": "undoRefresh",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 913,
            "description": "The redo function for the refresh action.",
            "itemtype": "method",
            "name": "redoRefresh",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 925,
            "description": "The function called when undoing/redoing a refresh.",
            "itemtype": "method",
            "name": "historyRefresh",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters",
                    "type": "Object"
                },
                {
                    "name": "valueField",
                    "description": "The new refresh value.",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 992,
            "description": "The undo function for the delete action.",
            "itemtype": "method",
            "name": "undoDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1004,
            "description": "The redo function for the delete action.",
            "itemtype": "method",
            "name": "redoDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1016,
            "description": "The undo function for the add action.",
            "itemtype": "method",
            "name": "undoAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1025,
            "description": "The redo function for the add action.",
            "itemtype": "method",
            "name": "redoAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1035,
            "description": "The function called when undoing/redoing a deletion.",
            "itemtype": "method",
            "name": "historyDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                },
                {
                    "name": "valueField",
                    "description": "The value.",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1067,
            "description": "Setupps the history for the edition actions.",
            "itemtype": "method",
            "name": "setupHistory",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1085,
            "description": "Returns true if an object or group is locked.\nA group is locked if one of its children is locked.",
            "itemtype": "method",
            "name": "isLocked",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "true if the object is locked",
                "type": "Boolean"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1152,
            "description": "Disables some behaviors. Registers a key so that the action can only be re-enabled with the same key.\nActions to lock must be passed in parameter as their corresponding flag.\nSupports multi-lock :\n\n  A lock the action ------------------------------------------------------------------- A unlock the action.\n  --------------------- B lock the same action ----------------- B unlock the action -----------------------.\n\n  <-------------------------------action is locked -------------------------------------------------------->.\n\n\n  --------time--------->.",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "key",
                    "description": "Can be anything, is registered as key for the lock, the action will be unlocked only with the same key",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "Actions to lock among : CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8; Default is all flags on.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1202,
            "description": "Re-enables locked behaviors.",
            "itemtype": "method",
            "name": "unlock",
            "params": [
                {
                    "name": "key",
                    "description": "Key that was used to lock actions",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "Actions to unlock among: CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8; Default is all flags on.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 29,
            "description": "Returns the current virtual group, formed when the user selects several objects without grouping them explicitly.",
            "itemtype": "method",
            "name": "getCurrentVirtualGroup",
            "return": {
                "description": "The current virtual group.",
                "type": "BABYLON.Mesh"
            },
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 39,
            "description": "Restores a group from the groupId set during serialization.\nIf the group does not exist, it is automatically created.\nNote : It is kind of a deserialization.",
            "itemtype": "method",
            "name": "restore",
            "params": [
                {
                    "name": "object",
                    "description": "A mesh to restore as a group",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "groupId",
                    "description": "The id of the group the object belonged to before serialization.",
                    "type": "Number"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 66,
            "description": "Checks if a mesh is a group.",
            "itemtype": "method",
            "name": "isGroup",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a group or not.",
                "type": "Boolean"
            },
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 77,
            "description": "Checks if a mesh is a virtual group.\nA virtual group is a group created only with the ctrl button.\nThe group property is not set permanently.",
            "itemtype": "method",
            "name": "isVirtualGroup",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a group or not.",
                "type": "Boolean"
            },
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 107,
            "description": "Creates a group mesh, ready for decoration and serialization.\nA group has a particular decoration behavior : all parts having the same name will be decorated together, regardless of what object they belong to.",
            "itemtype": "method",
            "name": "createGroup",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the group.",
                    "type": "Number"
                },
                {
                    "name": "parent",
                    "description": "The parent, in general the floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "The new mesh of the group (can be virtual or not).",
                "type": "BABYLON.Mesh"
            },
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 192,
            "description": "Adds an object to a group.",
            "itemtype": "method",
            "name": "addToGroup",
            "params": [
                {
                    "name": "object",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "group",
                    "description": "A group, an object or null.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "isHistoryAction",
                    "description": "Add or not to the history.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 225,
            "description": "Removes an object from a group.",
            "itemtype": "method",
            "name": "removeFromGroup",
            "params": [
                {
                    "name": "object",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "group",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 258,
            "description": "Deletes a group.",
            "itemtype": "method",
            "name": "deleteGroup",
            "params": [
                {
                    "name": "group",
                    "description": "A group.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "isHistoryAction",
                    "description": "Add or not to the history.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 304,
            "description": "Deletes the currently selected group.",
            "itemtype": "method",
            "name": "deleteSelectedGroup",
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 319,
            "description": "Sets the id of an object or group.",
            "itemtype": "method",
            "name": "setGroupId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "Group or Selectable object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "groupId",
                    "description": "The id.",
                    "type": "Number"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 339,
            "description": "Removes the group id from an object.",
            "itemtype": "method",
            "name": "removeGroupId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "Group or Selectable object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 358,
            "description": "Changes a virtual group into a real group.",
            "itemtype": "method",
            "name": "virtualToRealGroup",
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 375,
            "description": "Triggered on event `wnp.engine3D.contextMenu.group`.\nCalled when the user solidifies a group.",
            "itemtype": "method",
            "name": "onGroup",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 392,
            "description": "Fired to request a save of the history.",
            "itemtype": "event",
            "name": "wnp.request.saveHistory",
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 398,
            "description": "Called when the user clones a group.\nCareful this function is used in onCloneObject but does not react to an event.",
            "itemtype": "method",
            "name": "onCloneGroup",
            "params": [
                {
                    "name": "group",
                    "description": "The group cloned.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 445,
            "description": "The undo function for the group action history.",
            "itemtype": "method",
            "name": "undoGroup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 457,
            "description": "The redo function for the group action history.",
            "itemtype": "method",
            "name": "redoGroup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\GroupManager.js",
            "line": 475,
            "description": "The action done when the redo of undo function is called.",
            "itemtype": "method",
            "name": "historyGroup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters.",
                    "type": "Object"
                },
                {
                    "name": "valueField",
                    "description": "The value.",
                    "type": "Number"
                }
            ],
            "class": "GroupManager",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 38,
            "description": "Fired to add a menu item to the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 64,
            "description": "When a floor is ready, creates the objects it contains.\nTriggered on event `wnp.engine3D.floorReady`.",
            "itemtype": "method",
            "name": "onFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 104,
            "description": "Adds a group of 3D objects to the current floor.\nTriggered on event `wnp.engine3D.addGroup`.",
            "itemtype": "method",
            "name": "onAddGroup",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 140,
            "description": "Creates a new 3D object on the current floor (by default at the avatar position).\nTriggered on event `wnp.engine3D.addObject` or `wnp.engine3D.addProgrammable`.",
            "itemtype": "method",
            "name": "onAddObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 198,
            "description": "Removes a 3D object from the scene.\nTriggered on event `wnp.engine3D.object.remove`.",
            "itemtype": "method",
            "name": "onRemoveObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 215,
            "description": "Fired when an object is rebuilt.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.refresh",
            "params": [
                {
                    "name": "object",
                    "description": "The refreshed mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 222,
            "description": "Rebuilds the object, assuming the structure object has changed (not necessarily the case).\nThe object reference will be kept.\nThis function is asynchronous.",
            "itemtype": "method",
            "name": "refreshObject",
            "params": [
                {
                    "name": "meshObject",
                    "description": "The mesh object, as defined in wanaplan. It should declare a reference to the `objectStructure` ( meshObject.structure ).",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "callback",
                    "description": "The function called once the object is built. Takes the new mesh as its only parameter.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 310,
            "description": "Builds a new object, given the object structure and the object params.\nAs this may require to load scripts, the function is asynchronous.\nAppends the object to the floor when it is ready.",
            "itemtype": "method",
            "name": "buildObject",
            "params": [
                {
                    "name": "objectStructure",
                    "description": "The object structure to be instanciated.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "params",
                    "description": "Params of the object to be instanciated such as defined in the relevant programmable.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "materials",
                            "description": "Contains labeled materials. If the materials are already defined in `objectStructure.programmableInstance`, this will have no effect.",
                            "type": "BABYLON.Material[]",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "floorStructure",
                    "description": "The floor where the object will be appended, default is the current floor.",
                    "type": "FloorStructure",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function called after the object is built.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "silent",
                    "description": "If true, no event will be thrown at the object creation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 364,
            "description": "Fired when an object is created.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.create",
            "params": [
                {
                    "name": "object",
                    "description": "The created mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "objectStructure",
                    "description": "The involved object structure.",
                    "type": "ObjectStructure"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 372,
            "description": "Prepares the 3D object to be added to the scene, according to its ObjectStructure",
            "itemtype": "method",
            "name": "addObjectToScene",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object3d",
                    "description": "The mesh of the object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structureObject",
                    "description": "The object structure to be added.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "floorStructure",
                    "description": "The floor where the object will be appended.",
                    "type": "FloorStructure"
                },
                {
                    "name": "callback",
                    "description": "The function called after the object is built.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "silent",
                    "description": "If true, no event will be thrown at the object creation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 398,
            "description": "Fired when a mesh is disposed of.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.dispose",
            "params": [
                {
                    "name": "object",
                    "description": "The concerned mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 405,
            "description": "Adds several mandatory properties to the object3D.",
            "methode": "prepareObject3D",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object3d",
                    "description": "The mesh of the object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structureObject",
                    "description": "The object structure to be added.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "floorStructure",
                    "description": "The floor where the object will be appended.",
                    "type": "FloorStructure"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 445,
            "description": "cas d'un rechargement à chaud depuis clic sur etage ou passage 2D 3D\n=> on repositionne les objets groupés dans leur reperes de floor pour eviter que ca pete",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 488,
            "description": "Gets a value from the parameter. If parameter is undefined then returns the default value.",
            "itemtype": "method",
            "name": "getValue",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "targetValue",
                    "description": "parameter to get the value from",
                    "type": "Object"
                },
                {
                    "name": "defaultValue",
                    "description": "default value to use if value of targetValue is undefined.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "value of targetValue if not undefined, else defaultValue.",
                "type": "Object"
            },
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 502,
            "description": "Gets a type Vector3 object from a litteral JavaScript object with 3 components x, y, z.",
            "itemtype": "method",
            "name": "getVector3",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "pVector",
                    "description": "A litteral object with 3 components x, y, z.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of BABYLON.Vector3 with the chosen x, y, z.\n                             If pVector is already a BABYLON.Vector3, it is returned without any change.",
                "type": "BABYLON.Vector3"
            },
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 516,
            "description": "Applies shadows to the object and all of its children",
            "itemtype": "method",
            "name": "applyShadow",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object3d"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 47,
            "description": "The path to the programmable file, such as /js/Programmables/ .\nThis supports http requests such as : http://github.com/wanadev/Programmables/",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "String",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 57,
            "description": "The name of the programmable file, such as MyProgrammable.js",
            "itemtype": "property",
            "name": "filename",
            "type": "String",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 66,
            "description": "Defines an optimal angle for the object.\nThe object is well positioned when the angle between its x axis and a wall is equals to this value.\nThis value is used by the magnetism algorithm to make the objects face the right direction.\nAngle must be k * Pi/2, else it will probably give unwanted result.",
            "itemtype": "property",
            "name": "preferredYAngle",
            "type": "Number",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 78,
            "description": "A reference to the mesh.",
            "itemtype": "property",
            "name": "objectInstance",
            "type": "BABYLON.Mesh",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 87,
            "description": "A reference to the programmable.",
            "itemtype": "property",
            "name": "programmableInstance",
            "type": "Programmable",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 96,
            "description": "A reference to the mesh position.\n\n/!\\ This is a reference to `this.objectInstance.position` and not a copy, \nbreaking the reference will result in hard failure in serialization.",
            "itemtype": "property",
            "name": "position",
            "type": "BABYLON.Vector3",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 108,
            "description": "A reference to the mesh rotation.\n\n/!\\ This is a reference to `this.objectInstance.rotation` and not a copy, \nbreaking the reference will result in hard failure in serialization.",
            "itemtype": "property",
            "name": "rotation",
            "type": "BABYLON.Vector3",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 120,
            "description": "A reference to the mesh scaling\n\n/!\\ This is a reference to `this.objectInstance.scaling` and not a copy, \nbreaking the reference will result in hard failure in serialization.",
            "itemtype": "property",
            "name": "scaling",
            "type": "BABYLON.Vector3",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 186,
            "description": "Checks if the object structure contains errors, and if so removes it",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "structure",
                    "description": "The floorStructure to which the object belongs",
                    "type": "FloorStructure"
                }
            ],
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 201,
            "description": "Clones the object, making a deep copy.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A new instance of the object, with the same attributes.",
                "type": "ObjectStructure"
            },
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 213,
            "description": "Get the available properties of the programmable instance.\n> NB : This is a shortcut to `Programmable.getAvailableProperties`.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "An object containing the programmable properties.",
                "type": "Object"
            },
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 228,
            "description": "Animates an animatable object.\nSince objects can have multiple animations for their multiple meshes, pass the targeted mesh in parameter.\n> NB : This is a shortcut to `Programmable.animate`.",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh of the object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "target",
                    "description": "The specific mesh which should be animated.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 243,
            "description": "Sets the material of a named mesh.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "name",
                    "description": "The mesh name, this mesh must be `objectStructure.objectInstance` or one of its children.",
                    "type": "String"
                }
            ],
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 253,
            "description": "Gets the material of a given mesh or child mesh.",
            "itemtype": "method",
            "name": "getMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "The mesh name, this mesh must be `objectStructure.objectInstance` or one of its children.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The material.",
                "type": "BABYLON.Material"
            },
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 37,
            "description": "Fired when the TransformComponent begins to transform the position/rotation of an object.  \nThis will be followed by a `wnp.engine3D.object.end-transform` event.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.start-transform",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 45,
            "description": "Notifies that the object is getting transformed a lot with small deltas.\nThe transformation applied after will be summarized and notified when calling endTransformObject.",
            "itemtype": "method",
            "name": "beginTransformObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object, can be a group.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If set to true, no event `wnp.engine3D.object.start-transform` will be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 73,
            "description": "Fired when the TransformComponent ends to transform the position/rotation of an object.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.end-transform",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 79,
            "description": "Notifies that the object will not longer be transformed.  \nThe transformation which occured since the last beginTransformObject will be merged, notified and historized.",
            "itemtype": "method",
            "name": "endTransformObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object, can be a group.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If set to true, no event `wnp.engine3D.object.end-transform` will be fired.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 128,
            "description": "Fired when the TransformComponent just translated an object on the scene.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.translate",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "True if the TransformComponent is currently waiting for the end of the transformation to notify and set up the history.",
                    "type": "Boolean"
                },
                {
                    "name": "newValue",
                    "description": "The new position of the object.",
                    "type": "BABLYON.Vector3"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 136,
            "description": "Moves the object on the scene.",
            "itemtype": "method",
            "name": "moveObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object, can be a group.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newPosition",
                    "description": "The new position.",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "history",
                            "description": "If set to true, the transformation will be saved into the history.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "silent",
                            "description": "If set to true, no event `wnp.engine3D.object.translate` will be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "old",
                            "description": "The former position for the transform. By default, it is the current position.",
                            "type": "BABYLON.Vector3",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 182,
            "description": "Fired when the TransformComponent just rotated an object on the scene.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.rotated",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "True if the TransformComponent is currently waiting for the end of the transformation to notify and set up the history.",
                    "type": "Boolean"
                },
                {
                    "name": "newValue",
                    "description": "The new rotation of the object.",
                    "type": "BABLYON.Vector3"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 190,
            "description": "Rotates the object on the scene.",
            "itemtype": "method",
            "name": "rotateObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object, can be a group.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newRotation",
                    "description": "The new rotation",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "history",
                            "description": "If set to true, the transformation will be saved into the history.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "silent",
                            "description": "If set to true, no event `wnp.engine3D.object.rotated` will be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "old",
                            "description": "The former rotation for the transform. By default, it is the current rotation.",
                            "type": "BABYLON.Vector3",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 63,
            "description": "Fired to add a menu item into the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 69,
            "description": "Fired when the action to add an overture is started.",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddOverture",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 75,
            "description": "Fired when the action to add an overture is done.",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddOvertureEnd",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 81,
            "description": "Initializes the overture menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 156,
            "description": "Tests if the cursor is on one of the overtures element, and if so returns it.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector representing the coordinates of the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The target or null if nothing is under the cursor.",
                "type": "Object"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 200,
            "description": "Draws an overture.",
            "itemtype": "method",
            "name": "_drawOverture",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 320,
            "description": "Checks that overtures are well parented with their parent wall.",
            "itemtype": "method",
            "name": "compute",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 340,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 358,
            "description": "Handles the movement and reshaping of the overture.\nTriggered on event `OvertureComponent2D.drag-start`",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "OvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 391,
            "description": "When an overture is moved by dragging the cursor.",
            "itemtype": "method",
            "name": "onDraggingMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 417,
            "description": "When an overture is resized by dragging the cursor.",
            "itemtype": "method",
            "name": "onDraggingResize",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 440,
            "description": "When the dragging ends.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 461,
            "description": "When an overture is hovered by the mouse.\nTriggered on event `OvertureComponent2D.hover`",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 477,
            "description": "When an overture is leaved by the mouse.\nTriggered on event `OvertureComponent2D.leave`",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 492,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onSelectionDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 521,
            "description": "Adds an overture.\nTriggered on event `wnp.engine2d.onAddOverture`",
            "itemtype": "method",
            "name": "onAddOverture",
            "params": [
                {
                    "name": "event",
                    "description": "The event received with the basic overture parameters.",
                    "type": "Event"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 558,
            "description": "Called when dragging an added overture.",
            "itemtype": "method",
            "name": "onAddOvertureDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 576,
            "description": "Called when updating an added overture.",
            "itemtype": "method",
            "name": "onAddOvertureUpdate",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 596,
            "description": "Fired when an item from main menu needs to be deselected.",
            "itemtype": "event",
            "name": "wnp.menu.main.deselect",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 602,
            "description": "Called when the action to add an overture is done.\nTriggered on `wnp.engine2d.onAddOvertureEnd`",
            "itemtype": "method",
            "name": "onAddOvertureEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 633,
            "description": "Unregisters the pointer events when the action to add an overture is done and the cursor leaves the zone.",
            "itemtype": "method",
            "name": "onAddOvertureLeaveZone",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 664,
            "description": "Handles all the items of the context menu.\nTriggered on event `OvertureComponent2D.context-menu`",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure hovered by the mouse.",
                    "type": "OvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for drawing (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 813,
            "description": "Called when the value of a context menu property is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "property",
                    "description": "The property that changed.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value.",
                    "type": "Number|String"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 850,
            "description": "Called when the user removes the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The overture structure concerned.",
                    "type": "OvertureStructure"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 861,
            "description": "Duplicates an overture on double click.\nTriggered on event `OvertureComponent2D.double-click`",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event caught.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture selected.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The current state of the pointer.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 43,
            "description": "Fired once the wall overtures are created.",
            "itemtype": "event",
            "name": "wnp.engine3D.overturesReady",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current floor structure.",
                    "type": "FloorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the walls.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 52,
            "description": "Carves the walls and creates the 3D meshes of the overtures.\nTriggered on event `wnp.engine3D.wallsReady`",
            "itemtype": "method",
            "name": "onWallsReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event received, it contains the walls mesh, the floor mesh and the structure of the floor.",
                    "type": "Event"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 84,
            "description": "Fired once the subslope overtures are created.",
            "itemtype": "event",
            "name": "wnp.engine3D.subslopeOverturesReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the wall.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 94,
            "description": "Carves the subslopes and creates the 3D meshes of the subslope overtures.\nTriggered on event `wnp.engine3D.subslopesReady`",
            "itemtype": "method",
            "name": "onSubslopesReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event received, it contains the walls mesh, the floor mesh and the structure of the floor.",
                    "type": "Event"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 127,
            "description": "Creates a 3D overture mesh.",
            "itemtype": "method",
            "name": "createOverture",
            "params": [
                {
                    "name": "overture",
                    "description": "The structure of the overture.",
                    "type": "OvertureStructure"
                },
                {
                    "name": "structure",
                    "description": "The structure of the current floor.",
                    "type": "FloorStructure"
                },
                {
                    "name": "floor",
                    "description": "The 3D mesh of the floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 388,
            "description": "Creates a CSG box to carve the walls.",
            "itemtype": "method",
            "name": "overtureBox",
            "params": [
                {
                    "name": "ov",
                    "description": "The structure of the overture.",
                    "type": "OvertureStructure"
                },
                {
                    "name": "The",
                    "description": "structure of the current floor.",
                    "type": "FloorStructure"
                },
                {
                    "name": "floor",
                    "description": "The 3D mesh of the floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "The cube that will be used to carve walls, in CSG format.",
                "type": "BABYLON.CSG"
            },
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 432,
            "description": "Carves an overture in the walls.",
            "itemtype": "method",
            "name": "carveWithOvertureMeshes",
            "params": [
                {
                    "name": "ov",
                    "description": "The CSG mesh of the cube to carve with.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "wallCSG",
                    "description": "The wall in CSG mesh.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "wall3D",
                    "description": "3D mesh of the walls.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "floor",
                    "description": "The 3D mesh of the floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "New wall create after dig the wall.",
                "type": "BABYLON.Mesh"
            },
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 461,
            "description": "Carves a subslope overture in the subslopes.",
            "itemtype": "method",
            "name": "carveSubslopeOverture",
            "params": [
                {
                    "name": "subslope",
                    "description": "The subslope attached to the overture.",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "ov",
                    "description": "The structure of the subslope overture.",
                    "type": "SubSlopeOvertureStructure"
                },
                {
                    "name": "structure",
                    "description": "The structure of the current floor.",
                    "type": "FloorStructure"
                },
                {
                    "name": "floor",
                    "description": "The 3D mesh of the floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "New mesh of the walls after carving.",
                "type": "BABYLON.Mesh"
            },
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 18,
            "description": "Type of the overture.\nAvailables values are \"Door\" , \"Window\" , \"Garage\" , \"Velux\" , \"Dormer\"",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 26,
            "description": "Position of the overture.",
            "itemtype": "property",
            "name": "position",
            "type": "BABYLON.Vector2",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 33,
            "description": "Width of the overture.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 40,
            "description": "Height of the structure.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 47,
            "description": "Thickness of the overture.",
            "itemtype": "property",
            "name": "thickness",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 54,
            "description": "Elevation of the overture.",
            "itemtype": "property",
            "name": "elevation",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 61,
            "description": "Defines the side of the overture where the hinges should be displayed (0 = right, 1 = left).",
            "itemtype": "property",
            "name": "hinge",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 68,
            "description": "Defines the side of the room where the hinges should be displayed ( inside / outside of the room ).\nAvailables values are -1 or 1",
            "itemtype": "property",
            "name": "side",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 76,
            "description": "The number of casements.\nAvailables values are 0 , 1 , 2 , 3",
            "itemtype": "property",
            "name": "nbCasement",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 84,
            "description": "The parent wall.",
            "itemtype": "property",
            "name": "parentWall",
            "type": "WallStructure",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 91,
            "description": "The minimum size of the overture.",
            "itemtype": "property",
            "name": "minsize",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 98,
            "description": "If the overture is sliding or not.",
            "itemtype": "property",
            "name": "sliding",
            "type": "Boolean",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 117,
            "description": "The thickness of the structure.",
            "itemtype": "property",
            "name": "batiThickness",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 124,
            "description": "The instance of the programmable.",
            "itemtype": "property",
            "name": "programmableInstance",
            "type": "BABYLON.Mesh",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 131,
            "description": "Describes if a base board should be displayed or not.\nOnly for the windows.",
            "itemtype": "property",
            "name": "plinte",
            "type": "Boolean",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 159,
            "description": "Checks the coherence of all the parameters.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "structure",
                    "description": "The overture structure.",
                    "type": "OvertureStructure"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 181,
            "description": "Gets the parent wall of the overture.",
            "itemtype": "method",
            "name": "getParentWall",
            "return": {
                "description": "The parent of the overture.",
                "type": "WallStructure"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 192,
            "description": "Sets the parent wall of the overture.",
            "itemtype": "method",
            "name": "setParentWall",
            "params": [
                {
                    "name": "wall",
                    "description": "The new parent of the overture.",
                    "type": "WallStructure"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 222,
            "description": "Computes the new position of the overture when its parent wall is merged with another one.",
            "itemtype": "method",
            "name": "computePositionOnWallChange",
            "params": [
                {
                    "name": "newWall",
                    "description": "The new wall of the overture.",
                    "type": "WallStructure"
                }
            ],
            "return": {
                "description": "The new position.",
                "type": "BABYLON.Vector2"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 243,
            "description": "Projects the position of the overture on its parent wall.",
            "itemtype": "method",
            "name": "projectOnWall",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 266,
            "description": "Returns a pair of elements: the position of the center of the overture and the unit vector of the parent wall.",
            "itemtype": "method",
            "name": "getAbsolutePos",
            "return": {
                "description": "position: BABYLON.Vector3, vector: BABYLON.Vector3 The position and the unit vector.",
                "type": "Object"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 279,
            "description": "Returns the angle of the overture with the x-axis.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "The angle.",
                "type": "Number"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 290,
            "description": "Returns the polygon describing the overture.",
            "itemtype": "method",
            "name": "getPolygon",
            "return": {
                "description": "The array of the points of the polygon.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 309,
            "description": "Resizes the overture in function of the parent wall.",
            "itemtype": "method",
            "name": "clampSize",
            "params": [
                {
                    "name": "allowDelete",
                    "description": "Specifies if we allow the deletion if the size of the wall is to small.",
                    "type": "Boolean"
                },
                {
                    "name": "structure",
                    "description": "The current floor structure. Must be specified if allowDelete == true.",
                    "type": "FloorStructure"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 331,
            "description": "Returns the user-customizable properties of this overture.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "Properties.",
                "type": "Array"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 346,
            "description": "Deletes the overture.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor from which the engine has to remove the overture.",
                    "type": "FloorStructure"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 402,
            "description": "options\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 447,
            "description": "options\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 510,
            "description": "Adds/replaces the material with the given name to the list of materials.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "Material"
                },
                {
                    "name": "name",
                    "description": "The name of the new material.",
                    "type": "String"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 520,
            "description": "Gets a material from the list.",
            "itemtype": "method",
            "name": "getMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the material to fetch.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The material.",
                "type": "Material"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 20,
            "description": "Size of the points when drawn on the 2D canvas.",
            "itemtype": "property",
            "name": "_SIZE",
            "type": "{Number}",
            "default": "13",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 29,
            "description": "Radius of the angle when drawn on the 2D canvas.",
            "itemtype": "property",
            "name": "_ANGLERADIUS",
            "type": "{Number}",
            "default": "55",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 38,
            "description": "Which points need their angle to be displayed.",
            "itemtype": "property",
            "name": "anglePointList",
            "type": "{PointStructure[]}",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 46,
            "description": "Flag that indicates if a point is currently dragged.",
            "itemtype": "property",
            "name": "dragging",
            "access": "private",
            "tagname": "",
            "type": "{Boolean}",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 55,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "90",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 104,
            "description": "Processes all points which have the ```needsUpdate``` flag set to true.\nThis method tries to merge points or attach them to surrounding walls.",
            "itemtype": "method",
            "name": "tryMergeAttachAll",
            "params": [
                {
                    "name": "force",
                    "description": "Forces the update of all points.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 134,
            "description": "Draws the angle between the two parent walls of a point.",
            "itemtype": "method",
            "name": "drawAngle",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 196,
            "description": "Called when the mouse starts dragging a point.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 224,
            "description": "Called when the mouse is dragging the point.",
            "itemtype": "method",
            "name": "onDragging",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 245,
            "description": "Called when the mouse releases the point.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 298,
            "description": "Called when the mouse hovers over a point.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 317,
            "description": "Called when the mouse leaves the point.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 336,
            "description": "Called when the mouse double clicks on a point.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 18,
            "description": "2D position of the point.",
            "itemtype": "property",
            "name": "position",
            "type": "{BABYLON.Vector2}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 26,
            "description": "Wall to which the point is attached. Can be null.",
            "itemtype": "property",
            "name": "attachedTo",
            "type": "{WallStructure}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 34,
            "description": "Flag that indicates if the points needs to be updated\n(attached or merged).",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 43,
            "description": "The parent walls of the point. The length can be 1 or 2.",
            "itemtype": "property",
            "name": "parents",
            "type": "{WallStructure[]}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 51,
            "description": "Internal, for deserialization.",
            "itemtype": "property",
            "name": "_parentIds",
            "access": "private",
            "tagname": "",
            "type": "{Number[]}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 129,
            "description": "Moves the point by a given offset vector.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "vector",
                    "description": "Offset vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 139,
            "description": "Removes the point from the floor structure.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure referencing this point.",
                    "type": "FloorStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 154,
            "description": "Replaces a parent wall with another parent wall.\n\nNB: The order of the parents list can change.",
            "itemtype": "method",
            "name": "replaceParent",
            "params": [
                {
                    "name": "oldWall",
                    "description": "The old parent.",
                    "type": "WallStructure"
                },
                {
                    "name": "newWall",
                    "description": "The new parent, can be undefined if you just want to delete a parent.",
                    "type": "WallStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 169,
            "description": "Tries to merge the point with the other surrounding points, if possible.",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure containing this point.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The merged point. Returns this point if nothing has been merged.",
                "type": "PointStructure"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 220,
            "description": "Forces merging with another point.",
            "itemtype": "method",
            "name": "forceMerge",
            "params": [
                {
                    "name": "point",
                    "description": "Other point to merge with. It will be deleted from the floor structure.",
                    "type": "PointStructure"
                },
                {
                    "name": "fs",
                    "description": "The floor structure containing this point.",
                    "type": "FloorStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 250,
            "description": "Tries to attach the point to the surrounding walls, if possible.",
            "itemtype": "method",
            "name": "tryAttach",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure containing this point.",
                    "type": "FloorStructure"
                },
                {
                    "name": "blacklist",
                    "description": "Wall to ignore while searching for candidates.",
                    "type": "WallStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "False if nothing has been attached, true otherwise.",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 332,
            "description": "Returns the current attached status.",
            "itemtype": "method",
            "name": "isAttached",
            "return": {
                "description": "True if the point is attached.",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 342,
            "description": "Returns the wall to which the point is attached.",
            "itemtype": "method",
            "name": "wallAttached",
            "return": {
                "description": "A wall, or undefined/null if the point is not attached.",
                "type": "WallStructure"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 352,
            "description": "Unattaches a point from a wall.",
            "itemtype": "method",
            "name": "unAttach",
            "return": {
                "description": "False if the point wasn't previously attached, true otherwise.",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 20,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "9",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 30,
            "description": "Temporary storage of the 2D computed rooms.",
            "itemtype": "property",
            "name": "rooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 39,
            "description": "Temporary storage of the 2D internal rooms.",
            "itemtype": "property",
            "name": "internalRooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 48,
            "description": "Temporary storage of the 2D external rooms.",
            "itemtype": "property",
            "name": "externalRooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 57,
            "description": "Flag signaling if we can use the previously computed rooms stored in the cache.\nFor speed up purposes.",
            "itemtype": "property",
            "name": "useCache",
            "access": "private",
            "tagname": "",
            "type": "{Boolean}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 67,
            "description": "Flag to display/hide room names.",
            "itemtype": "property",
            "name": "displayRoomName",
            "type": "{Boolean}",
            "default": "true",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 103,
            "description": "Returns a subslope list based on the rooms.\nWarning : the subslopes returned are not usable as is, they must be processed by \"getSubSlope\" from subSlopeComponent2D !",
            "itemtype": "method",
            "name": "getAllSubSlopes",
            "params": [
                {
                    "name": "structure",
                    "description": "The related floor. If not specified, the current active floor will be used.",
                    "type": "FloorStructure"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 165,
            "description": "Returns the current computed internal rooms.",
            "itemtype": "method",
            "name": "getInternalRooms",
            "return": {
                "description": "The current internal rooms.",
                "type": "RoomStructure[]"
            },
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 176,
            "description": "Returns the current computed external rooms.",
            "itemtype": "method",
            "name": "getInternalRooms",
            "return": {
                "description": "The current external rooms.",
                "type": "RoomStructure[]"
            },
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 188,
            "description": "Matches two sets of RoomStructure to pair those which look alike the most.\nThis uses a custom (yet perfectible) matching algorithm based on overlapping areas.",
            "itemtype": "method",
            "name": "identifyRooms",
            "params": [
                {
                    "name": "rooms0",
                    "description": "Set 0.",
                    "type": "RoomStructure[]"
                },
                {
                    "name": "rooms1",
                    "description": "Set 1.",
                    "type": "RoomStructure[]"
                }
            ],
            "return": {
                "description": "An array T such as T[i] = roomj implies :\nThe room i in the smaller set is the most alike to the roomj in the bigger set.\nLength of T is : ```min(rooms0.length, rooms1.length)```\nExample case :\nrooms0.length is smaller than rooms1.length : if T[i] = roomj, then the image of rooms0[i] is roomj, and roomj is taken from rooms1.",
                "type": "RoomStructure[]"
            },
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 238,
            "description": "Copies the properties of another room collection to the current room collection.",
            "itemtype": "method",
            "name": "dispatchRooms",
            "params": [
                {
                    "name": "collection",
                    "description": "Can be either \"internalRooms\", or \"externalRooms\".",
                    "type": "String"
                },
                {
                    "name": "structure",
                    "description": "The related floor.",
                    "type": "FloorStructure"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 265,
            "description": "Computes the rooms from the 2D geometry of the house.\nBased on the ```polygonMerger``` method.",
            "itemtype": "method",
            "name": "computeRooms",
            "params": [
                {
                    "name": "structure",
                    "description": "The related floor. If not specified, the current active floor will be used.",
                    "type": "FloorStructure",
                    "optional": true,
                    "optdefault": "CurrentStructure"
                },
                {
                    "name": "cycles",
                    "description": "Optional parameter to specify pre-computed cycles (usually from the cache), in order to speed up the process.",
                    "type": "Cycles",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 446,
            "description": "Draws all rooms for the current active floor.",
            "itemtype": "method",
            "name": "drawRooms",
            "params": [
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "Number"
                }
            ],
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 463,
            "description": "Determines if a point is inside the polygon of one of the currently displayed rooms.",
            "itemtype": "method",
            "name": "isPointInRooms",
            "params": [
                {
                    "name": "vector",
                    "description": "The point to test.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The room in which the point is located, or null if it is outside every room.",
                "type": "RoomStructure"
            },
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 480,
            "description": "Draws a room.",
            "itemtype": "method",
            "name": "drawRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to draw.",
                    "type": "RoomStructure"
                },
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "Number"
                }
            ],
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 20,
            "description": "Default textures",
            "itemtype": "property",
            "name": "_defaultRoomTextures",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 32,
            "description": "Default Material for the floor",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{BABYLON.Material}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 43,
            "description": "Default Material for the ceiling",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{BABYLON.Material}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 52,
            "description": "Default Material for carving floors & ceilings",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{BABYLON.Material[]}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 61,
            "description": "Material offset for batching of the rooms into 1 single mesh.",
            "itemtype": "property",
            "name": "_materialOffset",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 74,
            "description": "Returns the common material displayed on the side of the floor when it is carved by hoppers.",
            "itemtype": "method",
            "name": "getSideMaterial",
            "return": {
                "description": "The side Material.",
                "type": "BABYLON.Material"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 84,
            "description": "Sets the common material displayed on the side of the floor when it is carved by hoppers.",
            "itemtype": "method",
            "name": "setSideMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The side Material.",
                    "type": "BABYLON.Material"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 94,
            "description": "Returns the common ceiling material.",
            "itemtype": "method",
            "name": "getCeilingMaterial",
            "return": {
                "description": "The ceiling Material.",
                "type": "BABYLON.Material"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 104,
            "description": "Sets the common ceiling material.",
            "itemtype": "method",
            "name": "setCeilingMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The ceiling Material.",
                    "type": "BABYLON.Material"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 129,
            "description": "Fired when rooms are ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.roomsReady",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 135,
            "description": "Callback called when the floor mesh is ready.\nTriggered on event `wnp.engine3D.floorReady`",
            "itemtype": "method",
            "name": "onFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "The \"floor-ready\" event.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 187,
            "description": "Builds the 3D floor-wide room mesh and adds it to the scene.",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "rooms",
                    "description": "The rooms to build.",
                    "type": "RoomStructure[]"
                },
                {
                    "name": "hoppers",
                    "description": "Polygonal holes in the floor.",
                    "type": "HopperStructure[]"
                },
                {
                    "name": "floor",
                    "description": "Related floor.",
                    "type": "FloorStructure"
                },
                {
                    "name": "upHoppers",
                    "description": "Polygonal holes in the ceiling.",
                    "type": "HopperStructure[]"
                }
            ],
            "return": {
                "description": "Floor-wide mesh for the rooms & ceilings.",
                "type": "BABYLON.Mesh"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 259,
            "description": "Builds a single 3D room with its hoppers.",
            "itemtype": "method",
            "name": "createRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to build.",
                    "type": "RoomStructure"
                },
                {
                    "name": "height",
                    "description": "The height of the room.",
                    "type": "Number"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 322,
            "description": "Carves a hole in the room.",
            "itemtype": "method",
            "name": "carveHole",
            "params": [
                {
                    "name": "room3D",
                    "description": "Floor-wide mesh of the rooms.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "hole",
                    "description": "Polygonal 2D hole (flat).",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "height",
                    "description": "The height of the hole, amount of the 3D extrusion of the 2D polygon.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "finalRoom Room after carving.",
                "type": "BABYLON.Mesh"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 353,
            "description": "Replaces the former 3D room mesh with a new 3D mesh, keeping the custom properties of the 3D room mesh like \"boundingBoxes\" or \"objectInstances\".",
            "itemtype": "method",
            "name": "replaceRoom",
            "params": [
                {
                    "name": "oldRoom",
                    "description": "Old room.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newRoom",
                    "description": "New room.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 379,
            "description": "Creates the object instances and bounding boxes from merged subMeshes.",
            "itemtype": "method",
            "name": "createInstances",
            "params": [
                {
                    "name": "roomMesh",
                    "description": "3D room mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 24,
            "description": "2D vectors building the room's flat polygon.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 32,
            "description": "Potential holes in the room's polygon.\nArray of 2D vectors describing the holes.",
            "itemtype": "property",
            "name": "holes",
            "type": "{BABYLON.Vector2[][]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 41,
            "description": "Walls that surround the room.",
            "itemtype": "property",
            "name": "walls",
            "type": "{WallStructure[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 49,
            "description": "Array of normal vectors to walls referenced in the \"walls\" property.\nThese vectors are normal to the walls, and point towards the inside of the room polygon.\nIndex sync : given i an index, parentWallSides[i] is normal to walls[i].",
            "itemtype": "property",
            "name": "parentWallSides",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 59,
            "description": "Array of wall panes. See the wanaplan wiki for more info about wall panes.",
            "itemtype": "property",
            "name": "panes",
            "type": "{WallPanes3D[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 67,
            "description": "Cycle used to build the room, private property.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "cycle",
            "type": "{PointStructure[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 76,
            "description": "Room's inner id, can't be modified by the user.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 85,
            "description": "Room label, can be modified by the user.",
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 93,
            "description": "Room's hexadecimal color.",
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 101,
            "description": "Room's area (2D).",
            "itemtype": "property",
            "name": "area",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 109,
            "description": "Indicates if the room is external (see Wiki for more info about internal and external rooms).",
            "itemtype": "property",
            "name": "isExternal",
            "type": "{Boolean}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 117,
            "description": "Where to display the room's area label on the screen (2D).",
            "itemtype": "property",
            "name": "areaPosition",
            "type": "{BABYLON.Vector2}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 125,
            "description": "Text style: The width of the text.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "textWidth",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 134,
            "description": "Text style: the height of the text.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "textHeight",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 143,
            "description": "Room's materials.\nContains two fields : materials['ceiling'] and materials['floor'].",
            "itemtype": "property",
            "name": "materials",
            "type": "{Object}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 152,
            "description": "Room panes materials.\nFor serialization purposes, has to be modified in the future.",
            "access": "private",
            "tagname": "",
            "todo": [
                ""
            ],
            "itemtype": "property",
            "name": "panesMaterials",
            "type": "{BABYLON.Material[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 163,
            "description": "Room elevation.",
            "itemtype": "property",
            "name": "elevation",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 171,
            "description": "Room height (distance between the floor and the ceiling).",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 179,
            "description": "Thickness of the floor (3D).",
            "itemtype": "property",
            "name": "thickness",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 187,
            "description": "Ceiling flag:\n0 means no ceiling\n1 means ceiling\n2 means \"let the algorithm choose\".",
            "itemtype": "property",
            "name": "ceiling",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 240,
            "description": "Deserializes the object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "An object issued from a serialization.",
                    "type": "String"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 270,
            "description": "Gets the floor referencing this object.",
            "itemtype": "method",
            "name": "getFloor",
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection.",
                "type": "FloorStructure"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 286,
            "description": "Returns the center of the room.",
            "itemtype": "method",
            "name": "getCenter",
            "return": {
                "description": "The 2D center of gravity of the room's polygon.",
                "type": "BABYLON.Vector2"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 297,
            "description": "Sets the color of a room.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "The",
                    "description": "hexadecimal representation of the color.",
                    "type": "String"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 307,
            "description": "Gets the Wall Panes (see Wanaplan API wiki for more info).",
            "itemtype": "method",
            "name": "getWallPanes",
            "return": {
                "description": "The Wall Panes of the room.",
                "type": "WallPane3D[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 317,
            "description": "Updates a wallPane with a new material and refreshes its center and normal.\nThis function must be called after dispatchMaterials, if there was a 2D -> 3D switch.",
            "itemtype": "method",
            "name": "updatePaneMaterial",
            "params": [
                {
                    "name": "pane",
                    "description": "The pane to update.",
                    "type": "WallPane3D"
                },
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "BABYLON.Material"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 332,
            "description": "Copies a room.\n\nWARNING: Beware of shared materials !",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "room",
                    "description": "The room to copy.",
                    "type": "RoomStructure"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 365,
            "description": "Creates a room from a closed cycle of points.",
            "itemtype": "method",
            "name": "createFromCycle",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "cycle",
                    "description": "The cycle of points.",
                    "type": "PointStructure[]"
                }
            ],
            "return": {
                "description": "The resulting room.",
                "type": "RoomStructure"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 415,
            "description": "Creates the wall panes for the room.\nBasically, one side of the room polygon = 1 wall pane.",
            "itemtype": "method",
            "name": "createWallPanes",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The wall panes.",
                "type": "WallPane3D[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 439,
            "description": "Dispatches the materials to the wall panes.\nTakes the panesMaterials list, and finds out on which pane which material is most likely to be.\nThe likelihood score is determined by the center and normal of the wallPane.",
            "itemtype": "method",
            "name": "dispatchMaterials",
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 476,
            "description": "Adds floor on doors, or overtures that hit the ground, so there is no hole in the connection between 2 rooms.",
            "itemtype": "method",
            "name": "addFloorOnOvertures",
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 582,
            "description": "Equal operator for 2 rooms.\nCompares the points of 2 rooms.",
            "itemtype": "method",
            "name": "eql",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with.",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "True if this room points are the same as the points of the room in parameter (not necessarily in the same order).",
                "type": "Boolean"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 602,
            "description": "Determines if a point is in the room.",
            "itemtype": "method",
            "name": "isPointIn",
            "params": [
                {
                    "name": "vector",
                    "description": "The point in plan coordinates.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "True if the point is in the room.",
                "type": "Boolean"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 620,
            "description": "Returns the area of the room.",
            "itemtype": "method",
            "name": "getRoomArea",
            "params": [
                {
                    "name": "force",
                    "description": "Forces a recomputing of the room area.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The room area.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 636,
            "description": "Computes the area of the room.",
            "itemtype": "method",
            "name": "processRoomArea",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The room area.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 665,
            "description": "Returns the oriented area of the room.",
            "itemtype": "method",
            "name": "orientedArea",
            "return": {
                "description": "The room area, negative if the room is counterclockwise.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 678,
            "description": "Flips a room. If it was counterclockwise, it becomes clockwise.",
            "itemtype": "method",
            "name": "reversePath",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 687,
            "description": "Returns a BABYLON.Vector2 array of the room points.",
            "itemtype": "method",
            "name": "toVec2Array",
            "return": {
                "description": "The array of points.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 702,
            "description": "Determines the overlapping area of 2 rooms' bounding boxes.",
            "itemtype": "method",
            "name": "getOverlappingRectArea",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with.",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "The overlapping area of bounding boxes.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 725,
            "description": "Gives a score of likelihood between 2 rooms.",
            "itemtype": "method",
            "name": "getLikelihood",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with.",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "An arbitrary number, usually less than 10. The higher it is, the more alike the rooms look.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 752,
            "description": "Returns the 2D not oriented Bounding Box.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "The Bounding Box.",
                "type": "BABYLON.BoundingBox"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 25,
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 56,
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 83,
            "description": "Computes the points of the spiral stairway.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "computeSpiralPoints",
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 124,
            "description": "Gets the point of the hopper in the upper floor, induced by the stairway.",
            "itemtype": "method",
            "name": "getHopperPoints",
            "return": {
                "description": "The points of the hopper.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 146,
            "description": "Draws the spiral stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "_temp",
                    "description": "The temporary position of the stairway.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 60,
            "description": "When the structure is loaded, we check the coherency of the structure.",
            "itemtype": "method",
            "name": "onStructureLoaded",
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 79,
            "description": "When the user adds a floor, the engine looks for the stairway in floor below and computes the hopper.",
            "itemtype": "method",
            "name": "onFloorAdded",
            "params": [
                {
                    "name": "event",
                    "description": "The associated event.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 103,
            "description": "When the user leaves the stairway.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure leaved.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 120,
            "description": "When the user hovers the stairway.",
            "itemtype": "method",
            "name": "onHoverStair",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 137,
            "description": "When the user hover the stairway with the cursor.",
            "itemtype": "method",
            "name": "onHoverStairMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure hovered.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 153,
            "description": "When hover.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure hovered.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 172,
            "description": "When the user finish to drag the stairway.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 209,
            "description": "Draws the stair when the user drag the stairway.",
            "itemtype": "method",
            "name": "onDrawDragging",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 224,
            "description": "Method call only on the drag start when the user draw, it allow to simulate a pen to draw the stairway.",
            "itemtype": "method",
            "name": "onDrawDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 242,
            "description": "When the user start to drag the stair.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure leaved.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 257,
            "description": "When the user drag a spiral stair.",
            "itemtype": "method",
            "name": "onDragStairSpiral",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The spiral stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 299,
            "description": "When the user drag a spiral stair.",
            "itemtype": "method",
            "name": "onDragStair",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The spiral stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 346,
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 367,
            "description": "Fired when the user requests the add of a stairway in the menu.",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddStairway",
            "params": [
                {
                    "name": "stairwayType",
                    "description": "Type of the stairway. Can be 'straight' or 'spiral'.",
                    "type": "String"
                },
                {
                    "name": "bearing",
                    "description": "Activates the bearing on the geometry.",
                    "type": "Boolean"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 374,
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 420,
            "description": "Add a stairway.",
            "itemtype": "method",
            "name": "onAddStairway",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive with the basics data.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 444,
            "description": "When the user double-clicks on the stairway, adds a new point.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 462,
            "description": "Finalizes to build the stairway, and creates the hopper.",
            "itemtype": "method",
            "name": "finalizeTmpStairway",
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 493,
            "description": "When the user add a point on the stairway with a simple click.",
            "itemtype": "method",
            "name": "onAddStairwayClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 533,
            "description": "On the mousemove, in draw state, we create the temporary point (perpendicular to the last segment).",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 577,
            "description": "Add the magnetism on the stairway.",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "origin",
                    "description": "The origin of the point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 606,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 639,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 677,
            "description": "Handle all the item of the context menu.",
            "itemtype": "method",
            "name": "onContextMenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 830,
            "description": "When a value is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure changed value.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 844,
            "description": "When the user remove the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "StairwayStructure"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 863,
            "description": "Draws a stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "tmpPoint",
                    "description": "The tamporary point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 884,
            "description": "Draw a spiral stairway.",
            "itemtype": "method",
            "name": "drawTargetSpiral",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 908,
            "description": "Draw a stairway.",
            "itemtype": "method",
            "name": "drawTargetSpiral",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 40,
            "description": "When the floor is ready, we can create all the floor of the stage.",
            "itemtype": "method",
            "name": "onFloorReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event with the important informations (The scene and the current structure).",
                    "type": "Event"
                }
            ],
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 55,
            "description": "Creates all the stairways of the scene.",
            "itemtype": "method",
            "name": "createScene",
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 77,
            "description": "Puts the material on the good mesh.",
            "itemtype": "method",
            "name": "initMaterials",
            "params": [
                {
                    "name": "object3d",
                    "description": "The mesh of the stairway.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materials",
                    "description": "The materials of the stairway.",
                    "type": "wnp.standardMaterial[]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 95,
            "description": "Creates the mesh of a stairway.",
            "itemtype": "method",
            "name": "createStairway",
            "params": [
                {
                    "name": "stairway",
                    "description": "The structure of the stairway.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "sceneF",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "scene",
                    "description": "The global scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 23,
            "description": "The points defining the path of the stairway.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector3[]}",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 30,
            "description": "Type of the stairway (straight or spiral).",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "default": "\"straight\"",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 37,
            "description": "Width of the stairway.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "default": "90",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 44,
            "description": "Height of the stairway.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "default": "250",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 51,
            "description": "The stair height.",
            "itemtype": "property",
            "name": "stair_height",
            "type": "{Number}",
            "default": "20",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 58,
            "description": "The stair thickness.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "stair_thickness",
            "default": "3",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 65,
            "description": "The stair width.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "stair_width",
            "default": "25",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 72,
            "description": "Has a rail on the 'a' side.",
            "type": "{Boolean}",
            "itemtype": "property",
            "name": "rail_a",
            "default": "true",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 79,
            "description": "Has a rail on the 'b' side.",
            "type": "{Boolean}",
            "itemtype": "property",
            "name": "rail_b",
            "default": "true",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 86,
            "description": "Has a limon.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "limon",
            "default": "-1",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 93,
            "description": "The stick spacement.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "stick_spacement",
            "default": "20",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 100,
            "description": "Has a riser",
            "type": "{Boolean}",
            "itemtype": "property",
            "name": "have_contremarche",
            "default": "true",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 107,
            "description": "The elevation of the stairway.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "elevation",
            "default": "0",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 114,
            "description": "The diameter of the middle of the stairway.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "diameter",
            "default": "6",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 121,
            "description": "Has a bearing.",
            "type": "{Boolean}",
            "itemtype": "property",
            "name": "bearing",
            "default": "true",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 128,
            "description": "The stair offset.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "stair_offset",
            "default": "3",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 135,
            "description": "The materials of the stairway. Nested object.",
            "type": "{Object}",
            "itemtype": "property",
            "name": "materials",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 142,
            "description": "The parent room.",
            "type": "{RoomStructure}",
            "itemtype": "property",
            "name": "room",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 149,
            "description": "The orientation of the stairway.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "orientation",
            "default": "true",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 258,
            "description": "Gets the hopper points created by the stairway.",
            "itemtype": "method",
            "name": "getHopperPoints",
            "return": {
                "description": "The four points of the hopper carved in the upper floor.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 301,
            "description": "Returns the 4 points of the step.",
            "itemtype": "method",
            "name": "getStepBoundPoints",
            "params": [
                {
                    "name": "bottomIndex",
                    "description": "The index of the bottom point of the step.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The four points of a step.",
                "type": "BABYLON.Vector3[]"
            },
            "access": "private",
            "tagname": "",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 331,
            "description": "Gets the normal at the given index point.",
            "itemtype": "method",
            "name": "getNormalAtPoint",
            "deprecated": true,
            "params": [
                {
                    "name": "index",
                    "description": "The index of the point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The normal at the point.",
                "type": "BABYLON.Vector3"
            },
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 349,
            "description": "Deletes the stairway.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure of the floor.",
                    "type": "FloorStructure"
                }
            ],
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 359,
            "description": "Adds a material.",
            "itemtype": "method",
            "name": "addMaterial",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "parent",
                    "description": "The parent of the mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "mesh",
                    "description": "The stairway mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materialItem",
                    "description": "The item material.",
                    "type": "wnp.StandardMaterial"
                }
            ],
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 377,
            "description": "Gets the available properties of the object (user-customizable).",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "An array containing several properties of the object.",
                "type": "Object[]"
            },
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 613,
            "description": "options\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 658,
            "description": "options\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 26,
            "description": "Checks if the stair is valid and has enough points to create the 3D mesh.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "True if valid.",
                "type": "Boolean"
            },
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 53,
            "description": "Check if the stair is targeted by the given vector.",
            "itemtype": "method",
            "name": "isTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "A position, usually the one of the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "True if target by the vector.",
                "type": "Boolean"
            },
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 84,
            "description": "Draw the straight stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "tmpPoint",
                    "description": "The temporary position of the stairway.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 106,
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 138,
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 167,
            "description": "Compute the point of the step of a straight stairway.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "computeSteps",
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 259,
            "description": "Get the bounding points of a step.",
            "itemtype": "method",
            "name": "getBoundPoints",
            "params": [
                {
                    "name": "step",
                    "description": "The n-th step of the stairway.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array of the bounding points.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 285,
            "description": "Draw the bearing.",
            "itemtype": "method",
            "name": "drawStepBearing",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "polygon",
                    "description": "The polygon points of the bearing.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "end",
                    "description": "Know if it is the last bearing or not.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 318,
            "description": "Draws the step.",
            "itemtype": "method",
            "name": "drawStep",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "step",
                    "description": "The n-th step of the stairway.",
                    "type": "Number"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 362,
            "description": "Draw all the steps of the stairway.",
            "itemtype": "method",
            "name": "drawStepStairs",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "segment",
                    "description": "The segment done by the step.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 20,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "100",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 30,
            "description": "Current computed subSlopes for caching purposes.",
            "itemtype": "property",
            "name": "subSlopes",
            "access": "private",
            "tagname": "",
            "type": "{SubSlopeStructure[]}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 39,
            "description": "Component internal update flag",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 47,
            "description": "Flag for height settings",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_applyHeightToAll",
            "type": "{Boolean}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 56,
            "description": "2D display style (radius).",
            "itemtype": "property",
            "name": "_HANDLERADIUS",
            "type": "{Number}",
            "default": "10",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 65,
            "description": "2D display style (static color).",
            "itemtype": "property",
            "name": "_HANDLESTATICSTYLE",
            "type": "{String}",
            "default": "'rgba(60,82,129,0.8)'",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 74,
            "description": "2D display style (current handle style).",
            "itemtype": "property",
            "name": "_HANDLESTYLE",
            "type": "{String}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 114,
            "description": "Fired when the subslope is in the menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The item in the menu (name of the section, index, etc ...).",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "The path of the menu.",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "The position inside the menu.",
                    "type": "Number"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 124,
            "description": "Fired when the user enters the subslope edit mode.",
            "itemtype": "event",
            "name": "wnp.engine2d.onEditSubSlope",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 130,
            "description": "Fired when the user quits the subslope edit mode.",
            "itemtype": "event",
            "name": "wnp.engine2d.onModeSubSlopeEnd",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 148,
            "description": "Function call when the user click on the subslope button and is in MODE_SUBSLOPE in the engine2D.",
            "itemtype": "method",
            "name": "onEditSubSlope",
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 160,
            "description": "Function called when the user go back to the MODE_NORMAL.",
            "itemtype": "method",
            "name": "wnp.engine2d.onModeSubSlopeEnd",
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 171,
            "description": "Function called when the user go back normal mode and skip the draw of the subslope.",
            "itemtype": "method",
            "name": "subslope-end",
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 183,
            "description": "Triggered on static canvas draw request",
            "itemtype": "method",
            "name": "onStaticDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 201,
            "description": "Triggered on dynamic canvas draw request",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D Context of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 220,
            "description": "When the mouse hovers the subslope.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 230,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 237,
            "description": "When the mouse leaves the subslope.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure left by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 247,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 255,
            "description": "When the mouse begins to drag the subslope.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure dragged by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 265,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 273,
            "description": "When the mouse is dragging the subslope.",
            "itemtype": "method",
            "name": "onDragging",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure dragging by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 283,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 409,
            "description": "When the mouse stops dragging the subslope.",
            "itemtype": "method",
            "name": "onDragEnd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 420,
            "description": "Fired when the user stops dragging the subslope.",
            "itemtype": "event",
            "name": "wnp.subslope.drag-end",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 426,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 443,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 477,
            "description": "Gets the list of subslopes for a given floor.",
            "itemtype": "method",
            "name": "getSubSlopes",
            "params": [
                {
                    "name": "force",
                    "description": "Forces the subslopes to be updated.",
                    "type": "Boolean"
                },
                {
                    "name": "structure",
                    "description": "The related floor. Current selected floor by default.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "The computed subslopes",
                "type": "SubSlopeStructure[]"
            },
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 606,
            "description": "Splits the subslope into two subslopes, with the help of a subslope divider.",
            "itemtype": "method",
            "name": "splitSubSlope",
            "params": [
                {
                    "name": "sSS",
                    "description": "The subslope divided.",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "dSS",
                    "description": "The subslope divider.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 667,
            "description": "Draws all the subslopes on a canvas for the current floor.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 684,
            "description": "Draws a single subslope.",
            "itemtype": "method",
            "name": "drawOnWall",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "subSlope",
                    "description": "Related SubSlopeStructure.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 733,
            "description": "When the menu of the subslopes have to be drawn on the canvas to set the basics parameters.",
            "itemtype": "method",
            "name": "onContextMenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 743,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 815,
            "description": "When a property change in the context menu.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 824,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 844,
            "description": "When the menu is removed.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 851,
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 21,
            "description": "Id of the current subslope.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "currentID",
            "type": "{Number}",
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 56,
            "description": "Builds the CSG mesh which carves a part of the wall mesh.",
            "itemtype": "method",
            "name": "buildCSG",
            "params": [
                {
                    "name": "points",
                    "description": "Points of the subslope plane mesh.",
                    "type": "BABYLON.Vector3[]"
                },
                {
                    "name": "structure",
                    "description": "Structure of the SubSlope",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Final CSG mesh.",
                "type": "BABYLON.CSG"
            },
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 159,
            "description": "Adds the subslope mesh to the scene.",
            "itemtype": "method",
            "name": "addSubSlope",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "points",
                    "description": "Points of the subslope plane mesh.",
                    "type": "BABYLON.Vector3[]"
                },
                {
                    "name": "subSlope",
                    "description": "The current subslope.",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "structure",
                    "description": "The wall on which the subslope must be added.",
                    "type": "WallStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 312,
            "description": "Carves the wall with the big union of CSG.",
            "itemtype": "method",
            "name": "buildFromCSG",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "wallCSG",
                    "description": "Mesh of the wall but in CSG.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "roomCSG",
                    "description": "CSG of the room.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "subslopeCSG",
                    "description": "CSG of all the subslope.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 355,
            "description": "Carves And creates subslopes for all the floor.",
            "itemtype": "method",
            "name": "drawSSForStructure",
            "params": [
                {
                    "name": "structure",
                    "description": "Related floor structure.",
                    "type": "FloorStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 363,
            "description": "Fired when the subslope are ready and drawn.",
            "itemtype": "event",
            "name": "wnp.engine3D.subslopesReady",
            "params": [
                {
                    "name": "floor",
                    "description": "3D Floor mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "Related floor structure.",
                    "type": "FloorStructure"
                },
                {
                    "name": "walls",
                    "description": "The resultant wall mesh for this floor (The subslopes are carving the wall mesh when built).",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 18,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "99",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 28,
            "description": "Adding an overture..",
            "itemtype": "property",
            "name": "_tmpOverture",
            "access": "private",
            "tagname": "",
            "type": "{SubSlopeOvertureStructure[]}",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 37,
            "description": "The state of the SubslopeOverture.\n1 if the adding is being, 0 otherwise",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 47,
            "description": "If the target is dragged",
            "itemtype": "property",
            "name": "_targetedAt",
            "access": "private",
            "tagname": "",
            "type": "{boolean}",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 56,
            "description": "The id of the selected side of the subslopeOverture",
            "itemtype": "property",
            "name": "_targetedAtSide",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 65,
            "description": "Dragged subslopeOverture for drawing Magnetism",
            "itemtype": "property",
            "name": "_overture1Magnetism",
            "access": "private",
            "tagname": "",
            "type": "{SubSlopeOvertureStructure[]}",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 74,
            "description": "Other subslopeOverture for drawing Magnetism",
            "itemtype": "property",
            "name": "_overture2Magnetism",
            "access": "private",
            "tagname": "",
            "type": "{SubSlopeOvertureStructure[]}",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 88,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 123,
            "description": "Fired when the user requests the add of a subslopeOverture (click on the button)",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddSubSlopeOverture",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 128,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 156,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 174,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 186,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 205,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 215,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 247,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 262,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 367,
            "description": "Computes the distance on the canvas between the different subslope overture.",
            "itemtype": "method",
            "name": "calculateDistance",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The 1st overture structure.",
                    "type": "wnp.subSlopesOvertureStructure"
                },
                {
                    "name": "subslopeOV2",
                    "description": "The 2nd overture structure.",
                    "type": "wnp.subSlopesOvertureStructure"
                },
                {
                    "name": "Vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "number",
                    "description": "Check the size we have to change.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance between the subslope overture.",
                "type": "Number"
            },
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 395,
            "description": "Return the point resulting from the intersection of a subslopeOverture and a subslope.",
            "itemtype": "method",
            "name": "getIntersectPoint",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopetructure"
                },
                {
                    "name": "Vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "number",
                    "description": "Check the size we have to change.",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "intersection.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 462,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 475,
            "description": "When the user change the type of overture, we change the event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "changeAddStateVelux",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 489,
            "description": "When the user change the type of overture, we change the event.",
            "itemtype": "method",
            "name": "changeAddStateSubSlopeOverture",
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 508,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 521,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 543,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 567,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 601,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 719,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 756,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 773,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 799,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 818,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 840,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 989,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1007,
            "description": "Returns true if the given subslope overture is inside the subslope's polygon",
            "itemtype": "method",
            "name": "isInSubSlope",
            "params": [
                {
                    "name": "ssCoord",
                    "description": "Array of the polygon points of the subslope.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "ssOvCoord",
                    "description": "Array of the polygon points of the subslope overture.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1043,
            "description": "Put two overture at the same height if they are closed.",
            "itemtype": "method",
            "name": "appliedMagnetism",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the subslope overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "normalVector",
                    "description": "The normal vector of the wall of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "colVector",
                    "description": "A vector colinear to the wall vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1079,
            "description": "Applied the magnetism on the good side.",
            "itemtype": "method",
            "name": "appliedSideMagnetism",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the subslope overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "normalVector",
                    "description": "The normal vector of the wall of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "colVector",
                    "description": "A vector colinear to the wall vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "moveVector",
                    "description": "The movment vector done with the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1142,
            "description": "Reorganize the subslopes overture of one subslope.",
            "itemtype": "method",
            "name": "reorganizeSubslopes",
            "params": [
                {
                    "name": "ssArray",
                    "description": "Array of all the overture of a subslope.",
                    "type": "wnp.subSlopeOvertureStructure[]"
                },
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "vector",
                    "description": "The vector of the wall.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1199,
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1212,
            "description": "Check the size of the overture : Must be positive.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "data",
                    "description": "The size of the subslope overture.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1228,
            "description": "Check if a point is nearby the side of a subslope overture.",
            "itemtype": "method",
            "name": "isPointInOvertureSide",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "overture",
                    "description": "The subslope overture structure.",
                    "type": "SubSlopeOvertureStructure"
                }
            ],
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1249,
            "description": "Draw the target : the subslope overture on the canvas.",
            "itemtype": "method",
            "name": "drawTarget",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "subslopeOverture",
                    "description": "The subslope overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1269,
            "description": "Draw an overture on the subslope.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "overture",
                    "description": "The overturewhich have to be draw.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "The overture is selected or not.",
                    "type": "Boolean"
                }
            ],
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1368,
            "description": "Draw a line between 2 positions of overture with the magnetism.",
            "itemtype": "method",
            "name": "drawMagnetism",
            "params": [
                {
                    "name": "ssOv1",
                    "description": "The 1st subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ssOv2",
                    "description": "The second subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1413,
            "description": "Draw the distance between 2 overture.",
            "itemtype": "method",
            "name": "drawCotes",
            "params": [
                {
                    "name": "ssOv1",
                    "description": "The 1st subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ssOv2",
                    "description": "The second subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to draw.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1500,
            "description": "Draw the distance between a subslope overture and the closest side of a subslope.",
            "itemtype": "method",
            "name": "drawCotesSS",
            "params": [
                {
                    "name": "ssOv",
                    "description": "The subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The index point of the subslope.",
                    "type": "Number"
                },
                {
                    "name": "vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 21,
            "description": "Type of the subslopeOverture.\nAvailables values are \"Velux\" , \"Dormer\"",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 29,
            "description": "Width of the subslopeOverture.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "100",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 37,
            "description": "Height of the subslopeOverture.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "150",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 45,
            "description": "Thickness of the subslopeOverture.",
            "itemtype": "property",
            "name": "thickness",
            "type": "Number",
            "default": "5",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 53,
            "description": "The number of casements.\nAvailables values are 0 , 1 , 2 , 3",
            "itemtype": "property",
            "name": "nbCasement",
            "type": "Number",
            "default": "1",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 62,
            "description": "If the subslopeOverture is sliding or not.",
            "itemtype": "property",
            "name": "sliding",
            "type": "Boolean",
            "default": "false",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 70,
            "description": "Params of the roof of the dormer.",
            "itemtype": "property",
            "name": "dormerRoof",
            "type": "Object",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 77,
            "description": "Thickness of the wall of the dormer.",
            "itemtype": "property",
            "name": "wallThickness",
            "type": "Number",
            "default": "10",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 85,
            "description": "The subslope where the SubslopeOverture belongs.",
            "itemtype": "property",
            "name": "parent",
            "type": "SubSlopeStructure",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 92,
            "description": "Position of the subslopeOverture.",
            "itemtype": "property",
            "name": "position",
            "type": "BABYLON.Vector2",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 99,
            "description": "The 2D polygon vertices of the subslopeOverture.\nThe length of this array is always 4 at all times.",
            "itemtype": "property",
            "name": "polygon",
            "type": "BABYLON.Vector2[]",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 110,
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 124,
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 131,
            "description": "Returns the parent of this subslopeOverture.",
            "itemtype": "method",
            "name": "getParent",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 140,
            "description": "Sets the parent of the subslope overture.",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "subslope",
                    "description": "The new parent subslope.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 167,
            "description": "Tests if the given vector is inside the polygon of the subslope overture.",
            "itemtype": "method",
            "name": "isTargeted",
            "return": {
                "description": "True if the vector lies inside the polygon.",
                "type": "Boolean"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 178,
            "description": "Removes the subslope overture from the subslope.",
            "itemtype": "method",
            "name": "remove",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 188,
            "description": "Returns the absolute position of this subslope overture.",
            "itemtype": "method",
            "name": "getAbsolutePosition",
            "return": {
                "description": "A nested object whose fields are : \n* `position` Absolute position (BABYLON.Vector2)\n* `vector` Always null.",
                "type": "Object"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 208,
            "description": "Sets the material on a specific mesh of the subslope overture.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "name",
                    "description": "The name of the mesh you want to change the material of.",
                    "type": "String"
                }
            ],
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 218,
            "description": "Gets the current materials.",
            "itemtype": "method",
            "name": "getMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "If this parameter is provided, only the material of the mesh of this name will be returned.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The material(s). A nested object is returned if no `name` parameter has been specified.",
                "type": "BABYLON.Material"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 232,
            "description": "????",
            "itemtype": "method",
            "name": "to3D",
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 243,
            "description": "Obtient les propriétés de l'objet.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "Un tableau contenant les différentes propriétés de l'objet.",
                "type": "Array"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 330,
            "description": "options\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 375,
            "description": "options\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 20,
            "description": "The 2D base points of the subslope. \nThere is always 2 base points on a subslope, and they lay on the side of a wall.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 28,
            "description": "Side on the wall (a wall can have several subslopes in both directions).\nWarning : This property is an array, but only the first element matters for now.\nthis.side[0] is a vector normal to the wall, indicating in which direction the subslope lays.",
            "itemtype": "property",
            "name": "side",
            "type": "{BABYLON.Vector2[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 38,
            "description": "The wall structure associated to the subslope.",
            "itemtype": "property",
            "name": "wall",
            "type": "{PolygonWall}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 45,
            "description": "The walls adjacent to the subslope.",
            "itemtype": "property",
            "name": "neighbors",
            "type": "{PolygonWall[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 52,
            "description": "The overtures on the subslope.",
            "itemtype": "property",
            "name": "overtures",
            "type": "{SubSlopesOvertureStructure[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 59,
            "description": "The distance between the 2 side of the subslope : offset < wall.thickness <==> subslope does not need to be drawn.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Number}",
            "default": "0",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 67,
            "description": "The materials of the subslopes.",
            "itemtype": "property",
            "name": "materials",
            "type": "{wnp.StandardMaterial}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 74,
            "description": "The minimum height of the subslope.",
            "itemtype": "property",
            "name": "lowHeight",
            "type": "{Number}",
            "default": "80",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 82,
            "description": "The maximum height of the subslope.",
            "itemtype": "property",
            "name": "hiHeight",
            "type": "Number",
            "default": "250",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 90,
            "description": "The 2D polygon vertices of the subslope.\nThe lenght of this array is always 4 at all times.",
            "itemtype": "property",
            "name": "polygonPoints",
            "type": "BABYLON.Vector2[]",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 98,
            "description": "Update flag for the structure.\nSet to true if your subslope needs to be recomputed.",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 142,
            "description": "Checks the coherency of the structure, for instance : \n     - this.lowHeight < this.hiHeight\n     - this.lowHeight > 0\n     - this.hiHeight < 4000\n\nWARNING : This method automatically corrects incoherency.\nSo it may modify the parameters of the subslope.",
            "itemtype": "method",
            "name": "checkCoherence",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 174,
            "description": "Searches the closest point of the carrying wall and returns the index in the array.",
            "itemtype": "method",
            "name": "indexClosest",
            "params": [
                {
                    "name": "points",
                    "description": "The points of the wall carrying the subslope.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "The index of the closest point.",
                "type": "Number"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 185,
            "description": "Searches if the points are on the same side of the wall.",
            "itemtype": "method",
            "name": "isSameSide",
            "params": [
                {
                    "name": "points",
                    "description": "The points of the wall of the subslope.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "true if the points are on the same side.",
                "type": "Boolean"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 198,
            "description": "Returns a vector going from the base point 0 to the base point 1 of the subslope.",
            "itemtype": "method",
            "name": "getVector",
            "return": {
                "description": "The final vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 208,
            "description": "Returns the distance between 2 subslopes.",
            "itemtype": "method",
            "name": "distanceFrom",
            "params": [
                {
                    "name": "ss",
                    "description": "The subslope.",
                    "type": "SubSlopeStructure"
                }
            ],
            "return": {
                "description": "The distance.",
                "type": "Number"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 244,
            "description": "Computes the polygon points.",
            "itemtype": "method",
            "name": "computePolygonPoints",
            "params": [
                {
                    "name": "force",
                    "description": "Force to update the polygon points.",
                    "type": "Boolean"
                }
            ],
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 340,
            "description": "Tests if a point is inside the subslope 2D polygon.",
            "itemtype": "method",
            "name": "isPointIn",
            "params": [
                {
                    "name": "pt",
                    "description": "The point we want to test.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "true if the point is inside the subslope polygon.",
                "type": "Boolean"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 354,
            "description": "Returns the 4 points defining the plane of the subslope in 3D.",
            "itemtype": "method",
            "name": "plane",
            "return": {
                "description": "The 4 points of the plane.",
                "type": "BABYLON.Vector3[]"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 384,
            "description": "Resets the subslope.",
            "itemtype": "method",
            "name": "remove",
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 397,
            "description": "Gets the nearest subslope from a given position.",
            "itemtype": "method",
            "name": "getNearestSubSlope",
            "params": [
                {
                    "name": "vector",
                    "description": "Input position.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "The floor structure where the subslope belongs.",
                    "type": "SubSlopeStructure"
                }
            ],
            "return": {
                "description": "The nearest subslope.",
                "type": "SubSlopeStructure"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 18,
            "description": "The 2D polygon shape of the wall.",
            "itemtype": "property",
            "name": "polygonPoints",
            "type": "{BABYLON.Vector2[]}",
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 70,
            "description": "Returns the 2 segments connecting the sides of the polygons of the wall.\nThese segments are parallel to the wall vector.",
            "itemtype": "method",
            "name": "getAxis",
            "return": {
                "description": "2x2 Array containing the 2 connecting segments.",
                "type": "BABYLON.Vector2[][]"
            },
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 19,
            "description": "Constant for normal wall.",
            "itemtype": "property",
            "name": "TYPE_NORMAL",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "static": 1,
            "final": 1,
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 29,
            "description": "Constant for separator walls.",
            "itemtype": "property",
            "name": "TYPE_SEPARATOR",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "static": 1,
            "final": 1,
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 40,
            "description": "Constants for the colors of the wall.",
            "itemtype": "property",
            "name": "_COLORS",
            "type": "Array",
            "default": "[\"#333333\", \"#616161\", \"#BEBEBE\", \"#EEEEEE\"]",
            "static": 1,
            "final": 1,
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 50,
            "description": "Drawing patterns for drawing style of the walls.\nThis is an array of drawing patterns (see canvas patterns).\nYou can then change the style of the wall in the function `drawWall` using\n`options.styleId` where styleId is the index of the style in this Array.\n\n> NB : use function `createPattern` of a 2D context. For the `Image` parameter,\nuse the image in `PATTERN_IMGS` at the same index.",
            "itemtype": "property",
            "name": "_PATTERNS",
            "default": "\"repeat\"",
            "type": "{ctxPattern[]}",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 65,
            "description": "Images for drawing style of the walls.\nThis is an array of Image.\nYou can then change the style of the wall in the function `drawWall` using\n`options.styleId` where styleId is the index of the style in this Array.",
            "itemtype": "property",
            "name": "_PATTERN_IMGS",
            "type": "{Image[]}",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 89,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "10",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 116,
            "description": "Flag that enables/disables the displaying of measures.",
            "itemtype": "property",
            "name": "displayMesure",
            "type": "{Boolean}",
            "default": "true",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 255,
            "description": "Deletes small walls.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "simplifyWalls",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 282,
            "description": "Draws a wall.",
            "itemtype": "method",
            "name": "drawWall",
            "params": [
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "Number"
                },
                {
                    "name": "wall",
                    "description": "Involved wall.",
                    "type": "WallStructure"
                },
                {
                    "name": "options",
                    "description": "Drawing options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "measureDisplayed",
                            "description": "Shows or hides the measure.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "styleId",
                            "description": "Changes the drawing style.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 311,
            "description": "Draws all measures.",
            "itemtype": "method",
            "name": "_drawMeasures",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "Number"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 327,
            "description": "Adds a the first point in the wall.",
            "itemtype": "method",
            "name": "_addWallFirstPoint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "State of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "point",
                    "description": "point 0 of the wall.",
                    "type": "PointStructure",
                    "optional": true
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 363,
            "description": "Add the second point and insert the wall in the structure.",
            "itemtype": "method",
            "name": "_addWallUpdate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "State of the mouse.",
                    "type": "Object"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 398,
            "description": "Updates the wall temporary.",
            "itemtype": "method",
            "name": "_addWallUpdate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 34,
            "description": "Default wall material.",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "default": "wnp.WhiteMaterial",
            "type": "{BABYLON.StandardMaterial}",
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 46,
            "description": "Fired when all 3D wall meshes are ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.wallsReady",
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 70,
            "description": "Returns a 3D mesh corresponding to a 2D wall structure.",
            "itemtype": "method",
            "name": "get3DWallFrom2D",
            "params": [
                {
                    "name": "structure",
                    "description": "The 2D wall.",
                    "type": "WallStructure"
                }
            ],
            "return": {
                "description": "A wall mesh. __Be careful__, all wall meshes for 1 floor are merged together.",
                "type": "BABYLON.Mesh"
            },
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 82,
            "description": "Replaces one wall mesh with another, copying important data along.  \nThe old wall mesh is disposed during the process.  \nUsed mainly by the CSG operations.",
            "itemtype": "method",
            "name": "replaceWall",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "oldWall",
                    "description": "Old wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newWall",
                    "description": "New wall.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 133,
            "description": "Decoration function. Cannot be used except by the decoration component.",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "material",
                    "description": "New material.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "Picking info for the decoration.",
                    "type": "BABYLON.PickingInfo"
                }
            ],
            "return": {
                "description": "The former material.",
                "type": "BABYLON.Material"
            },
            "access": "private",
            "tagname": "",
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 177,
            "description": "Draw all the walls for a floor",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "structure",
                    "description": "The involved floor.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The built mesh.",
                "type": "BABYLON.Mesh"
            },
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 24,
            "description": "Material information on this wall pane.",
            "itemtype": "property",
            "name": "materialInfo",
            "type": "{MaterialInfo}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 32,
            "description": "Reference of the parent room containing this pane.",
            "itemtype": "property",
            "name": "room",
            "type": "{RoomStructure}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 40,
            "description": "Material index in the wall mesh.",
            "itemtype": "property",
            "name": "materialIndex",
            "type": "{Number}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 48,
            "description": "A reference to the wall mesh carrying the pane",
            "itemtype": "property",
            "name": "wallMesh",
            "type": "{BABYLON.Mesh}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 59,
            "description": "Sets the parent room reference.",
            "itemtype": "method",
            "name": "setRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The new parent room.",
                    "type": "RoomStructure"
                }
            ],
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 69,
            "description": "Applies the material of the pane onto the wall mesh",
            "itemtype": "method",
            "name": "apply",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 77,
            "description": "Compares this wallPane's materialInfo to a list a materialInfos.\nReturns the materialInfo geometrically closest to this wallPane's materialInfo.",
            "itemtype": "method",
            "name": "nearestMaterial",
            "params": [
                {
                    "name": "materialInfos",
                    "description": "The materialInfo list to compare with.",
                    "type": "MaterialInfo[]"
                }
            ],
            "return": {
                "description": "The index of the closest materialInfo.",
                "type": "Number"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 102,
            "description": "Identifies the wallpane with a set of wallpanes.\nReturns the pane the more similar with this pane, comparing the center and normal.",
            "itemtype": "method",
            "name": "identifyWithPanes",
            "params": [
                {
                    "name": "panes",
                    "description": "The list of panes to compare with.",
                    "type": "WallPane3D[]"
                }
            ],
            "return": {
                "description": "The index in the list pointing to the most alike wallpane.",
                "type": "Number"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 130,
            "description": "Adds or changes a material for the wall pane.",
            "itemtype": "method",
            "name": "addMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "BABYLON.Material"
                }
            ],
            "return": {
                "description": "The old material, null if the WallPane did not have a material.",
                "type": "BABYLON.Material"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 148,
            "description": "Adds or changes a material for the wall pane. This is an alias for `addMaterial`.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "BABYLON.Material"
                }
            ],
            "return": {
                "description": "The old material, null if the WallPane did not have a material.",
                "type": "BABYLON.Material"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 157,
            "description": "Returns the material of this wall pane.",
            "itemtype": "method",
            "name": "getMaterial",
            "return": {
                "description": "The material, null if the WallPane does not have a material.",
                "type": "BABYLON.Material"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 21,
            "description": "Two 2D vectors building the ends of the wall.",
            "itemtype": "property",
            "name": "points",
            "type": "{PointStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 29,
            "description": "The two polygons surrounding the ends.",
            "itemtype": "property",
            "name": "_edgePolygons",
            "type": "{BABYLON.Vector2[][2]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 40,
            "description": "Attached points. See Wanaplan Wiki for more info about the connections between walls.",
            "itemtype": "property",
            "name": "attachedPoints",
            "type": "{PointStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 48,
            "description": "Overtures (doors, windows, bay windows ...).",
            "itemtype": "property",
            "name": "overtures",
            "type": "{OvertureStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 56,
            "description": "Wall height.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "default": "250",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 65,
            "description": "Wall thickness.",
            "itemtype": "property",
            "name": "thickness",
            "type": "{Number}",
            "default": "30",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 74,
            "description": "2D distance to display the measures related to this wall.",
            "itemtype": "property",
            "name": "measureDist",
            "type": "{Number}",
            "default": "15",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 83,
            "description": "Flag to enable/disable measure display.",
            "itemtype": "property",
            "name": "measureDisplayed",
            "type": "{Boolean}",
            "default": "true",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 92,
            "description": "Subslope list for this wall.",
            "itemtype": "property",
            "name": "subSlopes",
            "type": "{SubSlopeStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 100,
            "description": "Flag that signals if the geometry of the wall must be re-computed.",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 108,
            "description": "Class type of the wall.\ne.g. : 'polygon' for polygonal walls, which are most used in wanaplan.",
            "itemtype": "property",
            "name": "instance",
            "type": "{String}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 118,
            "description": "Standard wall.",
            "itemtype": "property",
            "name": "TYPE_NORMAL",
            "type": "{Number}",
            "static": 1,
            "final": 1,
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 128,
            "description": "Separator wall (infinitely thin).",
            "itemtype": "property",
            "name": "TYPE_SEPARATOR",
            "type": "{Number}",
            "static": 1,
            "final": 1,
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 138,
            "description": "Type of the wall.\nCan be TYPE_NORMAL or TYPE_SEPARATOR.",
            "itemtype": "property",
            "name": "type",
            "type": "{Number}",
            "default": "TYPE_NORMAL",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 214,
            "description": "Checks if the object structure contains errors, if so, removes it from the plan.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor where the object belongs.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 237,
            "description": "Gets the floor referencing this object.",
            "itemtype": "method",
            "name": "getFloor",
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection yet.",
                "type": "FloorStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 247,
            "description": "Computes a flat polygon ending, typically for unconnected walls.\nSee Wanaplan API wiki for more info on wall connection.",
            "itemtype": "method",
            "name": "computeDefault",
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The index of the ending point, 0 or 1.",
                    "type": "Number"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 265,
            "description": "Computes a polygon ending for one-way connected walls.\nSee Wanaplan API wiki for more info on wall connection.",
            "itemtype": "method",
            "name": "computeWeak",
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The index of the ending point, 0 or 1.",
                    "type": "Number"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 280,
            "description": "Computes a polygon ending for two-way connected walls.\nSee Wanaplan API wiki for more info on wall connection.",
            "itemtype": "method",
            "name": "computeStrong",
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The index of the ending point, 0 or 1.",
                    "type": "Number"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 338,
            "description": "Updates the wall after deserialization.",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "The floorStructure where the object belong.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 390,
            "description": "Gets the endings of the wall.",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the point.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "If an index is provided, returns the point of that index.\n                          Else returns an array containing the 2 points.",
                "type": "BABYLON.Vector2|BABYLON.Vector2[2]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 406,
            "description": "Checks if the wall is targeted by the cursor.",
            "itemtype": "method",
            "name": "isTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The cursor position.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "True if targeted.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 435,
            "description": "Changes the points composing the wall.",
            "itemtype": "method",
            "name": "setPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Array composed of instances of `PointStructure`.\nOR a `PointStructure` if the parameter `index` is provided.",
                    "type": "PointStructure[]"
                },
                {
                    "name": "index",
                    "description": "Index of the point (0 or 1).",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 475,
            "description": "Returns the polygon of the wall.",
            "itemtype": "method",
            "name": "getPolygon",
            "return": {
                "description": "The wall as a polygon (array of vertices).",
                "type": "BABYLON.Vector2[]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 497,
            "description": "Computes the vector representing the wall.\nStarts from its point 0, and ends on its point 1.",
            "itemtype": "method",
            "name": "getWallVector",
            "return": {
                "description": "Vector carrying the wall.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 508,
            "description": "Computes the length of the wall.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "The length of the wall.",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 522,
            "description": "Draws the wall on a canvas.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 551,
            "description": "Translates the wall.",
            "itemtype": "method",
            "name": "translate",
            "abstract": "",
            "params": [
                {
                    "name": "vector",
                    "description": "Translation vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "Floor structure containing the wall.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 563,
            "description": "Returns a list of intersections with the other walls in the same floor.\nThe extremities of the walls are not considered as intersections.\nThe array is returned after sorting the elements by distance from the point 0 of the wall.",
            "itemtype": "method",
            "name": "getIntersections",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The intersections as an array of PointStructure.",
                "type": "PointStructure[]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 616,
            "description": "Splits the wall, taking other walls as splitters.",
            "itemtype": "method",
            "name": "splitAtIntersections",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 627,
            "description": "Reorganizes the attached walls and the overtures when the wall is splitted into several pieces.",
            "itemtype": "method",
            "name": "reorganizeOnSplit",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                },
                {
                    "name": "wallList",
                    "description": "The resulting pieces of the split.",
                    "type": "WallStructure[]"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 682,
            "description": "Upgrades the connection from weak (attached) to strong (connected).",
            "itemtype": "method",
            "name": "weakToStrong",
            "params": [
                {
                    "name": "point",
                    "description": "The weak point that becomes strong.",
                    "type": "PointStructure"
                },
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "wnp.FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 727,
            "description": "Tries to merge the wall with other walls in the same floor.",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The resulting wall. Returns the unchanged wall if the method does not manage to merge with something.",
                "type": "WallStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 739,
            "description": "Updates the position of the attached points.",
            "itemtype": "method",
            "name": "updateAttachedPoints",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 750,
            "description": "Updates the position of the overtures on the wall.",
            "itemtype": "method",
            "name": "updateOvertures",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 765,
            "description": "Returns the projection of the given vector on the wall segment.",
            "itemtype": "method",
            "name": "getNearestPoint",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "margin",
                    "description": "The margin we take outside the endings of the wall.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 792,
            "description": "Returns the projection of the given vector on the wall axe.",
            "itemtype": "method",
            "name": "getNearestPointOnAxe",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 810,
            "description": "Returns the projection of the given vector on the wall bounding rectangle.",
            "itemtype": "method",
            "name": "getNearestPointOnRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "margin",
                    "description": "The margin we take outside the endings of the wall.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 824,
            "description": "Returns true if the point is inside the polygon of the wall.",
            "itemtype": "method",
            "name": "isPointInPolygon",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "True if the point is inside the polygon.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 843,
            "description": "Returns the projection of the given vector on the wall polygon.",
            "itemtype": "method",
            "name": "getNearestPointOnPolygon",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 877,
            "description": "Computes the bounding box.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "Nested object, min : `BABYLON.Vector2`, max : `BABYLON.Vector2`",
                "type": "Object"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 908,
            "description": "Returns the nearest wall from a given point.",
            "itemtype": "method",
            "name": "getNearestWall",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "The floor structure to check.",
                    "type": "FloorStructure"
                }
            ],
            "static": 1,
            "return": {
                "description": "The nearest wall.",
                "type": "WallStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 934,
            "description": "Returns the distance from a wall to a point.",
            "itemtype": "method",
            "name": "distanceFrom",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Distance to this wall.",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 948,
            "description": "Returns the distance from the given vector to the wall bounding rectangle.",
            "itemtype": "method",
            "name": "distanceFromRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "margin",
                    "description": "The margin we take outside the endings of the wall.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The distance.",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 964,
            "description": "Returns the vector from the projected point on the wall, to the given point.\nDirection : wall -> point.",
            "itemtype": "method",
            "name": "vectorTo",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 979,
            "description": "Checks if a point is on a wall, within a `delta` incertitude.",
            "itemtype": "method",
            "name": "isPointOn",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "delta",
                    "description": "Incertitude.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1e-5"
                }
            ],
            "return": {
                "description": "True if the point is on the wall.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 993,
            "description": "Returns an orthogonal vector.",
            "itemtype": "method",
            "name": "getNormalVector",
            "params": [
                {
                    "name": "norm",
                    "description": "The requested norm.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "Orthogonal vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1010,
            "description": "Sorts the list of the attached points (point 0 to point 1).",
            "itemtype": "method",
            "name": "sortAttached",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1022,
            "description": "Returns all the points of the wall (endings and attached points) in a specific order.",
            "itemtype": "method",
            "name": "getAllPoints",
            "params": [
                {
                    "name": "inOrder",
                    "description": "Order (-1 = from ending 0 to 1, 1 = from ending 1 to 0).",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Array of all the points.",
                "type": "PointStructure[]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1043,
            "description": "Deletes a wall.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1087,
            "description": "Adds a wall and its points to a structure.",
            "itemtype": "method",
            "name": "addToStructure",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1101,
            "description": "Checks if the wall is parallel to another wall.",
            "itemtype": "method",
            "name": "parallelTo",
            "params": [
                {
                    "name": "wall",
                    "description": "Other wall.",
                    "type": "WallStructure"
                }
            ],
            "return": {
                "description": "True if the walls are parallel.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CustomComponents\\OutsideComponent3D.js",
            "line": 8,
            "description": "Fired to change the material of the ground",
            "itemtype": "event",
            "name": "wnp.engine3D.changeGround",
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CustomComponents\\OutsideComponent3D.js",
            "line": 14,
            "description": "Fired to change the material of the sky",
            "itemtype": "event",
            "name": "wnp.engine3D.changeSky",
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "line": 73,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "line": 75,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "line": 58,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "line": 60,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent2D.js",
            "line": 52,
            "description": "Enables scrolling on the grid",
            "itemtype": "method",
            "name": "enableScrolling",
            "params": [
                {
                    "name": "enable",
                    "description": "\"Enabled\" flag.",
                    "type": "Boolean"
                }
            ],
            "class": "GridComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 34,
            "description": "Creates the sky and the ground if a previous configuration exists.\nTriggered on event `wnp.core.structure.loaded`",
            "itemtype": "method",
            "name": "onStructureLoaded",
            "params": [
                {
                    "name": "event",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 61,
            "description": "Setups the fog in the scene.",
            "itemtype": "method",
            "name": "setupFog",
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 73,
            "description": "Creates the ground and applies the grid material. If the ground already exists,\nit is kept but the material is destroyed and recreated.",
            "itemtype": "method",
            "name": "createGround",
            "params": [
                {
                    "name": "params",
                    "description": "An object which can contain in params.url a ground texture URL.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 139,
            "description": "Creates the sky according to parameter URL.\nIf no URL is specified then the default Skybox is created.\nFor compatibility reason, a skysphere can be generated instead of a skybox.",
            "itemtype": "method",
            "name": "createSky",
            "params": [
                {
                    "name": "params",
                    "description": "params.url can be the URL of an asset to use for the sky creation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 229,
            "description": "Setups the lights in the scene.",
            "itemtype": "method",
            "name": "setupLights",
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 264,
            "description": "Fired to request a save of the history.",
            "itemtype": "event",
            "name": "wnp.request.saveHistory",
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 270,
            "description": "Changes the aspect of the ground.\nTriggered on `wnp.engine3D.changeGround`",
            "itemtype": "method",
            "name": "onChangeGround",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Object"
                }
            ],
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 293,
            "description": "Changes the aspect of the sky.\nTriggered on `wnp.engine3D.changeSky`",
            "itemtype": "method",
            "name": "onChangeSky",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Object"
                }
            ],
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 82,
            "description": "Resets the entire history.",
            "itemtype": "method",
            "name": "reset",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 94,
            "description": "Registers a component so that it can use undo and redo capabilities.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "component",
                    "description": "The involved component.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 104,
            "description": "Saves an action which can be undone or redone.",
            "itemtype": "method",
            "name": "registerAction",
            "params": [
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "undoFunction",
                    "description": "The function called to handle the ctrl-z (undo).\nThis function must have 2 parameters :\n * `target` The target object, can be anything that is concerned by the action\n *  `params` A set of parameters. These will need to be passed as the argument `params` when calling `actionDone`.",
                    "type": "Function"
                },
                {
                    "name": "redoFunction",
                    "description": "The function called to handle the ctrl-y (redo).",
                    "type": "Function"
                },
                {
                    "name": "component",
                    "description": "The involved component. If it wasn't registered first with `register`, it will be done here.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 127,
            "description": "Adds a user action to the history.",
            "itemtype": "method",
            "name": "actionDone",
            "params": [
                {
                    "name": "target",
                    "description": "The target object, can be anything that is concerned by the action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "A set of parameters to pass to the undo/redo functions.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The involved component.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 169,
            "description": "Undoes the last action.",
            "itemtype": "method",
            "name": "controlZ",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 187,
            "description": "Redoes the last action",
            "itemtype": "method",
            "name": "controlY",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 203,
            "description": "Calls the right action when ctrl-z or ctrl-y is pressed.\nTriggered on event `wnp.keyboardManager.keyDown`.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "Event caught.",
                    "type": "Event"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 220,
            "description": "Calls the component's addHistory method.\nTriggered on event `wnp.request.historyAction`.",
            "itemtype": "method",
            "name": "onHistoryActionRequest",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 23,
            "description": "Fired to add a menu item into the top menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.add",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 29,
            "description": "Fired to delete a menu item from the top menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.delete",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 35,
            "description": "Fired to add a menu item into the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.add",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 41,
            "description": "Fired to delete a menu item from the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.delete",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 47,
            "description": "Initializes the component by adding a new entry in the top menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 71,
            "description": "Called when the component is destroyed. The menu item is removed.",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 33,
            "description": "Fired to quit Wanaplan.",
            "itemtype": "event",
            "name": "wnp.request.exit",
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 39,
            "description": "Fired when quitting Wanaplan.",
            "itemtype": "event",
            "name": "wnp.request.exited",
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 45,
            "description": "Exits the plan and redirects the user to the exit url (see api.exitUrl)",
            "itemtype": "method",
            "name": "doExit",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 62,
            "description": "Displays a confirm dialog and exits if the user clicks on exit button.",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 26,
            "description": "Fired when the user clicks on the fullscreen toggle button.",
            "itemtype": "event",
            "name": "wnp.request.toggleFullscreen",
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 65,
            "description": "Toggles fullscreen mode.\nTriggered on `wnp.request.toggleFullscreen`.",
            "itemtype": "method",
            "name": "toggleFullscreen",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 86,
            "description": "Called when the fullscreen mode is changed (on or off) to update the fullscreen button.",
            "itemtype": "method",
            "name": "onFullScreenChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 34,
            "description": "Fired when a new plan needs to be created.",
            "itemtype": "event",
            "name": "wnp.request.newPlan",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 42,
            "description": "Fired when a new plan is ready.",
            "itemtype": "event",
            "name": "wnp.request.newPlanReady",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 48,
            "description": "Fired to close a popup.",
            "itemtype": "event",
            "name": "wnp.request.closePopup",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 54,
            "description": "Creates a new plan.",
            "itemtype": "method",
            "name": "createNewPlan",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 74,
            "description": "Fired to request the save of a structure.",
            "itemtype": "event",
            "name": "wnp.request.saveStructure",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 80,
            "description": "Launches the creation of a new plan. It destroys the previous one, but saves the history.\nTriggered on event `wnp.request.newPlan`",
            "itemtype": "method",
            "name": "launchProcess",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "line": 39,
            "description": "Fired to change the language on wanaplan",
            "itemtype": "event",
            "name": "wnp.request.changeLang",
            "class": "OptionsComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "line": 45,
            "description": "Fired to show the 'About' window",
            "itemtype": "event",
            "name": "wnp.ui.showAboutWindow",
            "class": "OptionsComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js",
            "line": 26,
            "description": "Fired when the user requests a screenshot.",
            "itemtype": "event",
            "name": "wnp.request.takeScreenshot",
            "class": "ScreenshotMenuComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\TransparencyComponent.js",
            "line": 20,
            "description": "Fired when the user requests a change in wall transparency",
            "itemtype": "event",
            "name": "wnp.request.switch-transparency",
            "class": "TransparencyComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\TransparencyComponent.js",
            "line": 72,
            "description": "Fired when disabling wall transparency.",
            "itemtype": "event",
            "name": "wnp.engine3d.wallTransparency.off",
            "class": "TransparencyComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\TransparencyComponent.js",
            "line": 77,
            "description": "Fired when enabling wall transparency.",
            "itemtype": "event",
            "name": "wnp.engine3d.wallTransparency.on",
            "class": "TransparencyComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\TransparencyComponent.js",
            "line": 82,
            "description": "Toggles between opaque/transparent.",
            "itemtype": "method",
            "name": "switchTransparencyMode",
            "class": "TransparencyComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 24,
            "description": "Fired to replace a sub menu item.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.replace",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 41,
            "description": "Fired to lock/unlock the drag action on scene.",
            "itemtype": "event",
            "name": "wnp.component.lock",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 46,
            "description": "Fired to add a menu item into the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.add",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 52,
            "description": "Initializes objects and adds a custom stylesheet.",
            "itemtype": "method",
            "name": "initialize",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 74,
            "description": "Fired to delete a menu item from the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.delete",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 80,
            "description": "Removes the icon from the menu and stops listening to the lock event.",
            "itemtype": "method",
            "name": "destroy",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 89,
            "description": "Toggles lock or unlock.\nTriggered on event `wnp.component.lock`",
            "itemtype": "method",
            "name": "toggleLock",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 104,
            "description": "Determines if the magnetism must be turned off (short circuited). It happens when the user presses CTRL.",
            "itemtype": "method",
            "name": "_shortCircuitMagnetism",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "Mouse state.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns `true` if magnetism should be short circuited, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 120,
            "description": "Applies magnetism on the mouse according to the existing points on the plan.",
            "itemtype": "method",
            "name": "_magFromPoints",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "Mouse state.",
                    "type": "Object"
                },
                {
                    "name": "ignorePoint",
                    "description": "Point to ignore.",
                    "type": "PointStructure",
                    "optional": true
                }
            ],
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 188,
            "description": "Applies magnetism on the mouse to align walls",
            "itemtype": "method",
            "name": "_globalWallMag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wall",
                    "description": "wall to align with",
                    "type": "WallStructure"
                },
                {
                    "name": "mstate",
                    "description": "Mouse state",
                    "type": "Object"
                }
            ],
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 284,
            "description": "Applies magnetism on the mouse according to existing walls on the plan.",
            "itemtype": "method",
            "name": "_magFromWalls",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "Mouse state.",
                    "type": "Object"
                },
                {
                    "name": "wallList",
                    "description": "list of walls to consider for magnetism",
                    "type": "WallStructure[]",
                    "optional": true
                }
            ],
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 130,
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\WorkingMagnetismComponent3D.js",
            "line": 159,
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\WorkingMagnetismComponent3D.js",
            "line": 408,
            "description": "Méthode appelée lorsqu'un changement de context graphique a lieu.",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "Le",
                    "description": "nom du context.",
                    "type": "String"
                }
            ],
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\EditMeasureComponent.js",
            "line": 45,
            "description": "Destroys the measure edition dialog if it exists",
            "itemtype": "method",
            "name": "destroyDialog",
            "class": "EditMeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\EditMeasureComponent.js",
            "line": 57,
            "description": "Destroys the measure edition dialog if click outside the dialog\nTriggered on event click",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditMeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\EditMeasureComponent.js",
            "line": 76,
            "description": "Function to find out which side of the wall we want",
            "itemtype": "method",
            "name": "getSideToMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "angleWall",
                    "description": "the angle of the wall vector p0p1 with the x vector",
                    "type": "Number"
                },
                {
                    "name": "moveLeftUp",
                    "description": "true if we want the point on the left for a horizonal wall, or up for a vertical one",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns 0 or 1 the index of the wanted extremity",
                "type": "Integer"
            },
            "class": "EditMeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\EditMeasureComponent.js",
            "line": 119,
            "description": "Function that applies the chosen displacement to the chosen measure extremity",
            "itemtype": "method",
            "name": "displacePoint",
            "params": [
                {
                    "name": "target_measure",
                    "description": "measure to modify",
                    "type": "MeasureStructure"
                },
                {
                    "name": "displacement",
                    "description": "amount of displacement to apply (positive or negative)",
                    "type": "Number"
                },
                {
                    "name": "angleWall",
                    "description": "the angle of the wall vector with the x horizontal vector",
                    "type": "Number"
                },
                {
                    "name": "moveLeftUp",
                    "description": "true if we want to move the point that is on the left for a horizonal measure, or on top for a vertical one",
                    "type": "Boolean"
                }
            ],
            "class": "EditMeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\EditMeasureComponent.js",
            "line": 213,
            "description": "Opens the measure edition dialog\nTriggered on event dblclick",
            "itemtype": "method",
            "name": "onDblClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditMeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 92,
            "description": "Merges the measures that can be merged (aligned and touching each other)",
            "itemtype": "method",
            "name": "mergeMeasures",
            "params": [
                {
                    "name": "measures",
                    "description": "Set of measures to merge.",
                    "type": "MeasureStructure[]"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 116,
            "description": "Draws the measure on the wall currently being drawn.",
            "itemtype": "method",
            "name": "drawTmpWallMesure",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 144,
            "description": "Draws all measures on the canvas.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 196,
            "description": "Draws the measure of the distance between two points.",
            "itemtype": "method",
            "name": "_drawMeasureSlice",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                },
                {
                    "name": "v1",
                    "description": "Origin point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "v2",
                    "description": "Ending point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The rounded value of the measure (in meters).",
                "type": "Number"
            },
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 219,
            "description": "Adds the overtures measures to the existing wall measures.",
            "itemtype": "method",
            "name": "_addOvertureIntersections",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wall",
                    "description": "Wall carrying the overtures.",
                    "type": "WallStructure"
                },
                {
                    "name": "intersections",
                    "description": "Current wall measure `points` list.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 22,
            "description": "Contains all the points where to split the measure, ordered by increasing distance to points[0].",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 30,
            "description": "Parent wall inducing the measure.",
            "itemtype": "property",
            "name": "parent",
            "type": "{WallStructure}",
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 38,
            "description": "Normalized vector indicating in which direction to offset the display of the measure in relation to the wall.",
            "itemtype": "property",
            "name": "offsetVector",
            "type": "{BABYLON.Vector2}",
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 48,
            "description": "Returns the center of the measure.",
            "itemtype": "method",
            "name": "center",
            "return": {
                "description": "The center.",
                "type": "BABYLON.Vector2"
            },
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 58,
            "description": "Returns a normal vector to the measure.\nNB : The direction of this vector is away from the wall carrying the measure.",
            "itemtype": "method",
            "name": "normal",
            "return": {
                "description": "The normal vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 69,
            "description": "Tries to merge this measure with another measure.\nOnly merges if the measures are aligned and touch each other.",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "measure",
                    "description": "Another measure.",
                    "type": "MeasureStructure"
                }
            ],
            "return": {
                "description": "True if the measure has been merged, false otherwise.",
                "type": "Boolean"
            },
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 130,
            "description": "Tries to merge this measure with a set of measures.",
            "itemtype": "method",
            "name": "mergeMeasures",
            "params": [
                {
                    "name": "measures",
                    "description": "An array of measures.",
                    "type": "MeasureStructure[]"
                }
            ],
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MenuComponents\\TopMenuComponent.js",
            "line": 2,
            "description": "translation hack\n_(\"Capture\") _(\"New\") _(\"Save\") _(\"Options\") _(\"Change language\") _(\"Full Screen\")",
            "class": "MobileComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 63,
            "description": "Disables/Removes some unecessary components and applies the mobile configuration.",
            "itemtype": "method",
            "name": "initialize",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 95,
            "description": "Fired to add a menu item into the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.add",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 101,
            "description": "Fired to replace a sub menu item.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.replace",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 107,
            "description": "Fired to show/hide the left menu on mobile devices",
            "itemtype": "event",
            "name": "wnp.mobile.toggleMenu",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 113,
            "description": "Applies configuration for mobile (graphics, performances). This method is called after all components are initialized.\nTriggered on event `wnp.core.initialized`",
            "itemtype": "method",
            "name": "onCoreInitialized",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 201,
            "description": "Toggle the visibility of the left menu.\nTriggered on event `wnp.mobile.toggleMenu`",
            "itemtype": "method",
            "name": "_toggleMenu",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 29,
            "description": "Destroys the component and removes all listeners.",
            "itemtype": "method",
            "name": "destroy",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 37,
            "description": "Binds the listeners for input events",
            "itemtype": "method",
            "name": "_bindListeners",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 51,
            "description": "Unbinds the listeners for input events",
            "itemtype": "method",
            "name": "_unbindListeners.",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 65,
            "description": "Called when an input event is detected. It disables the input method that is not necessary (touch or mouse).\nTriggered on window events `touchstart`, `mousemove`, `pointerdown`, or `MSPointerDown`",
            "itemtype": "method",
            "name": "_onInputChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 99,
            "description": "Removes support of an input method (touch or mouse).",
            "itemtype": "method",
            "name": "removeInputSupport",
            "params": [
                {
                    "name": "type",
                    "description": "The type of input method to remove (touch or mouse).",
                    "type": "String"
                }
            ],
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "LargeHolyColliderDebuger",
                "OctreePartitionerFactory"
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "ObjectHelper"
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "line": 583,
            "description": "// empiric proof\nvar dimension = new Point( Math.random() , Math.random() , Math.random() )\ndimension.normalize()\nvar s = computePropPath( 1000 , dimension )\nvar prob = new Point(\n    ( s.split('x').length-1 )/1000,\n    ( s.split('y').length-1 )/1000,\n    ( s.split('z').length-1 )/1000\n)\nprob.normalize()\nconsole.log( dimension )\nconsole.log( prob )",
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 21,
            "description": "Tests the browser WebGL capabilities and redirects the user to the suitable page.",
            "itemtype": "method",
            "name": "checkBrowserCapability",
            "return": {
                "description": "True if the browser supports Wanaplan, false if it does not.",
                "type": "Boolean"
            },
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 59,
            "description": "Gets the url of a pedago page.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getPageURL",
            "params": [
                {
                    "name": "page",
                    "description": "The page.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the complete url of the page.",
                "type": "String"
            },
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 70,
            "description": "Redirects the browser to a page.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "redirectToPage",
            "params": [
                {
                    "name": "page",
                    "description": "The page.",
                    "type": "String"
                }
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 99,
            "description": "Changes the hardware scaling by reducing the backbuffer size (canvas internal size).",
            "itemtype": "method",
            "name": "setHardwareScalingLevel",
            "params": [
                {
                    "name": "level",
                    "description": "The level of scaling to apply, default is 1, use power of two.",
                    "type": "Number"
                }
            ],
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 115,
            "description": "Resize callback which sets the correct values on render canvas.\nTriggered on `resize`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onResize",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMLoadComponent.js",
            "line": 17,
            "description": "Initialize the component by trying to load a plan by its uuid.",
            "itemtype": "method",
            "name": "initialize",
            "class": "DGM_LoadComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMLoadComponent.js",
            "line": 33,
            "description": "Try to load a plan by its uuid. The component is destroyed",
            "itemtype": "method",
            "name": "tryLoadPlan",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "DGM_LoadComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMSaveComponent.js",
            "line": 18,
            "description": "Initialize the component.",
            "itemtype": "method",
            "name": "initialize",
            "class": "DGM_SaveComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMSaveComponent.js",
            "line": 26,
            "description": "Send informations to the application using a WebSocket.",
            "itemtype": "method",
            "name": "sendToApplication",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "DGM_SaveComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 22,
            "description": "Initializes the component.",
            "itemtype": "method",
            "name": "initialize",
            "class": "DGM_ZoomComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 36,
            "description": "Starts the event listeners.",
            "itemtype": "method",
            "name": "startListening",
            "class": "DGM_ZoomComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 52,
            "description": "Stop the event listeners.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "DGM_ZoomComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 68,
            "description": "Enabled or disable the mouse support.",
            "itemtype": "method",
            "name": "setMouseEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "Set to `true` to enable the mouse support, otherwise set it to `false`.",
                    "type": "Boolean"
                }
            ],
            "class": "DGM_ZoomComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 86,
            "description": "Sets the zoom factor.",
            "itemtype": "method",
            "name": "setZoomFactor",
            "params": [
                {
                    "name": "zoomFactor",
                    "description": "The desired zoom factor.",
                    "type": "Number"
                }
            ],
            "class": "DGM_ZoomComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 97,
            "description": "Gets the zoom factor.",
            "itemtype": "method",
            "name": "getZoomFactor",
            "return": {
                "description": "Returns the zoom factor.",
                "type": "Number"
            },
            "class": "DGM_ZoomComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\Assets\\DGMZoomComponent.js",
            "line": 106,
            "description": "Called on a double tap/dougle click event. It increases or decreases the zoom.",
            "itemtype": "method",
            "name": "_onDoubleTap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Object"
                }
            ],
            "class": "DGM_ZoomComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 29,
            "description": "Initialize the component.",
            "itemtype": "method",
            "name": "initialize",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 46,
            "description": "Destroy the component.",
            "itemtype": "method",
            "name": "destroy",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 57,
            "description": "Update the the component. The internal timer is updated and a check\nis done if needed.",
            "itemtype": "method",
            "name": "update",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 74,
            "description": "Check if the browser is online or offline by sending an Ajax request.\nIf the browser is online then a `wnp.standalone.online` event is triggered.\nOtherwise a `wnp.standalone.offline` event is triggered.",
            "itemtype": "method",
            "name": "checkOnline",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 92,
            "description": "Handler used by the `checkOnline` method to send a `wnp.standalone.connectionChanged` event.",
            "itemtype": "method",
            "name": "_online",
            "access": "private",
            "tagname": "",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 104,
            "description": "Handler used by the `checkOnline` method to send a `wnp.standalone.connectionChanged` event.",
            "itemtype": "method",
            "name": "_offline",
            "access": "private",
            "tagname": "",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 116,
            "description": "Handler called when the browser status is set to `online` from its menu.",
            "itemtype": "method",
            "name": "_onOnlineHandler",
            "access": "private",
            "tagname": "",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 125,
            "description": "Handler called when the browser status is set to `offline` from its menu.",
            "itemtype": "method",
            "name": "_onOfflineHandler",
            "access": "private",
            "tagname": "",
            "class": "SA_ConnectionStatusDetector",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_ConnectionStatusDetector.js",
            "line": 146,
            "description": "Update the timer.",
            "itemtype": "method",
            "name": "update",
            "class": "SA_Timer",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 37,
            "description": "Initialize the manager. If the object store doesn't exists then it's created.\nThe success callback is called when all operations are done.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "success",
                    "description": "A function called when the manager is ready.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called when an error occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_DatabaseManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 65,
            "description": "Indicates whether IndexedDB is available or not in the user's browser.",
            "itemtype": "method",
            "name": "isAvailable",
            "return": {
                "description": "Returns `true` if available otherwise it returns `false`.",
                "type": "Boolean"
            },
            "class": "SA_DatabaseManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 74,
            "description": "Save a plan into the database. The plan's id is updated. The structure of the object stored is:\n- id {Number} If it isn't set then a new record is created otherwise it's updated.\n- name {String} The plan's name.\n- structure {String} A serialized string of the structure.\n- screenshot {String} A base64 string.",
            "itemtype": "method",
            "name": "saveItem",
            "params": [
                {
                    "name": "plan",
                    "description": "The plan to save.",
                    "type": "Object"
                },
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called when an error occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_DatabaseManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 96,
            "description": "Load a structure of the specified plan.",
            "itemtype": "method",
            "name": "loadItem",
            "params": [
                {
                    "name": "id",
                    "description": "The plan's id",
                    "type": "Number"
                },
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called when an error occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_DatabaseManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 117,
            "description": "Loads all plans from the database without their structures (id, name, screenshot).\nIf you want to load structures too then you need to set the `complete` parameter to `true`.\nAn array of plans objects is available in the first callback parameter.",
            "itemtype": "method",
            "name": "loadItems",
            "params": [
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called when an error occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_DatabaseManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 151,
            "description": "Remove a plan from the database.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "id",
                    "description": "The plan's id to delete.",
                    "type": "Number"
                },
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called when an error occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_DatabaseManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_DatabaseManager.js",
            "line": 166,
            "description": "Clear all plans from the database.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called when an error occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_DatabaseManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_NewComponent.js",
            "line": 32,
            "description": "Initialize the component.",
            "itemtype": "method",
            "name": "intialize",
            "class": "SA_NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_NewComponent.js",
            "line": 41,
            "description": "Clean the workspace and create a new plan.",
            "methode": "_launchProcess",
            "access": "private",
            "tagname": "",
            "class": "SA_NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_StorageManager.js",
            "line": 66,
            "description": "Load a plan by its uuid.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "uuid",
                    "description": "The uuid of the plan to load.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "A function called when the plan is loaded.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the plan is not found.",
                    "type": "Function"
                }
            ],
            "class": "SA_StorageManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_StorageManager.js",
            "line": 97,
            "description": "Save the current plan into the database.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "event",
                    "description": "The object event.",
                    "type": "Event"
                },
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "cancel",
                    "description": "A function called if the user don't want create a new plan.",
                    "type": "Function"
                }
            ],
            "class": "SA_StorageManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_StorageManager.js",
            "line": 186,
            "description": "Save the plan.",
            "itemtype": "method",
            "name": "internalSave",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "showMessage",
                    "description": "Sets to `true` to show a confirm message.",
                    "type": "Boolean"
                }
            ],
            "class": "SA_StorageManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_StorageManager.js",
            "line": 208,
            "description": "Load and display saved plans.",
            "itemtype": "method",
            "name": "_loadPlans",
            "access": "private",
            "tagname": "",
            "class": "SA_StorageManager",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_WebService.js",
            "line": 35,
            "description": "Save plans on the server.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "plans",
                    "description": "An array of plans.",
                    "type": "Array"
                },
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called if an error has occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_WebService",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\SA_WebService.js",
            "line": 78,
            "description": "Checks if the user is connected and send a plan to the server.",
            "itemtype": "method",
            "name": "_sendToServer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "plan",
                    "description": "The plan to send.",
                    "type": "Object"
                },
                {
                    "name": "success",
                    "description": "A function called when the process is done.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A function called if an error has occured.",
                    "type": "Function"
                }
            ],
            "class": "SA_WebService",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\StandaloneComponent\\StandaloneComponent.js",
            "line": 27,
            "description": "Initialize the component and hide the furnishing icon.",
            "itemtype": "method",
            "name": "initialize",
            "class": "StandaloneComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 26,
            "description": "Component name",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 34,
            "description": "Structure file instance (shortcut to wanaplan.structure).\nThis is the base object where the whole plan is saved",
            "itemtype": "property",
            "name": "structure",
            "type": "wnp.Structure",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 51,
            "description": "Priority of the component in the \"update\" and \"draw\" routines",
            "itemtype": "property",
            "name": "priority",
            "type": "Number",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 73,
            "description": "Method called when Wanaplan is initialized.\nYou don't need to call this method manually.",
            "itemtype": "method",
            "name": "initialize",
            "abstract": "",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 82,
            "description": "Calls all the event listeners.",
            "itemtype": "method",
            "name": "startListening",
            "abstract": "",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 89,
            "description": "Removes all the event listeners.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 95,
            "description": "Method called when the context is switched (2D -> 3D or 3D -> 2D)",
            "itemtype": "method",
            "name": "onContextChanged",
            "abstract": "",
            "params": [
                {
                    "name": "context",
                    "description": "The new context",
                    "type": "String"
                }
            ],
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 111,
            "description": "Disables the component",
            "itemtype": "method",
            "name": "disable",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 122,
            "description": "Enables the component",
            "itemtype": "method",
            "name": "enable",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 132,
            "description": "Finds out if the given position is over an element handled by the component",
            "itemtype": "method",
            "name": "getTargeted",
            "abstract": "",
            "params": [
                {
                    "name": "vector",
                    "description": "A position, usually the cursor's one.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The targeted element, or null if nothing is found.",
                "type": "Object"
            },
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 146,
            "description": "Generic update method, called on every frame",
            "abstract": "",
            "itemtype": "method",
            "name": "update",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 167,
            "description": "Method called when the component is destroyed",
            "abstract": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 33,
            "description": "Name of the component.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 41,
            "description": "Instance of the structure (shortcut to wanaplan.structure).",
            "itemtype": "property",
            "name": "structure",
            "type": "wnp.Structure",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 49,
            "description": "Instance of the Keyboard Manager (shortcut to wanaplan.keyboardManager).",
            "itemtype": "property",
            "name": "keyboardManager",
            "type": "wnp.KeyboardManager",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 129,
            "description": "Method called when Wanaplan is initialized.\nYou don't need to call this method manually.",
            "itemtype": "method",
            "name": "initialize",
            "abstract": "",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 139,
            "description": "Calls all the event listeners.",
            "itemtype": "method",
            "name": "startListening",
            "abstract": "",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 148,
            "description": "Removes all the event listeners.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 156,
            "description": "Method called when the context is switched (2D -> 3D or 3D -> 2D)",
            "itemtype": "method",
            "name": "onContextChanged",
            "abstract": "",
            "params": [
                {
                    "name": "context",
                    "description": "The new context",
                    "type": "String"
                }
            ],
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 172,
            "description": "Disables the component",
            "itemtype": "method",
            "name": "disable",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 182,
            "description": "Enables the component",
            "itemtype": "method",
            "name": "enable",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 192,
            "description": "Updates the dynamic part of the component.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "The time interval.",
                    "type": "Number"
                }
            ],
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 203,
            "description": "Recompute of the component.",
            "itemtype": "method",
            "name": "compute",
            "access": "private",
            "tagname": "",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 222,
            "description": "Gets the 3D mesh of the floor structure in parameter (by default current floor).",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "The floor mesh in 3D.",
                "type": "BABYLON.Mesh"
            },
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 248,
            "description": "Destructor.",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 18,
            "description": "Unique ID for the structure set up automatically",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 26,
            "description": "Structure name",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 35,
            "description": "Adds an element to the collection in parameter.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "propertyName",
                    "description": "Name of the dictionnary.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value to distribute.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Returns true if the value is added else returns false."
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 63,
            "description": "Method called after the loading of the component",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 72,
            "description": "Generic update method, must be overridden.",
            "itemtype": "method",
            "name": "update",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 81,
            "description": "Serializes the object (to JSON)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 90,
            "description": "Deserializes the object (from JSON). This method is the static version of `deserialize`,\nit creates an object.",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 102,
            "description": "Deserializes the object (from JSON).",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 113,
            "description": "Generic method for rebuilding references after the deserialization.\nFor example : restoring the link between a PointStructure and its parent WallStructure",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "Floor Structure to work with",
                    "type": "wnp.Structure"
                }
            ],
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 124,
            "description": "Gets an element of the collection by its name.",
            "itemtype": "method",
            "name": "getElementByName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the element to search.",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The name of the collection in which we want to search. If this parameter is not defined,\n                the search is done in all the collection of type array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the needed element if it exists, else returns null.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 167,
            "description": "Gets the floor referencing this object",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "collection",
                    "description": "Collection to search within.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection.",
                "type": "FloorStructure"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\GeneralOptionComponent2D.js",
            "line": 1,
            "class": "API.e2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 17,
            "description": "Registers a callback for a specific event.",
            "itemtype": "method",
            "name": "registerEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "A unique identifier for this event (ex: \"coreComponentWallClick\").",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "The priority for this event (defines callback call order).",
                    "type": "Number"
                },
                {
                    "name": "evName",
                    "description": "The event name associated to the callback.",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "Mode in which the event will be active (ex: `Core.MODE_NORMAL|Core.MODE_DRAG`).",
                    "type": "Number"
                },
                {
                    "name": "objType",
                    "description": "The type of object that must be targeted, or `null`.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call.",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "Data passed to the callback.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 33,
            "description": "Unregisters a callback for a specific event.",
            "itemtype": "method",
            "name": "unregisterEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier of the callback to remove.",
                    "type": "String"
                }
            ],
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 43,
            "description": "Returns the symbols2D class for drawing things on the canvas.",
            "itemtype": "method",
            "name": "getSymbols2D",
            "return": {
                "description": "The symbols2D class",
                "type": "Object"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 53,
            "description": "Returns the level of zoom currently applied to the canvas.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The zoom, also called scale.",
                "type": "Number"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 63,
            "description": "Returns the translation applied to the canvas.",
            "itemtype": "method",
            "name": "getTranslation",
            "return": {
                "description": "The translation (x, y).",
                "type": "BABYLON.Vector2"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 73,
            "description": "Sets the zoom to apply to the canvas.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The zoom, also called scale.",
                    "type": "Number"
                }
            ],
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 83,
            "description": "Sets the translation to apply to the canvas.",
            "itemtype": "method",
            "name": "setTranslation",
            "params": [
                {
                    "name": "translation",
                    "description": "The translation (x, y).",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 93,
            "description": "Transforms a vector from 2D plan coordinates to canvas coordinates.",
            "itemtype": "method",
            "name": "toRealCoord",
            "params": [
                {
                    "name": "vector",
                    "description": "Plan coordinates.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "translation",
                    "description": "Translation applied on the canvas.",
                    "type": "BABYLON.Vector2",
                    "optional": true
                },
                {
                    "name": "zoom",
                    "description": "Zoom applied on the canvas.",
                    "type": "BABYLON.Vector2",
                    "optional": true
                }
            ],
            "return": {
                "description": "The vector transformed to canvas coordinates.",
                "type": "BABYLON.Vector2"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 106,
            "description": "Returns the mouse position in the 2D plan coordinates.\nIt will give you unexploitable results in 3D.",
            "itemtype": "method",
            "name": "getMousePos",
            "return": {
                "description": "The mouse position",
                "type": "BABYLON.Vector2"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 117,
            "description": "Returns the nearest wall from the mouse position.",
            "itemtype": "method",
            "name": "getNearestWallFromMousePos",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor for which to consider the walls",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The nearest wall among those of the chosen floor",
                "type": "WallStructure"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 130,
            "description": "Requests a redraw of the bottom \"static\" canvas at the next frame.\nThe bottom canvas is used to draw things that don't usually need redrawing\nwhen the mouse moves, like the walls, the rooms, the grid etc...\nNB : The top \"dynamic\" canvas will also be redrawn",
            "itemtype": "method",
            "name": "requestStaticDraw",
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 142,
            "description": "Requests a redraw of the top \"dynamic\" canvas at the next frame.\nThe top canvas is used to draw things that may need refreshing when the mouse moves.\nTypically, it is the symbols displayed when the mouse hovers something.",
            "itemtype": "method",
            "name": "requestDynamicDraw",
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 153,
            "description": "Changes the precision angle of the magnetism.",
            "itemtype": "method",
            "name": "setMagnetismAnglePrecision",
            "params": [
                {
                    "name": "precision",
                    "description": "The new precision (in radians)",
                    "type": "Float"
                }
            ],
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 163,
            "description": "Returns a set of colors used to display several things in 2D.",
            "itemtype": "method",
            "name": "getColorConstants",
            "return": {
                "description": "Set of labeled colors",
                "type": "Object"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 173,
            "description": "Gets the 2D static `canvas`.",
            "itemtype": "method",
            "name": "getStaticCanvas",
            "return": {
                "description": "the static canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e2D.js",
            "line": 183,
            "description": "Gets the 2D dynamic `canvas`.",
            "itemtype": "method",
            "name": "getDynamicCanvas",
            "return": {
                "description": "the dynamic canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "API.e2D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 19,
            "itemtype": "property",
            "name": "CAMERALOCK",
            "type": "{Number}",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 25,
            "itemtype": "property",
            "name": "DRAGLOCK",
            "type": "{Number}",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 31,
            "itemtype": "property",
            "name": "KEYBOARDLOCK",
            "type": "{Number}",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 37,
            "itemtype": "property",
            "name": "CAMERATRANSLATIONLOCK",
            "type": "{Number}",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 43,
            "itemtype": "property",
            "name": "ORBITCAMERA",
            "type": "{Number}",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 49,
            "itemtype": "property",
            "name": "FPSCAMERA",
            "type": "{Number}",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 56,
            "description": "Gets the 3D render `canvas` used by the 3D view.",
            "itemtype": "method",
            "name": "getCanvas",
            "return": {
                "description": "the 3D canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 66,
            "description": "Returns the current scene",
            "itemtype": "method",
            "name": "getScene",
            "return": {
                "description": "The current 3D scene",
                "type": "BABYLON.Scene"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 76,
            "description": "Returns the active camera of the 3D scene",
            "itemtype": "method",
            "name": "getCamera",
            "return": {
                "description": "The active camera",
                "type": "BABYLON.Camera"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 86,
            "description": "Fired when the user changes the camera.",
            "itemtype": "event",
            "name": "wnp.engine3D.cameraChanged",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 92,
            "description": "Switches camera (between first person and orbit)",
            "itemtype": "method",
            "name": "switchCamera",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 104,
            "description": "Returns an object containing some useful features to interact with the camera.\nSee wnp.CameraFeatures documentation for a detailed review of all features.",
            "itemtype": "method",
            "name": "getCameraFeatures",
            "return": {
                "description": "The camera features",
                "type": "wnp.CameraFeatures"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 115,
            "description": "Switches the type of the camera according to a given Id.",
            "itemtype": "method",
            "name": "setCameraById",
            "params": [
                {
                    "name": "cameraId",
                    "description": "Must be API.e3D.ORBITCAMERA or API.e3D.FPSCAMERA, depending on the desired camera",
                    "type": "Number"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 131,
            "description": "Gets the active camera's Id.",
            "itemtype": "method",
            "name": "getCameraId",
            "return": {
                "description": "The current camera Id",
                "type": "Number"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 141,
            "description": "Gets all meshes in the scene",
            "itemtype": "method",
            "name": "getMeshes",
            "return": {
                "description": "An array of all meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 151,
            "description": "Gets the mesh of the room for the active floor.",
            "itemtype": "method",
            "name": "getRoomMesh",
            "return": {
                "description": "The room as a 3D mesh.",
                "type": "BABYLON.Mesh"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 161,
            "description": "Sets the default material for the floor of the room",
            "itemtype": "method",
            "name": "setRoomFloorMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "BABYLON.Material"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 172,
            "description": "Sets the default material for the ceiling of the room",
            "itemtype": "method",
            "name": "setRoomCeilingMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "BABYLON.Material"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 183,
            "description": "Gets all top-level meshes of the scene (the parent of which is directly the floor, or a group)",
            "itemtype": "method",
            "name": "getTopLevelMeshes",
            "return": {
                "description": "An array of all top-level 3D meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 203,
            "description": "Gets information on the mesh picked by the given mouse position.\nThe picking information contains :\n- bu, bv : Information on the uv of the picked mesh\n- distance : The distance from the camera to the picked point\n- faceId : The face id of the mesh\n- hit : If it hit a mesh or not\n- pickedMesh : The collided mesh\n- pickedPoint : The point on the collided mesh\n- pickedSubMeshIndex : The index of the submesh",
            "itemtype": "method",
            "name": "getPickingInfo",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The collision information.",
                "type": "BABYLON.PickingInfo"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 222,
            "description": "Gets the instance of the object picked by the given mouse position.",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The instance of the mesh.",
                "type": "wnp.BaseStructure"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 236,
            "description": "Gets the material of the object picked by the given mouse position.",
            "itemtype": "method",
            "name": "getMaterialFromMousePosition",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The material of the selected mesh.",
                "type": "BABYLON.Material"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 248,
            "description": "Fired when an object is refreshed and if the history is needed.",
            "itemtype": "event",
            "name": "wnp.request.historyAction",
            "params": [
                {
                    "name": "component",
                    "description": "The component of the action",
                    "type": "BaseComponent3D"
                },
                {
                    "name": "object",
                    "description": "The target.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "params",
                    "description": "Params of the history.",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The type of action done.",
                    "type": "String"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 258,
            "description": "Sets the material of the object picked by the given mouse position.",
            "itemtype": "method",
            "name": "setMaterialFromMousePosition",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "BABYLON.Material"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 288,
            "description": "Gets all handleable objects in the scene",
            "itemtype": "method",
            "name": "getObjects",
            "return": {
                "description": "An array of all 3D handleable meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 307,
            "description": "Searches for a mesh by its name.",
            "itemtype": "method",
            "name": "getMeshByName",
            "return": {
                "description": "The mesh if found, null if not.",
                "type": "BABYLON.Mesh"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 317,
            "description": "Returns the directional light acting as the sun",
            "itemtype": "method",
            "name": "getSunlight",
            "return": {
                "description": "The sun",
                "type": "BABYLON.DirectionalLight"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 327,
            "description": "Returns the spheric mesh acting as the sky",
            "itemtype": "method",
            "name": "getSkySphere",
            "return": {
                "description": "The sky",
                "type": "BABYLON.Mesh"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 337,
            "description": "Returns the cubic mesh acting as the ground.",
            "itemtype": "method",
            "name": "getGround",
            "return": {
                "description": "The ground",
                "type": "BABYLON.Mesh"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 347,
            "description": "Projects a screen position (by default the mouse position) on a 3D plane.",
            "itemtype": "method",
            "name": "projectOnPlane",
            "params": [
                {
                    "name": "plane",
                    "description": "The 3D plane",
                    "type": "BABYLON.Plane"
                },
                {
                    "name": "x",
                    "description": "The x coordinate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The y coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The projected point",
                "type": "BABYLON.Vector3"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 360,
            "description": "Casts the shadows induced by the given mesh.\nBeware, this is an expensive feature, performance may be altered.",
            "itemtype": "method",
            "name": "castShadows",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 371,
            "description": "Disables the casting of shadows by this mesh",
            "itemtype": "method",
            "name": "uncastShadows",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 397,
            "description": "Adds a widget with the url and the name of the widget.\nImportant widget function.",
            "itemtype": "method",
            "name": "addWidget",
            "params": [
                {
                    "name": "path",
                    "description": "The url of the widget.",
                    "type": "String"
                },
                {
                    "name": "widgetName",
                    "description": "The name of widget.",
                    "type": "String"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 420,
            "description": "Adds an object to a group.",
            "itemtype": "method",
            "name": "addToGroup",
            "params": [
                {
                    "name": "object",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "group",
                    "description": "A group, an object or null.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "isHistoryAction",
                    "description": "Add to the history or not.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new group.",
                "type": "BABYLON.Mesh"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 433,
            "description": "Deselects any selected object and sets the currently selected object to null.",
            "itemtype": "method",
            "name": "deselectObject",
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 442,
            "description": "Gets the currently selected object",
            "itemtype": "method",
            "name": "getSelectedObject",
            "return": {
                "description": "The currently selected object.",
                "type": "BABYLON.Mesh"
            },
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 452,
            "description": "Sets an object as the currently selected object.",
            "itemtype": "method",
            "name": "selectObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object to select.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 462,
            "description": "Disables behaviors.",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "key",
                    "description": "Can be anything, is registered as key for the lock, the action will be unlocked only with the same key",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "Actions to lock among : CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8; Default is all flags on.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.e3D.js",
            "line": 473,
            "description": "Re-enables locked behaviors.",
            "itemtype": "method",
            "name": "unlock",
            "params": [
                {
                    "name": "key",
                    "description": "Key that was used to lock actions",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "Actions to unlock among: CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8; Default is all flags on.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "API.e3D",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.html.js",
            "line": 17,
            "description": "Loads and adds an `HTMLElement` to the document.",
            "itemtype": "method",
            "name": "addHTML",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the HTML element to load.",
                    "type": "String"
                },
                {
                    "name": "domElement",
                    "description": "An instance of a DOM element.",
                    "type": "HTMLElement"
                },
                {
                    "name": "success",
                    "description": "A function called if the operation is completed successfully.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation fails.",
                    "type": "Function"
                }
            ],
            "class": "API.html",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.html.js",
            "line": 30,
            "description": "Loads a script in the document.",
            "itemtype": "method",
            "name": "addScript",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the script to load.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "A function called if the operation is completed successfully.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation fails.",
                    "type": "Function"
                }
            ],
            "class": "API.html",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.html.js",
            "line": 42,
            "description": "Loads a collection of scripts. Here are two methods to load scripts.\n1. A simple array of urls [ \"script.js\", \"script2.js\" ]\n2. An array of dictionaries [ { MyObject: \"myObjectScript.js\" } ]. In this case the function will test if the script is already loaded\n   by using the key of the dictionary as object name.",
            "itemtype": "method",
            "name": "addScripts",
            "params": [
                {
                    "name": "scripts",
                    "description": "An array of urls or an array of dictionaries as described above",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "successCallback",
                    "description": "A function to call when the script is loaded successfully.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "A function to call if the process fails.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "interval",
                    "description": "Time to wait when checking all is loaded in the end.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "API.html",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.html.js",
            "line": 59,
            "description": "Adds a CSS stylesheet to the document.",
            "itemtype": "method",
            "name": "addCSS",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the css file to load.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "A function called if the operation is completed successfully.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation fails.",
                    "type": "Function"
                }
            ],
            "class": "API.html",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 23,
            "itemtype": "property",
            "name": "CONTEXT_2D",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 29,
            "itemtype": "property",
            "name": "CONTEXT_3D",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 35,
            "itemtype": "property",
            "name": "MODE_2D_NORMAL",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 40,
            "itemtype": "property",
            "name": "MODE_2D_DRAG",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 45,
            "itemtype": "property",
            "name": "MODE_2D_DRAW",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 50,
            "itemtype": "property",
            "name": "MODE_2D_CONTEXTMENU",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 55,
            "itemtype": "property",
            "name": "MODE_2D_SUBSLOPE",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 61,
            "itemtype": "property",
            "name": "MODE_3D_NORMAL",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 66,
            "itemtype": "property",
            "name": "MODE_3D_PAINT",
            "type": "{Number}",
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 73,
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 75,
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 77,
            "description": "Sends an event to all listeners.",
            "itemtype": "method",
            "name": "notify",
            "static": 1,
            "params": [
                {
                    "name": "eventName",
                    "description": "The event's name.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "An object that contains parameters to send to listeners.",
                    "type": "Object"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 89,
            "description": "Creates a new plan.",
            "itemtype": "method",
            "name": "createNewPlan",
            "static": 1,
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 111,
            "itemtype": "method",
            "name": "isViewer",
            "return": {
                "description": "Returns true if wanaplan is in viewer mode, otherwise it returns false.",
                "type": "Boolean"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 122,
            "description": "Sets the context, 2D or 3D",
            "itemtype": "method",
            "name": "setContext",
            "params": [
                {
                    "name": "context",
                    "description": "Must be API.CONTEXT_2D for 2D or API.CONTEXT_3D for 3D",
                    "type": "Number"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 132,
            "description": "Gets the context, 2D or 3D",
            "itemtype": "method",
            "name": "getContext",
            "return": {
                "description": "Returns 1 for the 2D engine and 2 for the 3D engine.",
                "type": "Number"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 142,
            "description": "Gets the mode for a given context",
            "itemtype": "method",
            "name": "getMode",
            "params": [
                {
                    "name": "_context",
                    "description": "The context, must be API.CONTEXT_2D for 2D or API.CONTEXT_3D for 3D. Default is the currently selected context.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current mode of the given context",
                "type": "Number"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 158,
            "description": "Returns the version of the currently opened plan.",
            "itemtype": "method",
            "name": "getVersion",
            "return": {
                "description": "The stringified version : \"X.x.x.x\"",
                "type": "String"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 168,
            "description": "Compares two stringified versions.",
            "itemtype": "method",
            "name": "compareVersion",
            "params": [
                {
                    "name": "versionA",
                    "description": "The first version.",
                    "type": "String"
                },
                {
                    "name": "versionB",
                    "description": "The second version.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns -1 if versionA is older than versionB.\n                 Returns 0 if versionA is the same as versionB.\n                 Returns 1 if versionA is newer than versionB.",
                "type": "Number"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 182,
            "description": "Returns a loaded component",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the component",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "The context where the component is (API.CONTEXT_2D or API.CONTEXT_3D).",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A wanaplan or custom component, loaded in the 2D or in the 3D engine.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 208,
            "description": "Returns the keyboard manager",
            "itemtype": "method",
            "name": "getKeyboardManager",
            "return": {
                "description": "Wanaplan's keyboard manager.",
                "type": "wnp.KeyboardManager"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 218,
            "description": "Sets the mode for a given context",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "name",
                    "description": "Must be one of the following :\n                - for 2D : API.MODE_2D_NORMAL, API.MODE_2D_DRAG, API.MODE_2D_DRAW, API.MODE_2D_CONTEXTMENU, API.MODE_2D_SUBSLOPE\n                - for 3D : API.MODE_3D_NORMAL, API.MODE_3D_PAINT",
                    "type": "String"
                },
                {
                    "name": "_context",
                    "description": "The context, 2D or 3D. Default is the currently selected context.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 241,
            "description": "Resizes the display window.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The new width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new height.",
                    "type": "Number"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 252,
            "description": "Returns custom data from the storage.\nThis data is serialized along with the plan",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "field",
                    "description": "The name of your data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The raw data",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 264,
            "description": "Pushes custom data to the storage.\nThis data is serialized along with the plan",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "field",
                    "description": "The name of your data",
                    "type": "Object"
                },
                {
                    "name": "content",
                    "description": "An Array or Object where you store your own data structure",
                    "type": "Object"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 276,
            "description": "Returns stored global custom data.",
            "itemtype": "method",
            "name": "getGlobalData",
            "params": [
                {
                    "name": "key",
                    "description": "The key to identify the data.",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "The default returned value.",
                    "type": "String|Number|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the data if it exists, otherwise it returns `defaultValue`.",
                "type": "String|Number|Boolean"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 287,
            "description": "Sets global custom data. The previous data is overriden if the key already exists.",
            "itemtype": "method",
            "name": "setGlobalData",
            "params": [
                {
                    "name": "key",
                    "description": "The key to identify the data.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store.",
                    "type": "String|Number|Boolean"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 314,
            "description": "Returns the floor currently displayed",
            "itemtype": "method",
            "name": "getCurrentFloor",
            "return": {
                "description": "The currently displayed floor",
                "type": "FloorStructure"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 324,
            "description": "Returns the floor matching the given id (0 is ground, 1 is first floor etc)",
            "itemtype": "method",
            "name": "getFloorById",
            "params": [
                {
                    "name": "id",
                    "description": "The Floor id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The floor matching the given id",
                "type": "FloorStructure"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 340,
            "description": "Returns all floors",
            "itemtype": "method",
            "name": "getFloors",
            "return": {
                "description": "Array of all the floors",
                "type": "FloorStructure[]"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 350,
            "description": "Returns all wall points for a given floor",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "_floor",
                    "description": "The chosen floor, default is current floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of points",
                "type": "PointStructure[]"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 363,
            "description": "Returns all walls for a given floor.",
            "itemtype": "method",
            "name": "getWalls",
            "params": [
                {
                    "name": "_floor",
                    "description": "The chosen floor, default is current floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of walls",
                "type": "WallStructure[]"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 376,
            "description": "Returns all subslopes for a given floor.",
            "itemtype": "method",
            "name": "getSubSlopes",
            "params": [
                {
                    "name": "_floor",
                    "description": "The chosen floor, default is current floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of subslopes",
                "type": "SubSlopeStructure[]"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 389,
            "description": "Returns all internal or external rooms for a given floor",
            "itemtype": "method",
            "name": "getRooms",
            "params": [
                {
                    "name": "_external",
                    "description": "Get either internal or external rooms (see Wiki for more info), by default internal.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "_floor",
                    "description": "The chosen floor, default is current floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of rooms",
                "type": "RoomStructure[]"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 403,
            "description": "Returns all stairways for a given floor",
            "itemtype": "method",
            "name": "getStairways",
            "params": [
                {
                    "name": "_floor",
                    "description": "The chosen floor, default is current floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of stairways",
                "type": "StairwayStructure[]"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 416,
            "description": "Returns all object structures in a given floor",
            "itemtype": "method",
            "name": "getObjects",
            "params": [
                {
                    "name": "_floor",
                    "description": "The chosen floor, default is current floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of all object structures.",
                "type": "ObjectStructure[]"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 429,
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 431,
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 433,
            "description": "Registers an action made in a component so it can be undone/redone",
            "itemtype": "method",
            "name": "registerAction",
            "params": [
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "undoFunction",
                    "description": "The function called when pressing Ctrl+z.",
                    "type": "Function"
                },
                {
                    "name": "redoFunction",
                    "description": "The function called when pressing Ctrl+y.",
                    "type": "Function"
                },
                {
                    "name": "component",
                    "description": "The component calling the action.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 446,
            "description": "Adds a user's action to the history.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target object, can be anything that is concerned by the action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "A set of parameters",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The component calling the action.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 459,
            "description": "Recursively serializes an object",
            "itemtype": "method",
            "name": "serializeObject",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The object to serialize",
                    "type": "Object"
                },
                {
                    "name": "optionalTarget",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "whiteList",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "blackList",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A serialized Object",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 473,
            "description": "Recursively deserializes an object",
            "itemtype": "method",
            "name": "deserializeObject",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The serialized object",
                    "type": "Object"
                },
                {
                    "name": "optionalTarget",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "whiteList",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "blackList",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A deserialized Object",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 487,
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 489,
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 492,
            "description": "Adds a listener for an event",
            "itemtype": "method",
            "name": "listen",
            "params": [
                {
                    "name": "eventName",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is triggered",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 513,
            "description": "Removes a listener for an event",
            "itemtype": "method",
            "name": "unListen",
            "params": [
                {
                    "name": "eventName",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function called when the event was triggered",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 535,
            "description": "Returns all API-triggered listeners for an event",
            "itemtype": "method",
            "name": "getListeners",
            "return": {
                "description": "A map where: key => event, value => Array of listeners",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan",
            "submodule": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 18,
            "description": "Returns a textured material with or without custom params",
            "itemtype": "method",
            "name": "TexturedMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A textured wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 30,
            "description": "Returns a white material with or without custom params",
            "itemtype": "method",
            "name": "WhiteMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (factor (factor of gray)).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A white wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 42,
            "description": "Returns a leather material with or without custom params",
            "itemtype": "method",
            "name": "LeatherMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A leather wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 54,
            "description": "Returns a metal material with or without custom params",
            "itemtype": "method",
            "name": "MetalMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (brillance, baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A metal wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 66,
            "description": "Returns a wood material with or without custom params",
            "itemtype": "method",
            "name": "WoodMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A wood wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 78,
            "description": "Returns a matt material with or without custom params",
            "itemtype": "method",
            "name": "MattMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (diffuseTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A matt wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 90,
            "description": "Returns a glass material with or without custom params",
            "itemtype": "method",
            "name": "GlassMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (opacity or alpha (the transparency of the glass), baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A glass wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 102,
            "description": "Returns a plastic material with or without custom params",
            "itemtype": "method",
            "name": "PlasticMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A plastic wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.material.js",
            "line": 114,
            "description": "Returns a tile material with or without custom params",
            "itemtype": "method",
            "name": "TileMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the material.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A tile wanaplan material.",
                "type": "Object"
            },
            "class": "API.material",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 17,
            "description": "Fired to add a menu item into the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 23,
            "description": "Fired to remove a menu item from the main menu.",
            "itemtype": "event",
            "name": "\"wnp.menu.main.remove",
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 29,
            "description": "Fired to add a menu item into the top menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.add",
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 35,
            "description": "Fired to delete a menu item from the top menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.delete",
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 41,
            "description": "Fired to add a menu item into the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.add",
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 47,
            "description": "Fired to delete a menu item from the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.delete",
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 53,
            "description": "Returns a DOM element containing the UI widgets, which you can manipulate",
            "itemtype": "method",
            "name": "getWidgetContainer",
            "return": {
                "description": "The DOM Element containing widgets",
                "type": "Object"
            },
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 63,
            "description": "Adds an item to the main menu.\n\nMenuItem format :  \n   {\n     title : _(\"title\"),\n     icon : \"pathToIcon\",\n     action : \"eventName\",\n     index: 100,\n     items : [subitem1, subitem2]\n   }",
            "itemtype": "method",
            "name": "addMainMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "MenuItem as described above",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "The desired path for this item inside the targeted menu (default is \".\").",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 83,
            "description": "Adds an item to the top menu.",
            "itemtype": "method",
            "name": "addTopMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "MenuItem as described in doc of function addMainMenuItem",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "The desired path for this item inside the targeted menu (default is \".\").",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 94,
            "description": "Adds an item to the sub menu.",
            "itemtype": "method",
            "name": "addSubMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "MenuItem as described in doc of function addMainMenuItem",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "The desired path for this item inside the targeted menu (default is \".\").",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 105,
            "description": "Removes an item from the main menu.",
            "itemtype": "method",
            "name": "removeMainMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "The MenuItem to remove or its id.",
                    "type": "Object|String"
                },
                {
                    "name": "menuPath",
                    "description": "The path of this item (default is \".\").",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 116,
            "description": "Removes an item from the top menu.",
            "itemtype": "method",
            "name": "removeTopMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "The MenuItem to remove or its id.",
                    "type": "Object|String"
                },
                {
                    "name": "menuPath",
                    "description": "The path of this item (default is \".\").",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.ui.js",
            "line": 127,
            "description": "Removes an item from the sub menu.",
            "itemtype": "method",
            "name": "removeSubMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "The MenuItem to remove or its id.",
                    "type": "Object|String"
                },
                {
                    "name": "menuPath",
                    "description": "The path of this item (default is \".\").",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "API.ui",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Api\\Api.utils.js",
            "line": 17,
            "description": "Ajax method to get or post data.",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "options",
                    "description": "A set of options\n- url: The url to call.\n- data: The data to send.\n- method: The method to use (GET, POST, PUT).\n- success: A function to call when the operation is completed with the response in parameter.\n- error: A function to call if the operation fails.",
                    "type": "Object"
                }
            ],
            "class": "API.utils",
            "module": "Wanaplan",
            "submodule": "API",
            "namespace": "API"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 100,
            "description": "Handler called when the actual page gets the focus. All states are reseted.",
            "itemtype": "method",
            "name": "onFocus",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 113,
            "description": "Fired on key down. Same parameters as the `keydown` standard javascript event.",
            "itemtype": "event",
            "name": "wnp.keyboardManager.keyDown",
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 119,
            "description": "Fired on key up. Same parameters as the `keyup` standard javascript event.",
            "itemtype": "event",
            "name": "wnp.keyboardManager.keyUp",
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 125,
            "description": "Handler called when a keyboard event is intercepted.",
            "itemtype": "method",
            "name": "onKeyStateChange",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 152,
            "description": "Indicates whether one or more keys are currently pressed.",
            "itemtype": "method",
            "name": "isPressed",
            "params": [
                {
                    "name": "key",
                    "description": "A keycode or an array of keycodes.",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "Returns `true` if at least one key is currently pressed.",
                "type": "Boolean"
            },
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 174,
            "description": "Indicates whether one or more key are currently released.",
            "itemtype": "method",
            "name": "isReleased",
            "params": [
                {
                    "name": "key",
                    "description": "A keycode or an array of keycodes.",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "Returns `true` if at least one key is currently released.",
                "type": "Boolean"
            },
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 45,
            "description": "The cursor position on the canvas.",
            "itemtype": "property",
            "name": "pos",
            "readonly": "",
            "type": "BABYLON.Vector2",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 53,
            "description": "The delta position of the cursor (difference between last and current positions).",
            "itemtype": "property",
            "name": "posDelta",
            "readonly": "",
            "type": "BABYLON.Vector2",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 61,
            "description": "The currently pressed button.\n\n  * `PointerManager.BUTTON_LEFT` = 1\n  * `PointerManager.BUTTON_MIDDLE` = 2\n  * `PointerManager.BUTTON_RIGHT` = 4",
            "itemtype": "property",
            "name": "buttons",
            "readonly": "",
            "type": "Number",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 74,
            "description": "Number that represents current actions (masks).\n\n  * `PointerManager.ACTION_CLICK` = 1\n  * `PointerManager.ACTION_DBLCLICK` = 2\n  * `PointerManager.ACTION_DRAGSTART` = 4\n  * `PointerManager.ACTION_DRAGGING` = 8\n  * `PointerManager.ACTION_DRAGEND` = 16\n  * `PointerManager.ACTION_SCROLLUP` = 32\n  * `PointerManager.ACTION_SCROLLDOWN` = 64",
            "itemtype": "property",
            "name": "actions",
            "readonly": "",
            "type": "Number",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 91,
            "description": "Number that represents current modifiers (masks).\n\n  * `PointerManager.MODIFIER_ALT` = 1\n  * `PointerManager.MODIFIER_CTRL` = 2\n  * `PointerManager.MODIFIER_SHIFT` = 4",
            "itemtype": "property",
            "name": "buttons",
            "readonly": "",
            "type": "Number",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 124,
            "description": "Sets the DOM element to use for event listening.",
            "itemtype": "method",
            "name": "setDomElement",
            "params": [
                {
                    "name": "domElement",
                    "description": "The DOM element to use.",
                    "type": "HTMLElement"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 141,
            "description": "Adds mouse support for standard browsers or Internet Explorer 10 and 11.",
            "itemtype": "method",
            "name": "addMouseSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 162,
            "description": "Removes mouse support",
            "itemtype": "method",
            "name": "removeMouseSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 184,
            "description": "Adds touch support for standard browsers or Internet Explorer 10 and 11.",
            "itemtype": "method",
            "name": "addTouchSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 197,
            "description": "Removes touch support.",
            "itemtype": "method",
            "name": "removeTouchSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 211,
            "description": "Gets the current state of the manager;",
            "itemtype": "method",
            "name": "getStatus",
            "return": {
                "description": "Returns an object that contains all states of the manager.",
                "type": "Object"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 257,
            "description": "Forces the exit of the state `stateful` (ex: \"dragging\")\nNB : Out events will be not raised (ex \"drag-end\").",
            "itemtype": "method",
            "name": "reset",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 268,
            "description": "Called when the viewport size has changed. If no parameters are passed to the function then\nthe size is computed from the DOM element where events are listened to.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "New width.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "New height.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 284,
            "description": "Gets the position of the cursor on X axis.",
            "itemtype": "method",
            "name": "_getX",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The position of the cursor on X axis.",
                "type": "Number"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 302,
            "description": "Gets the position of the cursor on Y axis.",
            "itemtype": "method",
            "name": "_getY",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The position of the cursor on Y axis.",
                "type": "Number"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 320,
            "description": "Gets the button of the mouse responsible for the event (left for touch devices).",
            "itemtype": "method",
            "name": "_getButton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The mouse button.",
                "type": "Number"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 344,
            "description": "Updates the pointer state.",
            "itemtype": "method",
            "name": "_updateMouseState",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pEvent",
                    "description": "An event object.",
                    "type": "Event"
                },
                {
                    "name": "additionalAction",
                    "description": "Additional actions to add to mask.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 434,
            "description": "Fired when an input has been detected (click, touch, etc.).",
            "itemtype": "event",
            "name": "wnp.input.pointerchanged",
            "params": [
                {
                    "name": "inputStatus",
                    "description": "an object containing all states of the pointer manager",
                    "type": "Object"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 441,
            "description": "Notifies the callback that an event has been caught.",
            "itemtype": "method",
            "name": "_notifyCb",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 460,
            "description": "Handler called when a (mouse/touch/pointer) down event is caught.",
            "itemtype": "method",
            "name": "onMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 471,
            "description": "Handler called when a (mouse/touch/pointer) move event is caught.",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 482,
            "description": "Handler called when a (mouse/touch/pointer) up event is caught.",
            "itemtype": "method",
            "name": "onMouseUp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 493,
            "description": "Handler called when a double click event is caught.",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 503,
            "description": "Handler called when a mouse wheel event is caught. The value is normalized\nto be usable in Wanaplan.",
            "itemtype": "method",
            "name": "onMouseWheel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 84,
            "description": "Attaches an event listener to an event type.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event to listen.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The method to call when the event is triggered.",
                    "type": "Function"
                }
            ],
            "class": "wnp.Input.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp.Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 94,
            "description": "Detaches an event listener from an event type.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The listened event name.",
                    "type": "String"
                }
            ],
            "class": "wnp.Input.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp.Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 103,
            "description": "Sets the dead zone value. This value is used when a finger is moving on the screen.\nIf the delta position is lesser than dead zone then the move event is not triggered.",
            "itemtype": "method",
            "name": "setDeadZone",
            "params": [
                {
                    "name": "deadZone",
                    "description": "The value of the dead zone. Default is 2.0.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Input.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp.Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 334,
            "description": "Starts the manager activity.",
            "itemtype": "method",
            "name": "start",
            "class": "wnp.Input.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp.Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 352,
            "description": "Stops the manager activity.",
            "itemtype": "method",
            "name": "stop",
            "class": "wnp.Input.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp.Input"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 57,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 59,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 69,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 71,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 16,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 18,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 30,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 32,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 54,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 56,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 69,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 71,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 43,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 45,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 54,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 56,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 69,
            "description": "Sets the color of the outline. Default is red.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "color",
                    "description": "The requested color.",
                    "type": "BABYLON.Color4"
                }
            ],
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 79,
            "description": "Sets the thickness of the outline. Default is 1.",
            "itemtype": "method",
            "name": "setThickness",
            "params": [
                {
                    "name": "value",
                    "description": "Requested thickness.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 88,
            "description": "Shows the outline.",
            "itemtype": "method",
            "name": "show",
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 99,
            "description": "Hides the outline. Must be called when no meshes are outlined, in order to preserve the framerate.",
            "itemtype": "method",
            "name": "hide",
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 109,
            "description": "Returns an array of currently outlined meshes. See also `getSubMeshIndexes` for a more detailed understanding of the handled meshes/submeshes.",
            "itemtype": "method",
            "name": "getMeshes",
            "return": {
                "description": "An array of meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 118,
            "description": "Returns a 2D array of currently outlined subMesh indexes.",
            "example": [
                "\n\t   var meshes = outliner.getMeshes();  \n\t   var indexes = outliner.getSubMeshIndexes();  \n\n\nGiven this configuration, if `meshes[i]` is defined, two scenarios are possible :\n * Either `indexes[i]` is an Array of submesh indexes, and only the subMeshes of these indexes will be highlighted (if they exist).\n * Either `indexes[i]` is undefined or an empty Array, and the whole mesh is highlighted."
            ],
            "itemtype": "method",
            "name": "getSubMeshIndexes",
            "return": {
                "description": "The subMesh indexes.",
                "type": "Number[][]"
            },
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 137,
            "description": "Sets an array of currently outlined meshes. See also `getSubMeshIndexes` for a more detailed understanding of the handled meshes/submeshes.",
            "params": [
                {
                    "name": "meshes",
                    "description": "An array of meshes.",
                    "type": "BABYLON.Mesh[]"
                }
            ],
            "itemtype": "method",
            "name": "setMeshes",
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Rendering\\Outliner.js",
            "line": 147,
            "description": "Sets a 2D array of currently outlined subMesh indexes. See also `getSubMeshIndexes` for a more detailed understanding of the handled meshes/submeshes.",
            "params": [
                {
                    "name": "subMeshesIndexes",
                    "description": "The subMesh indexes.",
                    "type": "Number[][]"
                }
            ],
            "itemtype": "method",
            "name": "setSubMeshesIndexes",
            "class": "wnp.Outliner",
            "module": "Wanaplan",
            "submodule": "Rendering",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 43,
            "description": "Set a function for the click callback.",
            "itemtype": "method",
            "name": "setClickCallback",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to use.",
                    "type": "Function"
                }
            ],
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 52,
            "description": "Handler used on a mouse click.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "The",
                    "description": "event object.",
                    "type": "Event"
                }
            ],
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 65,
            "itemtype": "method",
            "name": "onSpecial",
            "params": [
                {
                    "name": "The",
                    "description": "event object.",
                    "type": "Event"
                }
            ],
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 74,
            "description": "Handler called when an object is selected.",
            "itemtype": "method",
            "name": "onSelectedObject",
            "params": [
                {
                    "name": "The",
                    "description": "event.",
                    "type": "Event"
                }
            ],
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 83,
            "description": "Handler called when an object is deselected.",
            "itemtype": "method",
            "name": "onDeselectObject",
            "params": [
                {
                    "name": "The",
                    "description": "event.",
                    "type": "Event"
                }
            ],
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 92,
            "description": "Handler called when the object move.",
            "itemtype": "method",
            "name": "onObjectMove",
            "params": [
                {
                    "name": "The",
                    "description": "event.",
                    "type": "Event"
                }
            ],
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 103,
            "description": "Shows the widget for the selected object.",
            "itemtype": "method",
            "name": "addInfo",
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 142,
            "description": "Hide the widget.",
            "itemtype": "method",
            "name": "removeInfo",
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Info.js",
            "line": 157,
            "description": "Indicate whether the widget is active.",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "Returns `true` if it's active, otherwise it returns `false`.",
                "type": "Boolean"
            },
            "class": "Info",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 44,
            "itemtype": "method",
            "name": "onRefreshObject",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "Rotator",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 60,
            "itemtype": "method",
            "name": "onSelectObject",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "Rotator",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 69,
            "itemtype": "method",
            "name": "onDeselectObject",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "Rotator",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 84,
            "description": "Indicates whether the widget is active.",
            "itemtype": "method",
            "name": "isActive",
            "params": [
                {
                    "name": "Return",
                    "description": "`true` if it's active, otherwise it returns `false`.",
                    "type": "Boolean"
                }
            ],
            "class": "Rotator",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 101,
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "Rotator",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 136,
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "Rotator",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 161,
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "Rotator",
            "module": "Wanaplan",
            "submodule": "Widget"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 9,
            "description": "Load a model in JSON format.",
            "itemtype": "method",
            "name": "load",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "The path of the model.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A set of options:\n\t\t\t\t\t- position => `BAYLON.Vector3`\n\t\t\t\t\t- rotation => `BAYLON.Vector3`\n\t\t\t\t\t- scaling => `BAYLON.Vector3` or `Number`\n\t\t\t\t\t- backFaceCulling => `Boolean`\n\t\t\t\t\t- centerGeometry => `Boolean`",
                    "type": "Object"
                },
                {
                    "name": "success",
                    "description": "A function called when the model is fully loaded and ready to use.\n\t\t\t\t\t the model is passed as parameter of the function.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the loading fails.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the root mesh which contains all submeshes.",
                "type": "BABYLON.Mesh"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 58,
            "description": "Build all meshes with JSON informations.",
            "itemtype": "method",
            "name": "build",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "json",
                    "description": "A paresed JSON that contains informations about the model.",
                    "type": "Object"
                },
                {
                    "name": "rootMesh",
                    "description": "The root mesh used as parent for all submeshes.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "See the docs in the `load` method.",
                    "type": "Object"
                },
                {
                    "name": "success",
                    "description": "See the docs in the `Load` method.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "See the docs in the `Load` method.",
                    "type": "Function"
                }
            ],
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 118,
            "description": "Apply transformation to a mesh and sets its parent.",
            "itemtype": "method",
            "name": "applyTransform",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh to use.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "transformation",
                    "description": "An array used as a transform matrix (right handed).",
                    "type": "Array"
                },
                {
                    "name": "parent",
                    "description": "The parent of the mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 139,
            "description": "Apply transformations to a set of meshes recursively.",
            "itemtype": "method",
            "name": "applyTransformRecursive",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "meshes",
                    "description": "An array of meshes.",
                    "type": "Array"
                },
                {
                    "name": "data",
                    "description": "An object that contains informations about transformations.",
                    "type": "Object"
                }
            ],
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 170,
            "description": "Gets the index of a mesh by its name.",
            "itemtype": "method",
            "name": "indexOf",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "meshes",
                    "description": "An array of meshes.",
                    "type": "Array"
                },
                {
                    "name": "name",
                    "description": "The name of the desired mesh.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the index of the mesh in the collection if it exits, otherwise it returns -1.",
                "type": "Number"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 188,
            "description": "Generates meshes from json data.",
            "itemtype": "method",
            "name": "generateMeshes",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "json",
                    "description": "A paresed JSON that contains informations about meshes.",
                    "type": "Object"
                },
                {
                    "name": "material",
                    "description": "An array of materials.",
                    "type": "Array"
                },
                {
                    "name": "parent",
                    "description": "The parent used by default for all meshes.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Returns an array of meshes.",
                "type": "Array"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 238,
            "description": "Generate materials from json data.",
            "itemtype": "method",
            "name": "generateMaterials",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "json",
                    "description": "A paresed JSON that contains informations about materials.",
                    "type": "Object"
                },
                {
                    "name": "textures",
                    "description": "An array of textures.",
                    "type": "Array"
                },
                {
                    "name": "path",
                    "description": "The path used for textures.",
                    "type": "String"
                },
                {
                    "name": "backFaceCulling",
                    "description": "A flag for enable or disable the backFaceCulling.",
                    "type": "Boolean"
                },
                {
                    "name": "noTexture",
                    "description": "A flag to bypass all textures.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns an array of materials.",
                "type": "Array"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 348,
            "description": "Generate textures from json data.",
            "itemtype": "method",
            "name": "genreateTextures",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "json",
                    "description": "A paresed JSON that contains informations about textures.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns an array of textures.",
                "type": "Array"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 370,
            "description": "Gets the name of a texture by extracting it via its path.",
            "itemtype": "method",
            "name": "_getTextureName",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "delimiter",
                    "description": "The delimiter to use in the `split` method.",
                    "type": "String"
                },
                {
                    "name": "textureName",
                    "description": "The absolute path of the texture.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the name of the texture.",
                "type": "String"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 384,
            "description": "Gets a color from an array.",
            "itemtype": "method",
            "name": "_toColor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "An array with three elements that represents a color (RGB).",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a color object which can be used on a `BABYLON.Mesh`.",
                "type": "BABYLON.Color3"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Assimp2jsonImporter.js",
            "line": 395,
            "description": "Gets an `Array` of indice from an array.",
            "itemtype": "method",
            "name": "_toIndices",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "An array of array which contains three elements that represents faces.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns an array of indices.",
                "type": "Array"
            },
            "class": "AssimpImporter",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Box3.js",
            "line": 3,
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 29,
            "description": "Sets the current camera for this class.",
            "itemtype": "method",
            "name": "setCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "The camera to use.",
                    "type": "BABYLON.Camera"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 38,
            "description": "Tests for wall transparency.\nTriggered on `wnp.engine3D.camera.move`.",
            "itemtype": "method",
            "name": "onCameraMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 51,
            "description": "Tests for wall transparency.\nTriggered on `wnp.engine3D.camera.zoom`.",
            "itemtype": "method",
            "name": "onCameraZoom",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 64,
            "description": "Handler called when the whole walls are ready (with their subslopes).\nTriggered on `wnp.engine3D.subslopeOverturesReady`.",
            "itemtype": "method",
            "name": "onWallsReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 79,
            "description": "Stops the wall transparency when the user clicks on the transparency button.",
            "itemtype": "method",
            "name": "stopTransparency",
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 109,
            "description": "Starts the transparency when the user clicks on the transparency button.",
            "itemtype": "method",
            "name": "startTransparency",
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 126,
            "description": "Builds a plane from a bounding box.",
            "itemtype": "method",
            "name": "buildPlaneFromBB",
            "params": [
                {
                    "name": "box",
                    "description": "A bounding box.",
                    "type": "BABYLON.BoundingBox"
                }
            ],
            "return": {
                "description": "A plane.",
                "type": "BABYLON.Plane"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 141,
            "description": "This function is related to the wall transparency.  \nBuilds an index array corresponding to the submesh indexes in the wall mesh.  \nThese submeshes must be transparent to have a clear display of the camera target.  \nThis is only relevant if the wall transparency option is active.",
            "itemtype": "method",
            "name": "fillByZIndex",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "The wall mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "The submesh index array.",
                "type": "Array"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 194,
            "description": "Applies transparency to wall materials based on the position and target of the camera.\nUsed to see through walls and roofs.",
            "itemtype": "method",
            "name": "dynamicWallTransparency",
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 228,
            "description": "Sets all walls to opaque for a given floor.",
            "itemtype": "method",
            "name": "makeWallsOpaque",
            "params": [
                {
                    "name": "floor",
                    "description": "A floor to make opaque. Default is the current selected floor.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 261,
            "description": "Sets all walls to opaque when the 3D mode is enabled.\nTriggered on `wnp.contextChanged`",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 274,
            "description": "Handler which will apply transparency only on walls at the current floor.\nTriggered on `wnp.engine3D.allFloorsReady`",
            "itemtype": "method",
            "name": "onGlobaleFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 290,
            "description": "Gets the best focus radius for the camera to be in the best setup, in order to see the whole mesh.  \n_N.B_ : The current position and target of the camera is irrelevant, this function will work anyway.",
            "itemtype": "method",
            "name": "getBestFocusRadius",
            "params": [
                {
                    "name": "target",
                    "description": "The mesh to focus on.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "camera",
                    "description": "The camera involved.",
                    "type": "BABYLON.Camera"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "radius Returns the radius to use.",
                "type": "Number"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 315,
            "description": "Computes the best camera state to focus on an object. Only works with an `OrbitCamera`.",
            "itemtype": "method",
            "name": "computeCameraStateLooking",
            "params": [
                {
                    "name": "target",
                    "description": "The mesh to focus on.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "camera",
                    "description": "The camera involved.",
                    "type": "BABYLON.Camera"
                },
                {
                    "name": "viewport",
                    "description": "The viewport to use, default is (0, 0, 1, 1);",
                    "type": "BABYLON.Viewport",
                    "optional": true
                }
            ],
            "return": {
                "description": "An object where :\n * `target` is the targetted mesh.\n * `alpha` is the alpha angle of the camera (see `OrbitCamera` doc).\n * `beta` is the beta angle of the camera (see `OrbitCamera` doc).\n * `radius` is the radius of the camera (see `OrbitCamera` doc).",
                "type": "Object"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 425,
            "description": "Fired when the 3D camera has moved.",
            "itemtype": "event",
            "name": "wnp.engine3D.camera.move",
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 431,
            "description": "Computes an animation by given an amnimatable object , source state and destination state, compute the animations babylon way and start play it",
            "params": [
                {
                    "name": "target",
                    "description": "is the animatable object that will be animate",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "src",
                    "description": "is a set of property and their value at the begin of the animation",
                    "type": "BABYLON.Vectior3"
                },
                {
                    "name": "dst",
                    "description": "is a set of property and their value at the end of the animation",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Animation options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "duration",
                            "description": "Animation duration in ms.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "callback",
                            "description": "A function to call at the end of the animation.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "cleanAfterAnimation",
                            "description": "If true the animation will be cleaned at the end, if false, the cancel function MUST be called somewhere.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "name",
                            "description": "A name.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"Animation\""
                        },
                        {
                            "name": "isACamera",
                            "description": "If set to true, the event camera.move will be triggered during the animation",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "smooth",
                            "description": "Smoothing interpolation. Accepted values are `\"linear\"`, `\"ease\"` or a function f : [0:1] -> [0:1]",
                            "type": "String|Function",
                            "optional": true,
                            "optdefault": "'linear'"
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "computeAnimation",
            "return": {
                "description": "A function that cancels the animation on calling and cleans it up. This function will be called at the end of the animation if `cleanAfterAnimation` is true.",
                "type": "wnp.AnimationCancelor"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 552,
            "description": "Cancels the animation.",
            "itemtype": "method",
            "name": "cancel",
            "class": "wnp.AnimationCancelor",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 566,
            "description": "Handler called when an animation is done.",
            "itemtype": "method",
            "name": "_onAnimationEnd",
            "access": "private",
            "tagname": "",
            "class": "wnp.AnimationCancelor",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 106,
            "description": "Sets global custom data. The previous data is overriden if the key already exists.",
            "itemtype": "method",
            "name": "setGlobalData",
            "params": [
                {
                    "name": "key",
                    "description": "The key to identify the data.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store.",
                    "type": "String|Number|Boolean"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 118,
            "description": "Returns stored global custom data.",
            "itemtype": "method",
            "name": "getGlobalData",
            "params": [
                {
                    "name": "key",
                    "description": "The key to identify the data.",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "The default returned value.",
                    "type": "String|Number|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the data if it exists, otherwise it returns `defaultValue`.",
                "type": "String|Number|Boolean"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 44,
            "description": "The 3D scene.",
            "itemtype": "property",
            "name": "scene",
            "type": "{BABYLON.Scene}",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 52,
            "description": "The canvas.",
            "itemtype": "property",
            "name": "domElement",
            "type": "{HTMLCanvasElement}",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 60,
            "description": "3D objects handled by the controls (selectable and draggable).",
            "itemtype": "property",
            "name": "objects",
            "type": "{BABYLON.Mesh[]}",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 68,
            "description": "Controls parameters.",
            "itemtype": "property",
            "name": "params",
            "type": "{Object}",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 76,
            "description": "Move callback, called by Controls to move an object in the scene.",
            "itemtype": "property",
            "name": "move",
            "type": "{Function}",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 87,
            "description": "Flag that indicates if the Controls are listening to the Engine3D events",
            "itemtype": "property",
            "name": "listens",
            "type": "{Boolean}",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 97,
            "description": "Screen Sizes (width and height)",
            "itemtype": "property",
            "name": "_screenSizes",
            "type": "{Object}",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 127,
            "description": "Starts the listening of `Engine3D` events.",
            "itemtype": "method",
            "name": "startListening",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 153,
            "description": "Stops the listening of `Engine3D` events.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 170,
            "description": "Sets the current referent parent, used to select or drag objects. See `Controls` wiki for more info.",
            "itemtype": "method",
            "name": "setReferentParent",
            "params": [
                {
                    "name": "parent",
                    "description": "The new referent parent.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 180,
            "description": "Returns the current referent parent, used to select or drag objects. See `Controls` wiki for more info.",
            "itemtype": "method",
            "name": "getReferentParent",
            "return": {
                "description": "The current referent parent.",
                "type": "BABYLON.Mesh"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 190,
            "description": "Returns the current referent plane, on which the mouse is projected when dragging.",
            "itemtype": "method",
            "name": "getReferentPlane",
            "return": {
                "description": "The current referent plane.",
                "type": "BABYLON.Plane"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 200,
            "description": "Sets the current root, that is the top-level parent of all handled objects.\nNB : All objects that are not descendants of the root can't be handled by `Controls`.\nNB 2 : The referent parent is also set to the new root, for consistency.",
            "itemtype": "method",
            "name": "setRoot",
            "params": [
                {
                    "name": "root",
                    "description": "The new root.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 213,
            "description": "Returns the current root, that is the top-level parent of all handled objects.\nNB : All objects that are not descendants of the root can't be handled by `Controls`.",
            "itemtype": "method",
            "name": "getRoot",
            "return": {
                "description": "The current root.",
                "type": "BABYLON.Mesh"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 224,
            "description": "Returns the selected object, as picking information.",
            "itemtype": "method",
            "name": "getSelected",
            "return": {
                "description": "The selected object, as picking information.",
                "type": "BABYLON.PickingInfo"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 234,
            "description": "Returns the selected object.\nNB : This is equivalent to getSelected().pickedMesh.",
            "itemtype": "method",
            "name": "getSelectedObject",
            "return": {
                "description": "The selected object.",
                "type": "BABYLON.Mesh"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 245,
            "description": "Forces the selected object without having to click on it.\nNB : A picking info is created, with a null distance and a null pickedPoint.\nNB 2 : The difference with `selectObject` is that no `select` event is fired.",
            "itemtype": "method",
            "name": "setSelectedObject",
            "params": [
                {
                    "name": "object",
                    "description": "The new selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 261,
            "description": "Returns the dragged object as a picking information.",
            "itemtype": "method",
            "name": "getDragged",
            "return": {
                "description": "The dragged object, as a picking information.",
                "type": "BABYLON.PickingInfo"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 271,
            "description": "Forces the dragged object without having to click on it.\nNB : Warning, the parameter is a picking info !",
            "itemtype": "method",
            "name": "setDragged",
            "params": [
                {
                    "name": "dragged",
                    "description": "The new dragged object.",
                    "type": "BABYLON.PickingInfo"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 282,
            "description": "Selects an object.\nNB : A picking info is created, with a null distance and a null pickedPoint.\nNB 2 : The difference with `setSelectedObject` is that a `select` event is fired.",
            "itemtype": "method",
            "name": "selectObject",
            "params": [
                {
                    "name": "object",
                    "description": "The new selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 297,
            "description": "Selects the top-level object, relative to the referent parent, for the given object.\nNB : A picking info is created, with a null distance and a null pickedPoint.",
            "itemtype": "method",
            "name": "selectTopLevelObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object from which we have to find the top-level object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 313,
            "description": "Selects an object, as a picking information.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "topLevelObjectPI",
                    "description": "The new selected object, as a picking information.",
                    "type": "BABYLON.PickingInfo"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 324,
            "description": "Deselects the object, even if no object has been selected.",
            "itemtype": "method",
            "name": "deselect",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 334,
            "description": "Returns the last position of the dragged object.",
            "itemtype": "method",
            "name": "getLastPosition",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 355,
            "description": "Adds a callback to a specific event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                },
                {
                    "name": "handler",
                    "description": "The callback function.",
                    "type": "Function"
                },
                {
                    "name": "insertFirst",
                    "description": "If true then insert function in first position of listeners.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this.",
                "type": "Controls"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 376,
            "description": "Removes a callback from a specific event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                },
                {
                    "name": "handler",
                    "description": "The callback function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this.",
                "type": "Controls"
            },
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 395,
            "description": "Calls every callback registered for a specific event.",
            "itemtype": "method",
            "name": "notify",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "The data associated to this event.",
                    "type": "Object"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 411,
            "description": "Fired to disable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.disable-orbit-camera",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 417,
            "description": "Fired to enable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.enable-orbit-camera",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 423,
            "description": "Locks the dragging capabilities.",
            "itemtype": "method",
            "name": "dragLock",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 435,
            "description": "Unlocks the dragging capabilities.",
            "itemtype": "method",
            "name": "dragLock",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 447,
            "description": "Sets the constrains for the dragging.\n3 cases :\n * No param is specified, no constraint on the dragging, the object is dragged on a sphere around the camera.\n * Only the param `U` is specified, the object is dragged along an axis, carried by the vector `U`.\n * Both params are specified, the object is dragged along a plane, directed by `U` and `V`.",
            "itemtype": "method",
            "name": "constrains",
            "params": [
                {
                    "name": "U",
                    "description": "First Vector.",
                    "type": "BABYLON.Vector3",
                    "optional": true
                },
                {
                    "name": "V",
                    "description": "Second Vector.",
                    "type": "BABYLON.Vector3",
                    "optional": true
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 468,
            "description": "Adds an object to the list of handled objects.",
            "itemtype": "method",
            "name": "addDraggable",
            "params": [
                {
                    "name": "object",
                    "description": "The object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 478,
            "description": "Adds an object to the list of handled objects, that can't be removed.\nDo not use this",
            "deprecated": true,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "addUnremovableDraggable",
            "params": [
                {
                    "name": "object",
                    "description": "The object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 492,
            "description": "Removes an object to the list of handled objects.",
            "itemtype": "method",
            "name": "removeDraggable",
            "params": [
                {
                    "name": "object",
                    "description": "The object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 510,
            "description": "Empties the list of handled objects.",
            "itemtype": "method",
            "name": "resetDraggable",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 525,
            "description": "Triggered on event `wnp.engine3D.drag-start`.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 564,
            "description": "Triggered on event `wnp.engine3D.dragging`.",
            "itemtype": "method",
            "name": "onDragging",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 623,
            "description": "Triggered on event `wnp.engine3D.drag-end`.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 637,
            "description": "Triggered on event `wnp.engine3D.mousedown`.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 650,
            "description": "Triggered on event `wnp.engine3D.mouse-move`.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 661,
            "description": "Triggered on event `wnp.engine3D.click`.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 676,
            "description": "Triggered on event `wnp.engine3D.dblclick.collided`.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 686,
            "description": "Picks the mesh under the mouse pointer, and returns the top-level object as a pickingInfo",
            "itemtype": "method",
            "name": "pickMeshUnderCursor",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event",
                    "type": "MouseEvent"
                },
                {
                    "name": "ref",
                    "description": "Optional parameter to override the referent parent.",
                    "type": "BABYLON.Mesh",
                    "optional": true
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 729,
            "description": "Gets the correct values for the current pointer. Cross device.",
            "itemtype": "method",
            "name": "getPointerCoordinates",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event",
                    "type": "Event"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 752,
            "description": "Implements the behaviour \"click = selection of top-level object\"",
            "itemtype": "method",
            "name": "clickSelection",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event",
                    "type": "MouseEvent"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 788,
            "description": "Implements the behaviour \"dragging of top-level object\"",
            "itemtype": "method",
            "name": "dragSelection",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event",
                    "type": "MouseEvent"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 814,
            "description": "Sets the canvas size.",
            "itemtype": "method",
            "name": "setScreenSize",
            "params": [
                {
                    "name": "width",
                    "description": "The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height.",
                    "type": "Number"
                }
            ],
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Controls.js",
            "line": 828,
            "description": "Refresh the referent dragging plane, taking the constraints into account.",
            "itemtype": "method",
            "name": "refreshReferentPlane",
            "class": "Controls",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 308,
            "description": "*\n        Components management         *\n*",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 383,
            "description": "*\n        Collision detection           *\n*",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 439,
            "description": "*\n           Event handlers             *\n*",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 552,
            "description": "*\n      Lyfe cycle : State pattern      *\n*",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 38,
            "description": "Whenever a textured material is colorable (i.e. colorable tiles), this\nproperty stores the blent color.",
            "itemtype": "property",
            "name": "addColor",
            "default": "null",
            "access": "private",
            "tagname": "",
            "type": "{BABYLON.Color3}",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 49,
            "description": "Flag which indicates if the material has been applied by the engine or by the user.  \n__/!\\ WARNING__ : If set to true, in order to save storage, the material will NOT be serialized.",
            "itemtype": "property",
            "name": "isDefault",
            "default": "true",
            "type": "{Boolean}",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 109,
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 111,
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 175,
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 177,
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 179,
            "description": "Checks if the material is ready.\n(If all textures and attributes are loaded correctly)",
            "itemtype": "method",
            "name": "_isReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "defines",
                    "description": "The basic defines of the shader.",
                    "type": "String[]"
                },
                {
                    "name": "optionalDefines",
                    "description": "The optional defines of your custom shader.",
                    "type": "String[]"
                },
                {
                    "name": "engine",
                    "description": "The engine of babylon.",
                    "type": "BABYLON.engine"
                },
                {
                    "name": "mesh",
                    "description": "The mesh where the material is set on.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 214,
            "description": "Checks if the material is ready.\n(If all textures and attributes are loaded correctly)",
            "itemtype": "method",
            "name": "isReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh where the material is set on.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 417,
            "description": "Sets the base color of the material. This method has different behaviours\ndepending on the child class implementation.",
            "itemtype": "method",
            "name": "setBaseColor",
            "params": [
                {
                    "name": "color",
                    "description": "The color.",
                    "type": "BABYLON.Color3"
                }
            ],
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 428,
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 430,
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 434,
            "itemtype": "method",
            "name": "_batchedBind",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 443,
            "description": "Bind the mandatory things.",
            "itemtype": "method",
            "name": "_mandatoryBind",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "world",
                    "description": "The world Matrix.",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "mesh",
                    "description": "The mesh.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 455,
            "description": "Bind the Important value of the material.\nSend the property of the material on the GPU for the shaders.",
            "itemtype": "method",
            "name": "bind",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "world",
                    "description": "The world Matrix.",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "mesh",
                    "description": "The mesh.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 473,
            "description": "Unbind the Important value of the material.",
            "itemtype": "method",
            "name": "unbind",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 486,
            "itemtype": "method",
            "name": "_preBind",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 502,
            "description": "Bind the camera informations to the GPU.",
            "itemtype": "method",
            "name": "bindView",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 515,
            "description": "Bind the diffuse color to the GPU.",
            "itemtype": "method",
            "name": "bindColor",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 526,
            "description": "Bind alpha transparency to the GPU.",
            "itemtype": "method",
            "name": "bindAlpha",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 536,
            "description": "Bind diffuse informations and texture to the GPU.",
            "itemtype": "method",
            "name": "bindDiffuse",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 551,
            "description": "Bind bump informations and texture to the GPU.",
            "itemtype": "method",
            "name": "bindBump",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 566,
            "description": "Bind envirronement informations and texture to the GPU.",
            "itemtype": "method",
            "name": "bindEnv",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 581,
            "description": "Bind lights informations to the GPU.",
            "itemtype": "method",
            "name": "bindLights",
            "access": "private",
            "tagname": "",
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 617,
            "description": "Bind shadows informations to the GPU.",
            "itemtype": "method",
            "name": "bindShadows",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "world",
                    "description": "The world Matrix.",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "mesh",
                    "description": "The mesh.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 671,
            "description": "Clones the material.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "name",
                    "description": "New name.",
                    "type": "String"
                }
            ],
            "class": "wnp.StandardMaterial",
            "module": "Wanaplan",
            "submodule": "Materials",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 15,
            "description": "Objet permettant de construire des materials.",
            "is_constructor": 1,
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Core"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 24,
            "description": "Réalise une fusion de paramètres entre 2 objets.",
            "itemtype": "method",
            "name": "mergeParams",
            "params": [
                {
                    "name": "Un",
                    "description": "objet avec des propriétés.",
                    "type": "Object"
                },
                {
                    "name": "Un",
                    "description": "objet autre avec des propriétés.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "params Un objet comportant toutes les propriétés des 2 objets passés en paramètre.",
                "type": "Object"
            },
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Core"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 42,
            "description": "Active la répétition de texture sur une texture.",
            "itemtype": "method",
            "name": "static repeatTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "La texture à utiliser.",
                    "type": "THREE.Texture"
                },
                {
                    "name": "x",
                    "description": "Le facteur X de répétion à utiliser.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Le facteur Y de répétion à utiliser.",
                    "type": "Number"
                }
            ],
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Core"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 16,
            "description": "The bounding box of the wall.",
            "itemtype": "property",
            "name": "boundingBox",
            "access": "private",
            "tagname": "",
            "type": "{BABYLON.boundingBox}",
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 25,
            "description": "Normal to the wall.",
            "itemtype": "property",
            "name": "normal",
            "type": "{BABYLON.Vector2}",
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 33,
            "description": "Center of the wall.",
            "itemtype": "property",
            "name": "center",
            "type": "{BABYLON.Vector2}",
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 41,
            "description": "Material of the wall.",
            "itemtype": "property",
            "name": "material",
            "type": "{BABYLON.Material}",
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 49,
            "description": "Custom data of the wall.",
            "itemtype": "property",
            "name": "customData",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 59,
            "description": "Serializes the object (to JSON).",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized.",
                "type": "Object"
            },
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 76,
            "description": "Deserializes the object (from JSON).",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization.",
                "type": "Object"
            },
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 89,
            "description": "Deserializes the object (from JSON).",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization.",
                "type": "Object"
            },
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 103,
            "description": "Creates a material info from a wall pane and a material.",
            "static": 1,
            "itemtype": "method",
            "name": "MakeFromPane",
            "params": [
                {
                    "name": "pane",
                    "description": "The wall pane.",
                    "type": "WallPane3D"
                },
                {
                    "name": "material",
                    "description": "The material.",
                    "type": "BABYLON.Material"
                }
            ],
            "return": {
                "description": "The resulting material info.",
                "type": "MaterialInfo"
            },
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 120,
            "description": "Identifies the material info with a set of wallpanes.\nReturns the pane the more similar with the material info, comparing the center and normal.",
            "itemtype": "method",
            "name": "identifyWithPanes",
            "params": [
                {
                    "name": "panes",
                    "description": "The list of panes to compare with.",
                    "type": "WallPane3D[]"
                }
            ],
            "return": {
                "description": "The index in the list pointing to the most alike wallpane.",
                "type": "Number"
            },
            "class": "MaterialInfo",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\_extra_docs.js",
            "line": 1,
            "description": "*\n\t SUBMODULES DECLARATION\t   *\n \t\t\t\t\t\t\t   *",
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Helpers\\GeometryHelper.js",
            "line": 1258,
            "description": "Representation of the pillow like a cube but with 3*3*3 points\nTODO : uvs",
            "class": "GlobalHelper",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 36,
            "description": "Gets the supported GPU capabilities of the browser eg. the list of GL extensions or maximum texture size.",
            "itemtype": "method",
            "name": "getCapabilities",
            "static": 1,
            "return": {
                "description": "an object that contains GPU capabilities.",
                "type": "Object"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 101,
            "description": "Gets an object which contains the correct event names to use (touch, mouse or pointer).",
            "itemtype": "method",
            "name": "getWrappedMouseEventNames",
            "static": 1,
            "return": {
                "description": "Return a dictionary with correct event names \n        * Result on Android:       { down: \"touchstart\", move: \"touchmove\", up: \"touchend\", cancel: \"touchcancel\" }\n        * Result on WindowsPhone:  { down: \"pointerdown\", move: \"pointermove\", up: \"pointerup\", cancel: \"pointercancel\", out: \"pointerout\" }\n        * Result on Desktop:       { down: \"mousedown\", move: \"mousemove\", up: \"mouseup\", cancel: \"mouseup\" }",
                "type": "Object"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 149,
            "description": "Indicates whether the browser has WebGL support.",
            "itemtype": "method",
            "name": "hasWebGL",
            "static": 1,
            "return": {
                "description": "Return true if WebGL is supported, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 159,
            "description": "Indicates whether the browser has Canvas 2D support.",
            "itemtype": "method",
            "name": "hasCanvas2D",
            "static": 1,
            "return": {
                "description": "Return true if the canvas 2D is supported, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 169,
            "description": "Indicates whether the user's keyboard has an AZERTY layout.",
            "itemtype": "method",
            "name": "hasAzertyKeyboard",
            "static": 1,
            "return": {
                "description": "Return true if the user's keyboard has an AZERTY layout, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 179,
            "description": "Indicates whether the user's device is a mobile device.",
            "itemtype": "method",
            "name": "isMobileDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a mobile device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 189,
            "description": "Indicates whether the user's device is an Android device.",
            "itemtype": "method",
            "name": "isAndroidDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is an Android device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 199,
            "description": "Indicates whether the user's device is an Apple device.",
            "itemtype": "method",
            "name": "isAppleDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is an Apple device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 209,
            "description": "Indicates whether the user's device is a Samsung Mobile device.",
            "itemtype": "method",
            "name": "isSamsungDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a Samsung Mobile device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 219,
            "description": "Indicates whether the user's device is a Windows Mobile device.",
            "itemtype": "method",
            "name": "isWindowsDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a Windows Mobile device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 229,
            "description": "Indicates whether the user's device is a Windows Phone device.",
            "itemtype": "method",
            "name": "isWindowsPhoneDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a Windows Phone device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 239,
            "description": "Indicates whether the user's browser is Internet Explorer and return its version if it is.",
            "itemtype": "method",
            "name": "isIE",
            "static": 1,
            "return": {
                "description": "Return the version of Internet Explorer if it is used, otherwise return -1.",
                "type": "Number"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 250,
            "description": "Indicates if the user's browser is Internet Explorer 9.",
            "itemtype": "method",
            "name": "isIE9",
            "static": 1,
            "return": {
                "description": "Return true if the user's browser is Internet Explorer 9, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 260,
            "description": "Indicates if the user's browser is Internet Explorer 10.",
            "itemtype": "method",
            "name": "isIE9",
            "static": 1,
            "return": {
                "description": "Return true if the user's browser is Internet Explorer 10, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 270,
            "description": "Creates a screenshot of the 3D scene.",
            "itemtype": "method",
            "name": "createScreenshot3D",
            "static": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "The 3D engine.",
                    "type": "BABYLON.Engine"
                },
                {
                    "name": "quality",
                    "description": "The desired quality of output (\"native\", \"Thumb\", \"HD\", \"FullHD\" or \"4K\").",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A function called on the screenshot after it is created.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 356,
            "description": "Forces the device mode (mobile or desktop).",
            "itemtype": "method",
            "name": "__forceMobileDevice",
            "params": [
                {
                    "name": "value",
                    "description": "Set to true to force the mobile detection or false for desktop.",
                    "type": "Boolean"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 365,
            "description": "Strips the url of its domain.\neg. it replaces http://v2.wanaplan.com/data/stuff.ext => /data/stuff.ext",
            "itemtype": "method",
            "name": "stripDomainUrl",
            "params": [
                {
                    "name": "url",
                    "description": "The url to clean",
                    "type": "String"
                },
                {
                    "name": "racine",
                    "description": "Check if this pattern is in the url before cleaning it",
                    "type": "String"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 15,
            "description": "Insert an HTML file into the specified node.",
            "itemtype": "method",
            "name": "insertHTML",
            "params": [
                {
                    "name": "htmlPath",
                    "description": "The URL of the HTML file to load.",
                    "type": "String"
                },
                {
                    "name": "domNode",
                    "description": "The element's ID or the element itself.",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the HTML file is insered.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 43,
            "description": "Insert a script to the page.",
            "itemtype": "method",
            "name": "addScript",
            "params": [
                {
                    "name": "scriptUrl",
                    "description": "The URL of the script to load.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the script is ready.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 71,
            "description": "Load a collection of scripts. Here are two methods to load scripts.\n1. A simple array with urls [ \"script.js\", \"script2.js\" ] \n2. An array of dictionary [ { MyObject: \"myObjectScript.js\" } ]. In this case the function will test if the script is already loaded \n   by using the key of the dictionary as object name.",
            "itemtype": "method",
            "name": "addScripts",
            "params": [
                {
                    "name": "scripts",
                    "description": "An array that contains all url to load or an array of.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "(Optional) A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "(Optional) A function called when the script is ready.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "(Optional) A function called if the process fail.",
                    "type": "Function"
                },
                {
                    "name": "interval",
                    "description": "(Optional) The value of check interval.",
                    "type": "Number"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 132,
            "description": "Add a CSS file to the page.",
            "itemtype": "method",
            "name": "addStylesheet",
            "static": 1,
            "params": [
                {
                    "name": "stylesheet",
                    "description": "The URL of the file to load.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A dictionary of parameters (ex. { \"media\": \"print\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the file is insered.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 171,
            "description": "This method simulate a key event. It's used for testing purpose.",
            "itemtype": "method",
            "name": "simulateKey",
            "static": 1,
            "params": [
                {
                    "name": "keyCode",
                    "description": "The Key Code of the key to simulate.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The type of event: down, up or press.",
                    "type": "String"
                },
                {
                    "name": "modifiers",
                    "description": "A dictionary of modifier keys (ex. { \"ctrl\": \"true\" }).",
                    "type": "Object"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 191,
            "description": "This method simulate a mouse event. It's used for testing purpose.",
            "itemtype": "method",
            "name": "simulateClick",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "An element which will trigger the mouse event.",
                    "type": "HTMLElement"
                },
                {
                    "name": "x",
                    "description": "(optional) The horizontal coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "(optional) The vertical coordinate.",
                    "type": "Number"
                },
                {
                    "name": "(optional)",
                    "description": "type The type of mouse event: down, up, move.",
                    "type": "String"
                },
                {
                    "name": "(optional)",
                    "description": "button The button index (ex. 0 for the left button).",
                    "type": "Number"
                },
                {
                    "name": "(optional)",
                    "description": "wheel The wheel value.",
                    "type": "Number"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 124,
            "description": "Given a ray, and some params about the object, determines the point pointed by the ray in the scene,\n only considering the projection on the floor ( not considering walls or objects that may be on the path )",
            "itemtype": "method",
            "name": "resolvePlaneConstraint",
            "params": [
                {
                    "name": "objectBox",
                    "description": "the object, as a Bounding Box Oriented along y axis",
                    "type": "ObjectHelper.OyBB"
                },
                {
                    "name": "ray_",
                    "description": "the ray which will determine the new position of the object box",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "flyY",
                    "description": "if false, the object is not flying, else the elevation where the object is flying",
                    "type": "Boolean or Number"
                },
                {
                    "name": "grab",
                    "description": "the vector from the center of the box to the point where it is grabbed",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "floorY",
                    "description": "elevation of the floor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the point pointed by the ray with this resolution",
                "type": "BABYLON.Vector3"
            },
            "class": "ObjectHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 200,
            "description": "Sets the AABB in order to define the minimal volume that encloses the OyBB given in argument.\n/!\\ The resulting AABB may not fit exactly the OyBB volume due to rotation limitations.",
            "itemtype": "method",
            "name": "copyFromOyBB",
            "params": [
                {
                    "name": "OyBB",
                    "description": "the Bounding Box Oriented along y axis",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 211,
            "description": "Sets the AABB in order to define the minimal volume that encloses the OBB given in argument.\n/!\\ The resulting AABB may not fit exactly the OBB volume due to rotation limitations.",
            "itemtype": "method",
            "name": "copyFromOBB",
            "params": [
                {
                    "name": "OBB",
                    "description": "the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 290,
            "description": "Sets the OBB in order to define the same volume as the AABB given in argument.\nThe resulting OBB fits exactly the volume.",
            "itemtype": "method",
            "name": "copyFromAABB",
            "params": [
                {
                    "name": "AABB",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.OBB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 347,
            "description": "Sets the OBB in order to define the same volume as the OBB given in argument.\nThe resulting OBB fits exactly the volume.",
            "itemtype": "method",
            "name": "copyFromOyBB",
            "params": [
                {
                    "name": "OyBB",
                    "description": "the Bounding Box Oriented along y axis",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.OBB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 525,
            "description": "Tests the collision in one dimension between two intervals [a1,b1] , [a2,b2]\n\na1------b1\n       a2------------b2\n\n without numeric imprecision is a2 < b1 == a1 < b2",
            "itemtype": "method",
            "name": "interval",
            "params": [
                {
                    "name": "a1",
                    "description": "the min of the 1st interval",
                    "type": "Number"
                },
                {
                    "name": "b1",
                    "description": "the max of the 1st interval",
                    "type": "Number"
                },
                {
                    "name": "a2",
                    "description": "the min of the 2nd interval",
                    "type": "Number"
                },
                {
                    "name": "b2",
                    "description": "the max of the 2nd interval",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 550,
            "description": "Tests the collision between a ray and an Axis Aligned Bounding Box",
            "itemtype": "method",
            "name": "rayToAABB",
            "params": [
                {
                    "name": "o",
                    "description": "the origin of the ray",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "v",
                    "description": "the direction of the ray",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, else return a number t such that o+v*t is the point where the ray first collides the box,\n /!\\ t can be 0 ( beware of untyped test )"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 606,
            "description": "Tests the collision between two Axis Aligned Bounding Boxes",
            "itemtype": "method",
            "name": "AABBtoAABB",
            "params": [
                {
                    "name": "box",
                    "description": "1st Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "2nd Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 622,
            "description": "Tests the collision between an Axis Aligned Bounding Box and an Oriented Bounding Box",
            "itemtype": "method",
            "name": "AABBtoOBB",
            "params": [
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 746,
            "description": "Tests the collision between an Axis Aligned Bounding Box and a Bounding Box Oriented along y axis",
            "itemtype": "method",
            "name": "AABBtoOyBB",
            "params": [
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "the Bounding Box Oriented along Y axis",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 812,
            "description": "Tests the collision between two Oriented Bounding Boxes",
            "itemtype": "method",
            "name": "OBBtoOBB",
            "params": [
                {
                    "name": "box",
                    "description": "1st Oriented Bounding Box",
                    "type": "OBB"
                },
                {
                    "name": "box",
                    "description": "2nd Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 886,
            "description": "Tests the collision between a triangle and an Axis Aligned Bounding Box",
            "itemtype": "method",
            "name": "triangleToAABB",
            "params": [
                {
                    "name": "trianglesPoints",
                    "description": "three points which are the vertices of the triangle",
                    "type": "BABYLON.Vector3[]"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 1010,
            "description": "Tests the collision between a mesh and an Axis Aligned Bounding Box.\n/!\\ This method has a high impact on performance, use with caution.",
            "itemtype": "method",
            "name": "MeshToAABB",
            "params": [
                {
                    "name": "worldMatrix",
                    "description": "the transformation matrix of the mesh",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "positions",
                    "description": "indices of the mesh vertices, as returned by babylon.Mesh.getVertexBuffer ( ie vertices coordinates concatenated in an array )",
                    "type": "Number[]"
                },
                {
                    "name": "indices",
                    "description": "indices of the face vertices, as returned by babylon.Mesh.getVertexBuffer ( ie faces indices concatenated in an array )",
                    "type": "Number[]"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 18,
            "description": "COLOR_ACTIVE_STROKE",
            "itemtype": "property",
            "name": "COLOR_ACTIVE_STROKE",
            "type": "{String}",
            "default": "\"#89B808\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 27,
            "description": "COLOR_ACTIVE_STROKE_DARKER",
            "itemtype": "property",
            "name": "COLOR_ACTIVE_STROKE_DARKER",
            "type": "{String}",
            "default": "\"#6C9104\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 36,
            "description": "COLOR_ACTIVE_FILL",
            "itemtype": "property",
            "name": "COLOR_ACTIVE_FILL",
            "type": "{String}",
            "default": "\"rgba(137, 184, 8, 0.2)\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 45,
            "description": "COLOR_ACTIVE_LARGEZONE_FILL",
            "itemtype": "property",
            "name": "COLOR_ACTIVE_LARGEZONE_FILL",
            "type": "{String}",
            "default": "\"rgba(137, 137, 137, 0.5)\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 54,
            "description": "COLOR_INACTIVE_STROKE",
            "itemtype": "property",
            "name": "COLOR_INACTIVE_STROKE",
            "type": "{String}",
            "default": "\"#777777\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 63,
            "description": "COLOR_INACTIVE_FILL",
            "itemtype": "property",
            "name": "COLOR_INACTIVE_FILL",
            "type": "{String}",
            "default": "\"rgba(90, 119, 119, 0.1)\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 72,
            "description": "COLOR_BACKGROUND",
            "itemtype": "property",
            "name": "COLOR_BACKGROUND",
            "type": "{String}",
            "default": "\"#FAFAFA\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 81,
            "description": "COLOR_ANNOTATION",
            "itemtype": "property",
            "name": "COLOR_ANNOTATION",
            "type": "{String}",
            "default": "\"#888\"",
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 91,
            "description": "Draws a simple point.",
            "itemtype": "method",
            "name": "drawPoint",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 108,
            "description": "Draws a point when it is hovered.",
            "itemtype": "method",
            "name": "drawPointHover",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 132,
            "description": "Draws an angle.",
            "itemtype": "method",
            "name": "drawAngle",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level. Not taken into account for now.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "radius",
                    "description": "Radius of the arc symbol.",
                    "type": "Number"
                },
                {
                    "name": "angle0",
                    "description": "Angle 0, based on the x-axis.",
                    "type": "Number"
                },
                {
                    "name": "angle1",
                    "description": "Angle 1, based on the x-axis.",
                    "type": "Number"
                },
                {
                    "name": "clockwise",
                    "description": "Direction of the arc.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 178,
            "description": "Draws a segment.",
            "itemtype": "method",
            "name": "drawSegment",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 209,
            "description": "Draws an arc set by a control point.",
            "itemtype": "method",
            "name": "drawArc",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "cp",
                    "description": "Position of the control point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 243,
            "description": "Draws a grip.",
            "itemtype": "method",
            "name": "drawGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "Rotation.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 277,
            "description": "Draws a grip with a check icon at the end.",
            "itemtype": "method",
            "name": "drawCheckGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "Rotation.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 319,
            "description": "Draws a grip with a cancel icon at the end.",
            "itemtype": "method",
            "name": "drawCancelGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "Rotation angle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 361,
            "description": "Draws a segment with grips.",
            "itemtype": "method",
            "name": "drawGripSegment",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw for the first grip [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw for the second grip [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "Rotation.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 398,
            "description": "Draws arrows.",
            "itemtype": "method",
            "name": "drawArrows",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "distance",
                    "description": "Distance des flèches par rapport au centre définit par `pos`.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 438,
            "description": "Draws a measure.",
            "itemtype": "method",
            "name": "drawMeasure",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "Text displayed at the center of the measure.",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "Color.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "wnp.Symbols2D.COLOR_ANNOTATION"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 505,
            "description": "Draws a check icon.",
            "itemtype": "method",
            "name": "drawCursorCheck",
            "params": [
                {
                    "name": "ctx",
                    "description": "The context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 544,
            "description": "Debug function to draw all symbols",
            "itemtype": "method",
            "name": "_drawAllSymbols",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\uuid.js",
            "line": 16,
            "description": "V4 UUID generator\n\nhttp://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript",
            "itemtype": "method",
            "name": "uuid4",
            "static": 1,
            "return": {
                "description": "Generated UUID",
                "type": "String"
            },
            "class": "wnp.uuid",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Logger.js",
            "line": 13,
            "description": "Displays a standard message in the browser's console. (alias to console.log).",
            "itemtype": "method",
            "name": "writeMessage",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 25,
            "description": "Displays a warning message in the browser's console. (alias to console.warn).",
            "itemtype": "method",
            "name": "writeWarning",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 37,
            "description": "Displays an error message in the browser's console. (alias to console.error).",
            "itemtype": "method",
            "name": "writeError",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 49,
            "description": "Displays a message in the HTML debug console.",
            "itemtype": "method",
            "name": "writeOutMessage",
            "static": 1,
            "params": [
                {
                    "name": "messageText",
                    "description": "A message to show.",
                    "type": "String"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 62,
            "description": "Clears the HTML debug console.",
            "itemtype": "method",
            "name": "clearConsole",
            "static": 1,
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 74,
            "description": "Enables or disables the debugger.",
            "itemtype": "method",
            "name": "setDebugMode",
            "params": [
                {
                    "name": "enabled",
                    "description": "Set to ’true’ to enable or ’false’ to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 19,
            "description": "Starts the timer.",
            "itemtype": "method",
            "name": "start",
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 27,
            "description": "Updates delta time.",
            "itemtype": "method",
            "name": "update",
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 37,
            "description": "Gets elapsedTime since the start.",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "elapsedTime Returns the elpased time since the last update.",
                "type": "Number"
            },
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 46,
            "description": "Gets the delta time since the last update.",
            "itemtype": "method",
            "name": "getDeltaTime",
            "return": {
                "description": "deltaTime Returns the delta time since the last update.",
                "type": "Number"
            },
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 13,
            "description": "Fired to add a menu item into the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.add",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 19,
            "description": "Fired by TransformComponent3D to change the translation of an object.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.translation",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 25,
            "description": "Fired to delete a menu item from the sub menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.delete",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 31,
            "description": "Fired when all 3D wall meshes are ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.wallsReady",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 38,
            "description": "Fired when the action to add an overture is started.",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddOverture",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 44,
            "description": "Fired to decorate an object with a material.",
            "itemtype": "event",
            "name": "wnp.engine3D.decorate",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 50,
            "description": "Fired to refresh the 3D renderer.",
            "deprecated": true,
            "itemtype": "event",
            "name": "wnp.engine3D.refreshGL",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 56,
            "description": "Fired when the configurator is needed for an object.",
            "itemtype": "event",
            "name": "wnp.request.configurator.start",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 62,
            "description": "Fired when a new plan is ready.",
            "itemtype": "event",
            "name": "wnp.request.newPlanReady",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 68,
            "description": "Fired when rooms are ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.roomsReady",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 74,
            "description": "Fired when the user requests a change in wall transparency",
            "itemtype": "event",
            "name": "wnp.request.switch-transparency",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 79,
            "description": "Fired to stop the group configurator component.",
            "itemtype": "event",
            "name": "wnp.engine3D.groupConfigurator.stop",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 85,
            "description": "Fired by the Mouse/Pointer handler when zoom-out is detected.",
            "itemtype": "event",
            "name": "wnp.engine3D.zoom-out",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 91,
            "description": "Fired to add a menu item into the top menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.add",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 97,
            "description": "Fired in the initialization process when the structure is ready.",
            "itemtype": "event",
            "name": "wnp.core.initialized",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 103,
            "description": "Fired when a context menu has been opened.",
            "itemtype": "event",
            "name": "wnp.widget.contextMenu..opened",
            "type": "MENU_NAME",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 109,
            "description": "Fired to remove a menu item from the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.remove",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 115,
            "description": "Fired to show the 'About' window",
            "itemtype": "event",
            "name": "wnp.ui.showAboutWindow",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 121,
            "description": "Fired when the subslope are ready and drawn.",
            "itemtype": "event",
            "name": "wnp.engine3D.subslopesReady",
            "params": [
                {
                    "name": "floor",
                    "description": "3D Floor mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "Related floor structure.",
                    "type": "FloorStructure"
                },
                {
                    "name": "walls",
                    "description": "The resultant wall mesh for this floor (The subslopes are carving the wall mesh when built).",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 130,
            "description": "Fired when an object is refreshed and if the history is needed.",
            "itemtype": "event",
            "name": "wnp.request.historyAction",
            "params": [
                {
                    "name": "component",
                    "description": "The component of the action",
                    "type": "BaseComponent3D"
                },
                {
                    "name": "object",
                    "description": "The target.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "params",
                    "description": "Params of the history.",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The type of action done.",
                    "type": "String"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 140,
            "description": "Fired when the user requests a screenshot.",
            "itemtype": "event",
            "name": "wnp.request.takeScreenshot",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 146,
            "description": "Fired to quit Wanaplan.",
            "itemtype": "event",
            "name": "wnp.request.exit",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 152,
            "description": "Fired to ask the configurator to start an 'Animation-In'.",
            "itemtype": "event",
            "name": "wnp.request.configurator.animationIn.start",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 158,
            "description": "Fired when the configurator needs to be hidden.",
            "itemtype": "event",
            "name": "wnp.request.configurator.cancel",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 164,
            "description": "Fired to clone an object.",
            "itemtype": "event",
            "name": "wnp.request.object.clone",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 170,
            "description": "Fired to ask the configurator to start an 'Animation-Out'.",
            "itemtype": "event",
            "name": "wnp.request.configurator.animationOut.start",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 176,
            "description": "Fired when a floor needs to be deleted.",
            "itemtype": "event",
            "name": "wnp.request.floorDeleted",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 182,
            "description": "Fired to remove a menu item from the main menu.",
            "itemtype": "event",
            "name": "\"wnp.menu.main.remove",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 188,
            "description": "Fired when the user quits the subslope edit mode.",
            "itemtype": "event",
            "name": "wnp.engine2d.onModeSubSlopeEnd",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 194,
            "description": "Fired to request the save of a structure.",
            "itemtype": "event",
            "name": "wnp.request.saveStructure",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 200,
            "description": "Fired to unselect the selected item in the top menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.deselect",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 206,
            "description": "Fired when enabling wall transparency.",
            "itemtype": "event",
            "name": "wnp.engine3d.wallTransparency.on",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 211,
            "description": "Fired once the subslope overtures are created.",
            "itemtype": "event",
            "name": "wnp.engine3D.subslopeOverturesReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the wall.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 221,
            "description": "Fired when the user requests the add of a stairway in the menu.",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddStairway",
            "params": [
                {
                    "name": "stairwayType",
                    "description": "Type of the stairway. Can be 'straight' or 'spiral'.",
                    "type": "String"
                },
                {
                    "name": "bearing",
                    "description": "Activates the bearing on the geometry.",
                    "type": "Boolean"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 228,
            "description": "Fired when an object is rebuilt.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.refresh",
            "params": [
                {
                    "name": "object",
                    "description": "The refreshed mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 235,
            "description": "Fired when a click is made on the scene.",
            "itemtype": "event",
            "name": "wnp.engine3D.click.collided",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 241,
            "description": "Fired by the Info widget when the user clicks on it.",
            "itemtype": "event",
            "name": "wnp.engine3D.info",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 247,
            "description": "Fired by the Mouse/Pointer handler when a double click is detected.",
            "itemtype": "event",
            "name": "wnp.engine3D.double-click",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 253,
            "description": "Fired to close a Frame Window.",
            "itemtype": "event",
            "name": "wnp.ui.frame.close",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 259,
            "description": "Fired to cancel the group configurator component.",
            "itemtype": "event",
            "name": "wnp.engine3D.groupConfigurator.cancel",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 265,
            "description": "Fired when the 3D camera has moved.",
            "itemtype": "event",
            "name": "wnp.engine3D.camera.move",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 271,
            "description": "Fired to start the group configurator component.",
            "itemtype": "event",
            "name": "wnp.engine3D.groupConfigurator.start",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 277,
            "description": "Fired by the programmable loader to add a new programmable.",
            "itemtype": "event",
            "name": "wnp.engine3D.addProgrammable",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 283,
            "description": "Fired when a context menu has been closed.",
            "itemtype": "event",
            "name": "wnp.widget.contextMenu.closed",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 289,
            "description": "Fired to replace a sub menu item.",
            "itemtype": "event",
            "name": "wnp.menu.top.sub.replace",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 295,
            "description": "Fired to change the background.",
            "itemtype": "event",
            "name": "wnp.engine2d.backgroundChange",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 301,
            "description": "Fired when an input has been detected (click, touch, etc.).",
            "itemtype": "event",
            "name": "wnp.input.pointerchanged",
            "params": [
                {
                    "name": "inputStatus",
                    "description": "an object containing all states of the pointer manager",
                    "type": "Object"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 308,
            "description": "Fired when a context menu has been opened.",
            "itemtype": "event",
            "name": "wnp.widget.contextMenu.opened",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 314,
            "description": "Fired when the decoration brush is ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.brushReady",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 320,
            "description": "Fired to close a popup.",
            "itemtype": "event",
            "name": "wnp.request.closePopup",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 326,
            "description": "Fired to create an object.",
            "itemtype": "event",
            "name": "wnp.request.object.create",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 332,
            "description": "Fired when a click is made on an instance of `Menu`.",
            "itemtype": "event",
            "name": "wnp.menu.click",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 338,
            "description": "Fired when the user stops dragging the subslope.",
            "itemtype": "event",
            "name": "wnp.subslope.drag-end",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 344,
            "description": "Fired when the TransformComponent begins to transform the position/rotation of an object.  \nThis will be followed by a `wnp.engine3D.object.end-transform` event.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.start-transform",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 352,
            "description": "Fired when the configurator is needed for a group.",
            "itemtype": "event",
            "name": "wnp.request.groupConfigurator.start",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 358,
            "description": "Fired to start printing the plan.",
            "itemtype": "event",
            "name": "wnp.request.print",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 364,
            "description": "Fired by the Mouse/Pointer handler when a drag starts.",
            "itemtype": "event",
            "name": "wnp.engine3D.drag-start",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 370,
            "description": "Fired when an object is created.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.create",
            "params": [
                {
                    "name": "object",
                    "description": "The created mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "objectStructure",
                    "description": "The involved object structure.",
                    "type": "ObjectStructure"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 378,
            "description": "Fired to stop the configurator.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.stop",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 384,
            "description": "Fired when the TransformComponent ends to transform the position/rotation of an object.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.end-transform",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 390,
            "description": "Fired after an update of the zoom value of the 2D canvas.",
            "itemtype": "event",
            "name": "wnp.request.zoomUpdated",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 396,
            "description": "Fired to add a menu item into the main menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 402,
            "description": "Fired when the delete button is pushed while a mesh is selected.",
            "itemtype": "event",
            "name": "wnp.request.object.remove",
            "params": [
                {
                    "name": "object",
                    "description": "The currently selected object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "FloorStructure"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 410,
            "description": "Fired when the TransformComponent just rotated an object on the scene.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.rotated",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "True if the TransformComponent is currently waiting for the end of the transformation to notify and set up the history.",
                    "type": "Boolean"
                },
                {
                    "name": "newValue",
                    "description": "The new rotation of the object.",
                    "type": "BABLYON.Vector3"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 418,
            "description": "Fired to start the configurator.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.start",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 424,
            "description": "Fired once the wall overtures are created.",
            "itemtype": "event",
            "name": "wnp.engine3D.overturesReady",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current floor structure.",
                    "type": "FloorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the walls.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 433,
            "description": "Fired when a floor is ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.floorReady",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 439,
            "description": "Fired when a new plan needs to be created.",
            "itemtype": "event",
            "name": "wnp.request.newPlan",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 445,
            "description": "Fired when the message box is opened.",
            "itemtype": "event",
            "name": "wnp.ui.messagebox.opened",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 451,
            "description": "Fired when the user clicks on the fullscreen toggle button.",
            "itemtype": "event",
            "name": "wnp.request.toggleFullscreen",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 457,
            "description": "Fired when a floor needs to be selected.",
            "itemtype": "event",
            "name": "wnp.request.floorSelected",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 463,
            "description": "Fired by the configurator component when an 'Animation-In' begins.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationIn.begin",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 469,
            "description": "Fired when the transform of an object is modified.",
            "itemtype": "event",
            "name": "wnp.engine3D.UIobject.transform",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 475,
            "description": "Fired by the configurator panel to update the rotation of the selected object.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.rotate",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 481,
            "description": "Fired by the Mouse/Pointer handler when the pointer/mouse is clicked/pressed down.",
            "itemtype": "event",
            "name": "wnp.engine3D.mousedown",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 487,
            "description": "Fired when a 3D widget is no longer used and is disposed of.",
            "itemtype": "event",
            "name": "wnp.engine3D.UIobject.dispose",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 493,
            "description": "Fired when a floor needs to be added.",
            "itemtype": "event",
            "name": "wnp.request.floorAdded",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 499,
            "description": "Fired to request a save of the history.",
            "itemtype": "event",
            "name": "wnp.request.saveHistory",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 505,
            "description": "Fired by the Mouse/Pointer handler when a drag occurred (aka move).",
            "itemtype": "event",
            "name": "wnp.engine3D.dragging",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 511,
            "description": "Fired when the user enters the subslope edit mode.",
            "itemtype": "event",
            "name": "wnp.engine2d.onEditSubSlope",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 517,
            "description": "Fired when the user changes the camera.",
            "itemtype": "event",
            "name": "wnp.engine3D.cameraChanged",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 523,
            "description": "Fired by the Mouse/Pointer handler when the pointer/mouse is moving.",
            "itemtype": "event",
            "name": "wnp.engine3D.mouse-move",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 529,
            "description": "Fired to disable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.disable-orbit-camera",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 535,
            "description": "Fired when an item from main menu needs to be deselected.",
            "itemtype": "event",
            "name": "wnp.menu.main.deselect",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 541,
            "description": "Fired by the Mouse/Pointer handler when zoom-in is detected.",
            "itemtype": "event",
            "name": "wnp.engine3D.zoom-in",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 547,
            "description": "Fired to show/hide the left menu on mobile devices",
            "itemtype": "event",
            "name": "wnp.mobile.toggleMenu",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 553,
            "description": "Fired when a local structure has been successfully loaded.",
            "itemtype": "event",
            "name": "wnp.structure.locale.loaded",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 559,
            "description": "Fired by the Mouse/Pointer handler when a drag is done.",
            "itemtype": "event",
            "name": "wnp.engine3D.drag-end",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 565,
            "description": "Fired by the configurator component when an animation is canceled.",
            "itemtype": "event",
            "name": "wnp.request.configurator.animation.cancel",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 571,
            "description": "Fired to change the material of the ground",
            "itemtype": "event",
            "name": "wnp.engine3D.changeGround",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 577,
            "description": "Fired when the graphics context has changed.",
            "itemtype": "event",
            "name": "wnp.contextChanged",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 583,
            "description": "Fired when a color has been selected.",
            "itemtype": "event",
            "name": "wnp.core.colorSelected",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 589,
            "itemtype": "event",
            "name": "wnp.editionComponent.removeObject",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 595,
            "description": "Fired on key down. Same parameters as the `keydown` standard javascript event.",
            "itemtype": "event",
            "name": "wnp.keyboardManager.keyDown",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 601,
            "description": "Fired to dispose of an object.",
            "itemtype": "event",
            "name": "wnp.request.object.dispose",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 607,
            "description": "Fired when all floors are ready.",
            "itemtype": "event",
            "name": "wnp.engine3D.allFloorsReady",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 613,
            "description": "Fired to close the context menu.",
            "itemtype": "event",
            "name": "wnp.engine2D.contextMenu.close",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 619,
            "description": "Fired when a paint texture is chosen in the decoration menu.",
            "itemtype": "event",
            "name": "wnp.engine3D.paint",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 625,
            "description": "Fired to hide the main loader which appears during the start process.",
            "itemtype": "event",
            "name": "wnp.core.hideLoader",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 631,
            "description": "Fired to clone an object",
            "itemtype": "event",
            "name": "wnp.engine3D.object.clone",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 637,
            "description": "Fired to delete a menu item from the top menu.",
            "itemtype": "event",
            "name": "wnp.menu.top.delete",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 643,
            "description": "Fired when the TransformComponent just translated an object on the scene.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.translate",
            "params": [
                {
                    "name": "object",
                    "description": "The involved object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "True if the TransformComponent is currently waiting for the end of the transformation to notify and set up the history.",
                    "type": "Boolean"
                },
                {
                    "name": "newValue",
                    "description": "The new position of the object.",
                    "type": "BABLYON.Vector3"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 651,
            "description": "Fired to change the language on wanaplan",
            "itemtype": "event",
            "name": "wnp.request.changeLang",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 657,
            "description": "Fired when the user requests the add of a subslopeOverture (click on the button)",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddSubSlopeOverture",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 662,
            "description": "Fired on key up. Same parameters as the `keyup` standard javascript event.",
            "itemtype": "event",
            "name": "wnp.keyboardManager.keyUp",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 668,
            "description": "Fired when a context menu has been closed.",
            "itemtype": "event",
            "name": "wnp.widget.contextMenu..closed",
            "type": "MENU_NAME",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 674,
            "description": "Fired to change the material of the sky",
            "itemtype": "event",
            "name": "wnp.engine3D.changeSky",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 680,
            "description": "Fired when a 3D widget is created.",
            "itemtype": "event",
            "name": "wnp.engine3D.UIobject.create",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 686,
            "description": "Fired by the configurator component when an 'Animation-Out' begins.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationOut.begin",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 692,
            "description": "Fired by the Mouse/Pointer handler when a click is detected.",
            "itemtype": "event",
            "name": "wnp.engine3D.click",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 698,
            "description": "Fired to enable the orbit camera.",
            "itemtype": "event",
            "name": "wnp.request.enable-orbit-camera",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 704,
            "description": "Fired to zoom the camera.",
            "itemtype": "event",
            "name": "wnp.engine3D.camera.zoom",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 710,
            "description": "Fired when a mesh is disposed of.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.dispose",
            "params": [
                {
                    "name": "object",
                    "description": "The concerned mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 717,
            "description": "Fired to replace a top menu item.",
            "itemtype": "event",
            "name": "wnp.menu.top.replace",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 723,
            "description": "Fired by the configurator component when an 'Animation-Out' is done.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationOut.end",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 729,
            "description": "Fired to replace a menu item from the main menu with another.",
            "itemtype": "event",
            "name": "wnp.menu.main.replace",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 735,
            "description": "Fired when quitting Wanaplan.",
            "itemtype": "event",
            "name": "wnp.request.exited",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 741,
            "description": "Fired when disabling wall transparency.",
            "itemtype": "event",
            "name": "wnp.engine3d.wallTransparency.off",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 746,
            "description": "Fired when the action to add an overture is done.",
            "itemtype": "event",
            "name": "wnp.engine2d.onAddOvertureEnd",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 752,
            "description": "Fired by the configurator component when an 'Animation-In' is done.",
            "itemtype": "event",
            "name": "wnp.engine3D.configurator.animationIn.end",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 758,
            "description": "Fired when the message box is closed.",
            "itemtype": "event",
            "name": "wnp.ui.messagebox.closed",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "js\\_extracted_events.js",
            "line": 764,
            "description": "Fired to lock/unlock the drag action on scene.",
            "itemtype": "event",
            "name": "wnp.component.lock",
            "class": "EVENTS",
            "module": "EVENTS"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 1,
            "description": "Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 13,
            "description": "## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 20,
            "description": "Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 25,
            "description": "Create the Jasmine environment. This is used to run all specs in a project.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 30,
            "description": "## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 77,
            "description": "Add all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 86,
            "description": "Expose the interface for adding custom equality testers.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 93,
            "description": "Expose the interface for adding custom expectation matchers",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 100,
            "description": "Expose the mock interface for the JavaScript timeout functions",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 107,
            "description": "## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 120,
            "description": "## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 133,
            "description": "The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 139,
            "description": "Filter which specs will be run by matching the start of the full name against the `spec` query param.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 150,
            "description": "Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 158,
            "description": "## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 173,
            "description": "Helper function for readability above.",
            "class": "",
            "module": "Wanaplan"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:1"
        },
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:1"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Floor\\FloorController.js:509"
        },
        {
            "message": "unknown tag: onfloorready",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:55"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:72"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperStructure.js:7"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:119"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:178"
        },
        {
            "message": "unknown tag: methode",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:405"
        },
        {
            "message": "param name missing: {Object3d}",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:516"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\CoreComponents\\Wall\\WallStructure.js:551"
        },
        {
            "message": "unknown tag: methode",
            "line": " js\\Components\\StandaloneComponent\\SA_NewComponent.js:41"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:7"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:73"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:82"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:95"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:132"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:146"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:167"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent3D.js:129"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent3D.js:139"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent3D.js:156"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Core\\Api\\Api.e3D.js:161"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Core\\Api\\Api.e3D.js:172"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:1"
        },
        {
            "message": "Missing item type\nstart displaying the handles at every camera move",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:58"
        },
        {
            "message": "Missing item type\nstop displaying the handles",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:74"
        },
        {
            "message": "Missing item type\ndispose handle specified by the name, or all the handles if name is omitted",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:207"
        },
        {
            "message": "Missing item type\nfill the _availableHandlesobject with true for one handle if the object can be edited along this axis, flase else\nis based in the getPropertyName",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:271"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js:1"
        },
        {
            "message": "Missing item type\nlisten masterReshaper",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:1"
        },
        {
            "message": "Missing item type\ndisplay the handle when the object is resized, when false the handle will be hided",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:103"
        },
        {
            "message": "Missing item type\ndisplay the handle when the object is resized, when false the handle will be hided",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:108"
        },
        {
            "message": "Missing item type\nanimate the handle when the cursor is hover a face",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:113"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the new position of the dragged face",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:118"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the face when the cursor is over it",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:123"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the old face when it is dragged",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:128"
        },
        {
            "message": "Missing item type\nround the object dimension",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:133"
        },
        {
            "message": "Missing item type\ndebug option",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:138"
        },
        {
            "message": "Missing item type\nreturn the true bounding box, where position is the center of the box and dimension the dimension of the box",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:194"
        },
        {
            "message": "Missing item type\nThis component is responsible for notifying UI events to reshaper children.\nRegisters a unique reshaper with a askhand / releasehand mecanism\n\nAnswers events thrown by ConfiguratorModComponent",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:1"
        },
        {
            "message": "Missing item type\nlaunchs the animation to focus the camera on the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:99"
        },
        {
            "message": "Missing item type\ncancel the animation, leave the camera where it is",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:189"
        },
        {
            "message": "Missing item type\ngo back to primar camera state",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:203"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js:465"
        },
        {
            "message": "Missing item type\n/!\\ does not support multimaterial yet",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:1"
        },
        {
            "message": "Missing item type\napply transparency on walls when they are between the target and the camera",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:73"
        },
        {
            "message": "Missing item type\napply transparency on all the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:78"
        },
        {
            "message": "Missing item type\napply transparency on all the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:83"
        },
        {
            "message": "Missing item type\nCarves the room when the floor is ready.\nTriggered on event `wnp.engine3D.floorReady`",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:55"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:224"
        },
        {
            "message": "Missing item type\noptions\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:230"
        },
        {
            "message": "Missing item type\noptions\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:275"
        },
        {
            "message": "Missing item type\nAdds several mandatory properties to the object3D.",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:405"
        },
        {
            "message": "Missing item type\ncas d'un rechargement à chaud depuis clic sur etage ou passage 2D 3D\n=> on repositionne les objets groupés dans leur reperes de floor pour eviter que ca pete",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:445"
        },
        {
            "message": "Missing item type\noptions\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "line": " js\\Components\\CoreComponents\\Overture\\OvertureStructure.js:402"
        },
        {
            "message": "Missing item type\noptions\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "line": " js\\Components\\CoreComponents\\Overture\\OvertureStructure.js:447"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js:25"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js:56"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js:346"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js:374"
        },
        {
            "message": "Missing item type\noptions\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "line": " js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js:613"
        },
        {
            "message": "Missing item type\noptions\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "line": " js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js:658"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js:106"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js:138"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:230"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:247"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:265"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:283"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:426"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:443"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:743"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:824"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js:851"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:88"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:128"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:156"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:174"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:186"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:205"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:215"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:247"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:262"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:462"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:508"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:521"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:543"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:567"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:601"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:719"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:756"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:773"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:799"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:818"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:840"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:989"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js:1199"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js:110"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js:124"
        },
        {
            "message": "Missing item type\noptions\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js:330"
        },
        {
            "message": "Missing item type\noptions\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "line": " js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js:375"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent2D.js:73"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent2D.js:75"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent3D.js:58"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent3D.js:60"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\MagnetismComponent\\MagnetismComponent3D.js:130"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\MagnetismComponent\\WorkingMagnetismComponent3D.js:159"
        },
        {
            "message": "Missing item type\ntranslation hack\n_(\"Capture\") _(\"New\") _(\"Save\") _(\"Options\") _(\"Change language\") _(\"Full Screen\")",
            "line": " js\\Components\\MenuComponents\\TopMenuComponent.js:2"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\OctreeComponent\\OctreePartitionerFactory.js:1"
        },
        {
            "message": "Missing item type\n// empiric proof\nvar dimension = new Point( Math.random() , Math.random() , Math.random() )\ndimension.normalize()\nvar s = computePropPath( 1000 , dimension )\nvar prob = new Point(\n    ( s.split('x').length-1 )/1000,\n    ( s.split('y').length-1 )/1000,\n    ( s.split('z').length-1 )/1000\n)\nprob.normalize()\nconsole.log( dimension )\nconsole.log( prob )",
            "line": " js\\Components\\OctreeComponent\\OctreePartitionerFactory.js:583"
        },
        {
            "message": "Missing item type\nClean the workspace and create a new plan.",
            "line": " js\\Components\\StandaloneComponent\\SA_NewComponent.js:41"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\GeneralOptionComponent2D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:73"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:75"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:429"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:431"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:487"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:489"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:57"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:59"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:69"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:71"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:16"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:18"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:30"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:32"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:54"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:56"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:69"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:71"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:43"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:45"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:54"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:56"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Box3.js:3"
        },
        {
            "message": "Missing item type\n*\n        Components management         *\n*",
            "line": " js\\Core\\Engine3D.js:308"
        },
        {
            "message": "Missing item type\n*\n        Collision detection           *\n*",
            "line": " js\\Core\\Engine3D.js:383"
        },
        {
            "message": "Missing item type\n*\n           Event handlers             *\n*",
            "line": " js\\Core\\Engine3D.js:439"
        },
        {
            "message": "Missing item type\n*\n      Lyfe cycle : State pattern      *\n*",
            "line": " js\\Core\\Engine3D.js:552"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:109"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:111"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:175"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:177"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:428"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:430"
        },
        {
            "message": "Missing item type\nObjet permettant de construire des materials.",
            "line": " js\\Core\\MaterialFactory.js:15"
        },
        {
            "message": "Missing item type\n*\n\t SUBMODULES DECLARATION\t   *\n \t\t\t\t\t\t\t   *",
            "line": " js\\Core\\_extra_docs.js:1"
        },
        {
            "message": "Missing item type\nRepresentation of the pillow like a cube but with 3*3*3 points\nTODO : uvs",
            "line": " js\\Helpers\\GeometryHelper.js:1258"
        },
        {
            "message": "Missing item type\nStarting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:1"
        },
        {
            "message": "Missing item type\n## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:13"
        },
        {
            "message": "Missing item type\nSince this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:20"
        },
        {
            "message": "Missing item type\nCreate the Jasmine environment. This is used to run all specs in a project.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:25"
        },
        {
            "message": "Missing item type\n## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:30"
        },
        {
            "message": "Missing item type\nAdd all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:77"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom equality testers.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:86"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom expectation matchers",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:93"
        },
        {
            "message": "Missing item type\nExpose the mock interface for the JavaScript timeout functions",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:100"
        },
        {
            "message": "Missing item type\n## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:107"
        },
        {
            "message": "Missing item type\n## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:120"
        },
        {
            "message": "Missing item type\nThe `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:133"
        },
        {
            "message": "Missing item type\nFilter which specs will be run by matching the start of the full name against the `spec` query param.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:139"
        },
        {
            "message": "Missing item type\nSetting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:150"
        },
        {
            "message": "Missing item type\n## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:158"
        },
        {
            "message": "Missing item type\nHelper function for readability above.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:173"
        }
    ]
}