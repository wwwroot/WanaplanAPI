{
    "project": {
        "name": "WanaPlan",
        "description": "",
        "version": "2.2.1",
        "url": "http://www.wanaplan.com/"
    },
    "files": {
        "js\\Components\\AvatarComponent\\AvatarComponent3D.js": {
            "name": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "modules": {
                "Component": 1
            },
            "classes": {
                "AvatarComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "modules": {},
            "classes": {
                "ConfiguratorModComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "modules": {},
            "classes": {
                "FloorComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorController.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "modules": {},
            "classes": {
                "FloorController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorStructure.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "modules": {},
            "classes": {
                "FloorStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "modules": {},
            "classes": {
                "HopperComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "modules": {},
            "classes": {
                "HopperComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "modules": {},
            "classes": {
                "HopperStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs\\Spiral.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs\\Spiral.js",
            "modules": {
                "Programmable": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\OBJImporter.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\OBJImporter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "modules": {},
            "classes": {
                "wnp.Programmable": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "modules": {},
            "classes": {
                "DecorationComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\DragComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "modules": {},
            "classes": {
                "DragComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "modules": {},
            "classes": {
                "EditionComponent3D": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\EphemeralInfoComponent.js": {
            "name": "js\\Components\\CoreComponents\\Object\\EphemeralInfoComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "modules": {},
            "classes": {
                "ObjectComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\ObjectStructure.js": {
            "name": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "modules": {},
            "classes": {
                "ObjectStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "modules": {},
            "classes": {
                "TransformObjectComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "modules": {},
            "classes": {
                "OvertureComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "modules": {},
            "classes": {
                "OvertureComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "modules": {},
            "classes": {
                "OvertureStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\Graph.js": {
            "name": "js\\Components\\CoreComponents\\Point\\Graph.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\Path.js": {
            "name": "js\\Components\\CoreComponents\\Point\\Path.js",
            "modules": {},
            "classes": {
                "Path": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\PointComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "modules": {},
            "classes": {
                "PointComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\PointStructure.js": {
            "name": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "modules": {},
            "classes": {
                "PointStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "modules": {},
            "classes": {
                "RoomComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "modules": {},
            "classes": {
                "RoomComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js",
            "modules": {},
            "classes": {
                "RoomHierarchy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomStructure.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "modules": {},
            "classes": {
                "RoomStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "modules": {},
            "classes": {
                "SpiralStairwayStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "modules": {},
            "classes": {
                "StairwayComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "modules": {},
            "classes": {
                "StairwayComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "modules": {},
            "classes": {
                "StairwayStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "modules": {},
            "classes": {
                "StraightStairwayStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "modules": {},
            "classes": {
                "SubSlopeComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "modules": {},
            "classes": {
                "SubSlopeComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "modules": {},
            "classes": {
                "subSlopeOvertureComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "modules": {},
            "classes": {
                "SubSlopeOvertureStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "modules": {},
            "classes": {
                "SubSlopeStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\PolygonWall.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "modules": {},
            "classes": {
                "PolygonWall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "modules": {},
            "classes": {
                "WallComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "modules": {},
            "classes": {
                "WallComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallPane3D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "modules": {},
            "classes": {
                "WallPane3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallStructure.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "modules": {},
            "classes": {
                "WallStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\DebugComponent\\DebugComponent2D.js": {
            "name": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\DebugComponent\\DebugComponent3D.js": {
            "name": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GridComponent\\GridComponent2D.js": {
            "name": "js\\Components\\GridComponent\\GridComponent2D.js",
            "modules": {},
            "classes": {
                "GridComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GridComponent\\GridComponent3D.js": {
            "name": "js\\Components\\GridComponent\\GridComponent3D.js",
            "modules": {},
            "classes": {
                "GridComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js": {
            "name": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\HistoryComponent\\HistoryComponent.js": {
            "name": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "modules": {},
            "classes": {
                "HistoryComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js": {
            "name": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "modules": {},
            "classes": {
                "BaseTopMenuComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\ExitComponent.js": {
            "name": "js\\Components\\InternalComponents\\ExitComponent.js",
            "modules": {},
            "classes": {
                "ExitComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\FullscreenComponent.js": {
            "name": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "modules": {},
            "classes": {
                "FullscreenComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\NewComponent.js": {
            "name": "js\\Components\\InternalComponents\\NewComponent.js",
            "modules": {},
            "classes": {
                "NewComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\OptionsComponent.js": {
            "name": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "modules": {},
            "classes": {
                "OptionsComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\SaveComponent.js": {
            "name": "js\\Components\\InternalComponents\\SaveComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js": {
            "name": "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js",
            "modules": {},
            "classes": {
                "ScreenshotMenuComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\LockComponent\\LockComponent.js": {
            "name": "js\\Components\\LockComponent\\LockComponent.js",
            "modules": {},
            "classes": {
                "LockComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js": {
            "name": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "modules": {},
            "classes": {
                "MagnetismComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js": {
            "name": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "modules": {},
            "classes": {
                "MagnetismComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MeasureComponent\\MeasureComponent.js": {
            "name": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "modules": {},
            "classes": {
                "MeasureComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MeasureComponent\\MeasureStructure.js": {
            "name": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "modules": {},
            "classes": {
                "MeasureStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MenuComponents\\TopMenuComponent.js": {
            "name": "js\\Components\\MenuComponents\\TopMenuComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MobileComponent\\MobileComponent.js": {
            "name": "js\\Components\\MobileComponent\\MobileComponent.js",
            "modules": {},
            "classes": {
                "MobileComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MobileComponent\\MobileInputComponent.js": {
            "name": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "modules": {},
            "classes": {
                "MobileInputComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js": {
            "name": "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js": {
            "name": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PedagoComponent\\PedagoComponent.js": {
            "name": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "modules": {},
            "classes": {
                "PedagoComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js": {
            "name": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "modules": {},
            "classes": {
                "HardwareScalingComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js": {
            "name": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PrintComponent\\PrintComponent2D.js": {
            "name": "js\\Components\\PrintComponent\\PrintComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PrintComponent\\PrintComponent3D.js": {
            "name": "js\\Components\\PrintComponent\\PrintComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\RemoteControlComponent\\RemoteControlComponent3D.js": {
            "name": "js\\Components\\RemoteControlComponent\\RemoteControlComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseComponent2D.js": {
            "name": "js\\Components\\BaseComponent2D.js",
            "modules": {},
            "classes": {
                "BaseComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseComponent3D.js": {
            "name": "js\\Components\\BaseComponent3D.js",
            "modules": {},
            "classes": {
                "BaseComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseStructure.js": {
            "name": "js\\Components\\BaseStructure.js",
            "modules": {},
            "classes": {
                "BaseStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GeneralOptionComponent2D.js": {
            "name": "js\\Components\\GeneralOptionComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ProgrammableLoader.js": {
            "name": "js\\Components\\ProgrammableLoader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Floor\\2D.js": {
            "name": "js\\Core\\Api\\Floor\\2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\widget\\Move.js": {
            "name": "js\\Core\\Api\\widget\\Move.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Api.js": {
            "name": "js\\Core\\Api\\Api.js",
            "modules": {},
            "classes": {
                "API": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Menu.js": {
            "name": "js\\Core\\Api\\Menu.js",
            "modules": {},
            "classes": {
                "Menu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Cameras\\OrbitCamera.js": {
            "name": "js\\Core\\Cameras\\OrbitCamera.js",
            "modules": {},
            "classes": {
                "OrbitCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Input\\KeyboardManager.js": {
            "name": "js\\Core\\Input\\KeyboardManager.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "wnp.KeyboardManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Input\\PointerManager.js": {
            "name": "js\\Core\\Input\\PointerManager.js",
            "modules": {},
            "classes": {
                "PointerManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Input\\TouchManager.js": {
            "name": "js\\Core\\Input\\TouchManager.js",
            "modules": {},
            "classes": {
                "TouchManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Glass.js": {
            "name": "js\\Core\\Materials\\Glass.js",
            "modules": {},
            "classes": {
                "GlassMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Leather.js": {
            "name": "js\\Core\\Materials\\Leather.js",
            "modules": {},
            "classes": {
                "LeatherMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Matt.js": {
            "name": "js\\Core\\Materials\\Matt.js",
            "modules": {},
            "classes": {
                "MattMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Metal.js": {
            "name": "js\\Core\\Materials\\Metal.js",
            "modules": {},
            "classes": {
                "MetalMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Plastic.js": {
            "name": "js\\Core\\Materials\\Plastic.js",
            "modules": {},
            "classes": {
                "PlasticMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Sample.js": {
            "name": "js\\Core\\Materials\\Sample.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Textured.js": {
            "name": "js\\Core\\Materials\\Textured.js",
            "modules": {},
            "classes": {
                "TexturedMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Tile.js": {
            "name": "js\\Core\\Materials\\Tile.js",
            "modules": {},
            "classes": {
                "TileMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\White.js": {
            "name": "js\\Core\\Materials\\White.js",
            "modules": {},
            "classes": {
                "WhiteMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Wood.js": {
            "name": "js\\Core\\Materials\\Wood.js",
            "modules": {},
            "classes": {
                "WoodMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Elevation.js": {
            "name": "js\\Core\\Widgets\\Elevation.js",
            "modules": {
                "Widget": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Info.js": {
            "name": "js\\Core\\Widgets\\Info.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Rotator.js": {
            "name": "js\\Core\\Widgets\\Rotator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Box3.js": {
            "name": "js\\Core\\Box3.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\CameraFeatures.js": {
            "name": "js\\Core\\CameraFeatures.js",
            "modules": {},
            "classes": {
                "wnp.CameraFeatures": 1,
                "wnp.CameraFeatures.AnimationCancelor": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1,
                "wnp.CameraFeatures": 1
            }
        },
        "js\\Core\\Core.js": {
            "name": "js\\Core\\Core.js",
            "modules": {
                "Core": 1,
                "Helpers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Engine3D.js": {
            "name": "js\\Core\\Engine3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Material.js": {
            "name": "js\\Core\\Material.js",
            "modules": {
                "Wanaplan": 1
            },
            "classes": {
                "StandardMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\MaterialFactory.js": {
            "name": "js\\Core\\MaterialFactory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\MaterialInfo.js": {
            "name": "js\\Core\\MaterialInfo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials.js": {
            "name": "js\\Core\\Materials.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\DummyHelper.js": {
            "name": "js\\Helpers\\DummyHelper.js",
            "modules": {},
            "classes": {
                "Dummy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\GeometryHelper.js": {
            "name": "js\\Helpers\\GeometryHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\GlobalHelper.js": {
            "name": "js\\Helpers\\GlobalHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\HTMLHelper.js": {
            "name": "js\\Helpers\\HTMLHelper.js",
            "modules": {},
            "classes": {
                "GlobalHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\ObjectHelper.js": {
            "name": "js\\Helpers\\ObjectHelper.js",
            "modules": {},
            "classes": {
                "ObjectHelper": 1,
                "ObjectHelper.AABB": 1,
                "ObjectHelper.OBB": 1,
                "ObjectHelper.OyBB": 1,
                "ObjectHelper.collision": 1,
                "ObjectHelper.Interval": 1
            },
            "fors": {},
            "namespaces": {
                "ObjectHelper": 1
            }
        },
        "js\\Helpers\\Symbols2D.js": {
            "name": "js\\Helpers\\Symbols2D.js",
            "modules": {},
            "classes": {
                "wnp.Symbols2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\uuid.js": {
            "name": "js\\Helpers\\uuid.js",
            "modules": {},
            "classes": {
                "wnp.uuid": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Logger.js": {
            "name": "js\\Logger.js",
            "modules": {},
            "classes": {
                "Logger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\LoopTimer.js": {
            "name": "js\\LoopTimer.js",
            "modules": {},
            "classes": {
                "wnp.LoopTimer": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\bootstrap.js": {
            "name": "js\\bootstrap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\extensions.js": {
            "name": "js\\extensions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tools\\tests\\functionals\\js\\TestManager.js": {
            "name": "tools\\tests\\functionals\\js\\TestManager.js",
            "modules": {},
            "classes": {
                "TestManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js": {
            "name": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Wanaplan": {
            "name": "Wanaplan",
            "submodules": {
                "Component": 1,
                "Programmable": 1,
                "Input": 1,
                "Widget": 1,
                "Core": 1,
                "Helpers": 1
            },
            "classes": {
                "AvatarComponent3D": 1,
                "ConfiguratorModComponent3D": 1,
                "FloorComponent3D": 1,
                "FloorController": 1,
                "FloorStructure": 1,
                "HopperComponent2D": 1,
                "HopperComponent3D": 1,
                "HopperStructure": 1,
                "wnp.Programmable": 1,
                "DecorationComponent": 1,
                "DragComponent3D": 1,
                "EditionComponent3D": 1,
                "ObjectComponent3D": 1,
                "ObjectStructure": 1,
                "TransformObjectComponent3D": 1,
                "OvertureComponent2D": 1,
                "OvertureComponent3D": 1,
                "OvertureStructure": 1,
                "Path": 1,
                "PointComponent2D": 1,
                "PointStructure": 1,
                "RoomComponent2D": 1,
                "RoomComponent3D": 1,
                "RoomHierarchy": 1,
                "RoomStructure": 1,
                "SpiralStairwayStructure": 1,
                "StairwayComponent2D": 1,
                "StairwayComponent3D": 1,
                "StairwayStructure": 1,
                "StraightStairwayStructure": 1,
                "SubSlopeComponent2D": 1,
                "SubSlopeComponent3D": 1,
                "subSlopeOvertureComponent2D": 1,
                "SubSlopeOvertureStructure": 1,
                "SubSlopeStructure": 1,
                "PolygonWall": 1,
                "WallComponent2D": 1,
                "WallComponent3D": 1,
                "WallPane3D": 1,
                "WallStructure": 1,
                "GridComponent2D": 1,
                "GridComponent3D": 1,
                "HistoryComponent": 1,
                "BaseTopMenuComponent2D": 1,
                "ExitComponent": 1,
                "FullscreenComponent": 1,
                "NewComponent": 1,
                "OptionsComponent": 1,
                "ScreenshotMenuComponent": 1,
                "LockComponent": 1,
                "MagnetismComponent2D": 1,
                "MagnetismComponent3D": 1,
                "MeasureComponent": 1,
                "MeasureStructure": 1,
                "MobileComponent": 1,
                "MobileInputComponent": 1,
                "PedagoComponent": 1,
                "HardwareScalingComponent3D": 1,
                "BaseComponent2D": 1,
                "BaseComponent3D": 1,
                "BaseStructure": 1,
                "API": 1,
                "Menu": 1,
                "OrbitCamera": 1,
                "wnp.KeyboardManager": 1,
                "PointerManager": 1,
                "TouchManager": 1,
                "GlassMaterial": 1,
                "LeatherMaterial": 1,
                "MattMaterial": 1,
                "MetalMaterial": 1,
                "PlasticMaterial": 1,
                "TexturedMaterial": 1,
                "TileMaterial": 1,
                "WhiteMaterial": 1,
                "WoodMaterial": 1,
                "wnp.CameraFeatures": 1,
                "wnp.CameraFeatures.AnimationCancelor": 1,
                "StandardMaterial": 1,
                "Dummy": 1,
                "GlobalHelper": 1,
                "ObjectHelper": 1,
                "ObjectHelper.AABB": 1,
                "ObjectHelper.OBB": 1,
                "ObjectHelper.OyBB": 1,
                "ObjectHelper.collision": 1,
                "ObjectHelper.Interval": 1,
                "wnp.Symbols2D": 1,
                "wnp.uuid": 1,
                "Logger": 1,
                "wnp.LoopTimer": 1,
                "TestManager": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "namespaces": {
                "wnp": 1,
                "wnp.CameraFeatures": 1,
                "ObjectHelper": 1
            },
            "tag": "module",
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 5,
            "extends": "BaseComponent3D\n\nComponent which handle the transformation of object on the scene\nEvery object's transformation should be executed here\n\nHandle historization and magnetism\n\nHas a special behavior for on-dragging objects :\n  Instead of notifying every little step, merge togeter the transformation that occurs inside a beginTransformObject - endTransformObject period"
        },
        "Component": {
            "name": "Component",
            "submodules": {},
            "classes": {
                "AvatarComponent3D": 1,
                "ConfiguratorModComponent3D": 1,
                "FloorComponent3D": 1,
                "FloorController": 1,
                "FloorStructure": 1,
                "HopperComponent2D": 1,
                "HopperComponent3D": 1,
                "HopperStructure": 1,
                "DecorationComponent": 1,
                "DragComponent3D": 1,
                "EditionComponent3D": 1,
                "ObjectComponent3D": 1,
                "ObjectStructure": 1,
                "TransformObjectComponent3D": 1,
                "OvertureComponent2D": 1,
                "OvertureComponent3D": 1,
                "OvertureStructure": 1,
                "Path": 1,
                "PointComponent2D": 1,
                "PointStructure": 1,
                "RoomComponent2D": 1,
                "RoomComponent3D": 1,
                "RoomHierarchy": 1,
                "RoomStructure": 1,
                "SpiralStairwayStructure": 1,
                "StairwayComponent2D": 1,
                "StairwayComponent3D": 1,
                "StairwayStructure": 1,
                "StraightStairwayStructure": 1,
                "SubSlopeComponent2D": 1,
                "SubSlopeComponent3D": 1,
                "PolygonWall": 1,
                "WallComponent2D": 1,
                "WallComponent3D": 1,
                "WallPane3D": 1,
                "WallStructure": 1,
                "GridComponent2D": 1,
                "BaseTopMenuComponent2D": 1,
                "ExitComponent": 1,
                "FullscreenComponent": 1,
                "NewComponent": 1,
                "OptionsComponent": 1,
                "ScreenshotMenuComponent": 1,
                "LockComponent": 1,
                "MagnetismComponent2D": 1,
                "MagnetismComponent3D": 1,
                "MeasureComponent": 1,
                "MeasureStructure": 1,
                "MobileComponent": 1,
                "MobileInputComponent": 1,
                "PedagoComponent": 1,
                "HardwareScalingComponent3D": 1,
                "BaseComponent2D": 1,
                "BaseComponent3D": 1,
                "BaseStructure": 1,
                "wnp.CameraFeatures": 1,
                "wnp.CameraFeatures.AnimationCancelor": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1,
                "wnp.CameraFeatures": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 522,
            "description": "Wanaplan components."
        },
        "Programmable": {
            "name": "Programmable",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs\\Spiral.js",
            "line": 1,
            "description": "Programmable 3D meshes."
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "classes": {
                "wnp.KeyboardManager": 1,
                "PointerManager": 1,
                "TouchManager": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 11,
            "tag": "main",
            "itemtype": "main",
            "description": "Handling of user input devices."
        },
        "Widget": {
            "name": "Widget",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Widgets\\Elevation.js",
            "line": 1,
            "description": "3D Widgets"
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Core.js",
            "line": 1,
            "description": "Wanaplan Core.",
            "tag": "main",
            "itemtype": "main"
        },
        "Helpers": {
            "name": "Helpers",
            "submodules": {},
            "classes": {
                "GlobalHelper": 1,
                "ObjectHelper": 1,
                "ObjectHelper.AABB": 1,
                "ObjectHelper.OBB": 1,
                "ObjectHelper.OyBB": 1,
                "ObjectHelper.collision": 1,
                "ObjectHelper.Interval": 1,
                "wnp.Symbols2D": 1,
                "wnp.uuid": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "ObjectHelper": 1,
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Helpers\\uuid.js",
            "line": 10,
            "description": "Various static helper functions."
        }
    },
    "classes": {
        "AvatarComponent3D": {
            "name": "AvatarComponent3D",
            "shortname": "AvatarComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 9,
            "description": "This component is responsible to add a 3D avatar on the scene.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "ConfiguratorModComponent3D": {
            "name": "ConfiguratorModComponent3D",
            "shortname": "ConfiguratorModComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 6,
            "description": "This component is responsible of holding the state of the configurator\nstate = idle | animationIn | ready | animationOut\n\nlisten to event that alter this state\nevent cycle follow this pattern : \n\n wnp.request.configurator.start\n           |\n wnp.engine3D.configurator.animationIn.begin\n           |\n wnp.engine3D.configurator.animationIn.end\n           |\n wnp.engine3D.configurator.start\n           |\n           |\n wnp.request.configurator.stop\n           |\n wnp.engine3D.configurator.stop\n           |\n wnp.engine3D.configurator.animationOut.begin\n           |\n wnp.engine3D.configurator.animationOut.end\n           |\n           v\n\n if the animation component is not present, this component simulate the animationIn|Out event to ensure consistency with others components\n\n\n is also responsive of inhibe actions that should not be performed in configurator mode",
            "extends": "BaseComponent3D"
        },
        "FloorComponent3D": {
            "name": "FloorComponent3D",
            "shortname": "FloorComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 8,
            "description": "This component is responsible for handling the floor mesh containers in 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "FloorController": {
            "name": "FloorController",
            "shortname": "FloorController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 6,
            "description": "A remote control to interact with the floors.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "FloorStructure": {
            "name": "FloorStructure",
            "shortname": "FloorStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 7,
            "description": "Floor.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "HopperComponent2D": {
            "name": "HopperComponent2D",
            "shortname": "HopperComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 9,
            "description": "Hopper 2D.\nComponant which handles\n- the actions performed in 2D relative to the hopper. Such as ..\n     - adding a hopper\n     - displaying the context menu the hopper\n     - translating the hopper\n     - modifying the shape of the hopper ( moving / adding / removing points )\n- the 2D rendering of the hopper",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "HopperComponent3D": {
            "name": "HopperComponent3D",
            "shortname": "HopperComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 10,
            "description": "Hopper 3D.\nComponant which handles :\n- the 3D rendering of the hopper.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "HopperStructure": {
            "name": "HopperStructure",
            "shortname": "HopperStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 7,
            "description": "Hopper's structure.",
            "extends": "BaseStructure",
            "is_constructor": 1,
            "params": [
                {
                    "name": "points",
                    "description": "The polygon which defines the hopper shape, default is a 100cm large square.",
                    "type": "Array of BABYLON.Vector2",
                    "optional": true
                }
            ]
        },
        "wnp.Programmable": {
            "name": "wnp.Programmable",
            "shortname": "wnp.Programmable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 6,
            "description": "Abstract class from which all the programmables inherit.\n A programmable is responsible for exposing the parameters of an object and building the associated mesh.\n A programmable life cycle follows a strict process. See the wiki for more informations (github.com/wanadev/WanaplanAPI/wiki/Object).",
            "is_constructor": 1
        },
        "DecorationComponent": {
            "name": "DecorationComponent",
            "shortname": "DecorationComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 25,
            "description": "This component manages the decoration of all the objects on the scene.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan core.",
                    "type": "Core"
                }
            ]
        },
        "DragComponent3D": {
            "name": "DragComponent3D",
            "shortname": "DragComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 50,
            "description": "This component is responsible for handling the object moving by drag an drop.\nListen the drag envent, resolve it by detecting the object under the cursor.\nWhen a draggable object is draggend, resolve the new position computation using the projection of the cursor on the scene.\nThen apply the move using the transformComponent3D",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "EditionComponent3D": {
            "name": "EditionComponent3D",
            "shortname": "EditionComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 8,
            "description": "Component managing the user-guided edition of the 3D scene.\nManages all the interactions involving the modifications of the scene's geometry.\nNecessary when the scene can be edited by the user.\n > For instance, in viewer mode, this component is inactive.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "wnp.Core"
                }
            ]
        },
        "ObjectComponent3D": {
            "name": "ObjectComponent3D",
            "shortname": "ObjectComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 21,
            "description": "Handles the 3D object instanciation for wanaplan.",
            "is_constructor": 1
        },
        "ObjectStructure": {
            "name": "ObjectStructure",
            "shortname": "ObjectStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 9,
            "description": "Structure of an object.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "TransformObjectComponent3D": {
            "name": "TransformObjectComponent3D",
            "shortname": "TransformObjectComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 58,
            "description": "Component which handles the transformation of object on the scene\nEvery object's transformation should be executed here\n\nHandle historization and magnetism\n\nHas a special behavior for on-dragging objects :\n  Instead of notifying every little step, merge togeter the transformation that occurs inside a beginTransformObject - endTransformObject period",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "OvertureComponent2D": {
            "name": "OvertureComponent2D",
            "shortname": "OvertureComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 7,
            "description": "Overture component 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "OvertureComponent3D": {
            "name": "OvertureComponent3D",
            "shortname": "OvertureComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 10,
            "description": "Ouverture Component 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "OvertureStructure": {
            "name": "OvertureStructure",
            "shortname": "OvertureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 7,
            "description": "Ouverture structure.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "Path": {
            "name": "Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\Path.js",
            "line": 7,
            "description": "Chemins de points",
            "is_constructor": 1,
            "deprecated": true
        },
        "PointComponent2D": {
            "name": "PointComponent2D",
            "shortname": "PointComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 7,
            "description": "2D wall points.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "PointStructure": {
            "name": "PointStructure",
            "shortname": "PointStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 7,
            "description": "Wall point.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "RoomComponent2D": {
            "name": "RoomComponent2D",
            "shortname": "RoomComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 7,
            "description": "Rooms in 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "RoomComponent3D": {
            "name": "RoomComponent3D",
            "shortname": "RoomComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 6,
            "description": "This component handles rooms in the 3D context.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "RoomHierarchy": {
            "name": "RoomHierarchy",
            "shortname": "RoomHierarchy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js",
            "line": 7,
            "description": "Room Hierarchy tree.",
            "is_constructor": 1
        },
        "RoomStructure": {
            "name": "RoomStructure",
            "shortname": "RoomStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 9,
            "description": "A room object.\nMore info can be found in the [Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Rooms).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "SpiralStairwayStructure": {
            "name": "SpiralStairwayStructure",
            "shortname": "SpiralStairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 9,
            "description": "Stairway structure for the spiral stairway.",
            "is_constructor": 1,
            "extends": "wnp.stairwayStructure"
        },
        "StairwayComponent2D": {
            "name": "StairwayComponent2D",
            "shortname": "StairwayComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 11,
            "description": "Stairway Component 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "StairwayComponent3D": {
            "name": "StairwayComponent3D",
            "shortname": "StairwayComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 10,
            "description": "Stairway component 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "StairwayStructure": {
            "name": "StairwayStructure",
            "shortname": "StairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 10,
            "description": "The structure of a stairway.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "StraightStairwayStructure": {
            "name": "StraightStairwayStructure",
            "shortname": "StraightStairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 8,
            "description": "Stairway structure for the straight stairway.",
            "is_constructor": 1,
            "extends": "wnp.stairwayStructure"
        },
        "SubSlopeComponent2D": {
            "name": "SubSlopeComponent2D",
            "shortname": "SubSlopeComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 9,
            "description": "Creates and draws subslopes in 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "SubSlopeComponent3D": {
            "name": "SubSlopeComponent3D",
            "shortname": "SubSlopeComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 10,
            "description": "Creates and draws subslopes in 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "subSlopeOvertureComponent2D": {
            "name": "subSlopeOvertureComponent2D",
            "shortname": "subSlopeOvertureComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 7,
            "description": "SubSlopeOuverture 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "SubSlopeOvertureStructure": {
            "name": "SubSlopeOvertureStructure",
            "shortname": "SubSlopeOvertureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 9,
            "description": "The structure of the subslope overture.",
            "is_constructor": 1,
            "extends": "BaseStructure\n{String} type The type of the subslope.\n{Number} width The width of the subslope.\n{Number} height The height of the overture.\n{Number} thickness The thickness of the overture.\n{Number} nbCasement The number of the casement in the overture.\n{boolean} sliding The sliding or not on the overture.\n{} dormerRoof The roof of the dormer.\n{Number} wallThickness The thickness of the wall.\n{} parent The parent of the subslope overture.\n{BABYLON.Vector2} position The position of the overture.\n{} polygon The polygon of the overture."
        },
        "SubSlopeStructure": {
            "name": "SubSlopeStructure",
            "shortname": "SubSlopeStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 7,
            "description": "A subslope object.\nMore info can be found in the [Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Subslopes).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "PolygonWall": {
            "name": "PolygonWall",
            "shortname": "PolygonWall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 7,
            "description": "Polygonal walls.\nRepresents the standard wanaplan wall, which is a closed polygon of N points.",
            "is_constructor": 1,
            "extends": "WallStructure"
        },
        "WallComponent2D": {
            "name": "WallComponent2D",
            "shortname": "WallComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 7,
            "description": "2D Wall management.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "WallComponent3D": {
            "name": "WallComponent3D",
            "shortname": "WallComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 7,
            "description": "Murs 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "WallPane3D": {
            "name": "WallPane3D",
            "shortname": "WallPane3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 9,
            "description": "3D decorable wall panes.",
            "is_constructor": 1,
            "extends": "MeasureStructure"
        },
        "WallStructure": {
            "name": "WallStructure",
            "shortname": "WallStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 7,
            "description": "Base abstract class for walls.\nMore info can be found in the [Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Walls).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "GridComponent2D": {
            "name": "GridComponent2D",
            "shortname": "GridComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\GridComponent\\GridComponent2D.js",
            "line": 11,
            "description": "2D Background grid.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "GridComponent3D": {
            "name": "GridComponent3D",
            "shortname": "GridComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 4,
            "description": "This component manages the whole 3D environnement,\nspecifically the 3D grid, the skybox, and the lights.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "HistoryComponent": {
            "name": "HistoryComponent",
            "shortname": "HistoryComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 36,
            "description": "Component which handles the history of undos and redos.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "BaseTopMenuComponent2D": {
            "name": "BaseTopMenuComponent2D",
            "shortname": "BaseTopMenuComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 6,
            "description": "A base component 2D to manage top and sub menus.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "name",
                    "description": "The component's name.",
                    "type": "String"
                }
            ]
        },
        "ExitComponent": {
            "name": "ExitComponent",
            "shortname": "ExitComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 8,
            "description": "This component is responsible to quit the application and redirect the user to an external URL.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ]
        },
        "FullscreenComponent": {
            "name": "FullscreenComponent",
            "shortname": "FullscreenComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 6,
            "description": "This component is responsible to add a button in the top menu to toggle fullscreen mode.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "NewComponent": {
            "name": "NewComponent",
            "shortname": "NewComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 8,
            "description": "This component is responsible to add the new plan feature on the application.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "OptionsComponent": {
            "name": "OptionsComponent",
            "shortname": "OptionsComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "line": 6,
            "description": "This component handles the options in the top menu.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "ScreenshotMenuComponent": {
            "name": "ScreenshotMenuComponent",
            "shortname": "ScreenshotMenuComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js",
            "line": 6,
            "description": "This component is responsible to add a button in the top menu to take a screenshot.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "LockComponent": {
            "name": "LockComponent",
            "shortname": "LockComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 9,
            "description": "This component is responsible to add a lock icon action to lock or unlock draggable objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "MagnetismComponent2D": {
            "name": "MagnetismComponent2D",
            "shortname": "MagnetismComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 7,
            "description": "2D Magnetism.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "MagnetismComponent3D": {
            "name": "MagnetismComponent3D",
            "shortname": "MagnetismComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 13,
            "description": "Handles magnetism and collisions on the 3D scene",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Wanaplan Core.",
                    "type": "Core"
                }
            ]
        },
        "MeasureComponent": {
            "name": "MeasureComponent",
            "shortname": "MeasureComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 7,
            "description": "2D Measures.\nWARNING : DESPITE THE NAME, THIS IS NOT EXTENDING BASECOMPONENT2D.\nthis is a mistake, it will be done soon enough.",
            "todo": [
                "extends basecomponent2D"
            ],
            "is_constructor": 1
        },
        "MeasureStructure": {
            "name": "MeasureStructure",
            "shortname": "MeasureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 7,
            "description": "The measure structure.\nAllows to merge and split the measure.",
            "todo": [
                "extends BaseStructure"
            ],
            "is_constructor": 1
        },
        "MobileComponent": {
            "name": "MobileComponent",
            "shortname": "MobileComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 7,
            "description": "This component is responsible to configure wanaplan for mobile device.\nIt adapt graphics, add a mobile stylesheet and remove some unecessary components.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "MobileInputComponent": {
            "name": "MobileInputComponent",
            "shortname": "MobileInputComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 11,
            "description": "This component is responsible to configure the correct input mode for mobile device.\nIt check the user's input method (touch or mouse). If mouse is detected nothing is done and the\ncomponent is removed. Otherwise, touch screen support is enabled.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "PedagoComponent": {
            "name": "PedagoComponent",
            "shortname": "PedagoComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 7,
            "description": "This component tests the browser capabilities and redirect the user to the adapted page.",
            "is_constructor": 1,
            "extends": "Core",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "HardwareScalingComponent3D": {
            "name": "HardwareScalingComponent3D",
            "shortname": "HardwareScalingComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 6,
            "description": "This component manages hardware scaling on the rendering canvas.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The engine.",
                    "type": "Core"
                }
            ]
        },
        "BaseComponent2D": {
            "name": "BaseComponent2D",
            "shortname": "BaseComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 7,
            "description": "Base class for 2D components.",
            "is_constructor": 1,
            "abstract": "",
            "params": [
                {
                    "name": "core",
                    "description": "Core instance",
                    "type": "wnp.Core"
                },
                {
                    "name": "name",
                    "description": "Component name",
                    "type": "String"
                }
            ]
        },
        "BaseComponent3D": {
            "name": "BaseComponent3D",
            "shortname": "BaseComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 7,
            "description": "Base class for 3D components.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Instance of the Core.",
                    "type": "wnp.Core"
                },
                {
                    "name": "name",
                    "description": "Name of the component.",
                    "type": "String"
                }
            ]
        },
        "BaseStructure": {
            "name": "BaseStructure",
            "shortname": "BaseStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseStructure.js",
            "line": 9,
            "description": "Base Virtual Class for component's data",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A generic name for the data type",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "API": {
            "name": "API",
            "shortname": "API",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Api\\Api.js",
            "line": 6,
            "description": "API wanaplan",
            "is_constructor": 1
        },
        "Menu": {
            "name": "Menu",
            "shortname": "Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Api\\Menu.js",
            "line": 3,
            "description": "Wanaplan menu.\n\nMenuItem format :  \n   {\n     title : _(\"title\"),\n     icon : \"pathToIcon\",\n     action : \"eventName\",\n     index: 100,\n     items : [subitem1, subitem2]\n   }",
            "is_constructor": 1
        },
        "OrbitCamera": {
            "name": "OrbitCamera",
            "shortname": "OrbitCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 9,
            "description": "An orbit camera controller which can be used with mouse or touch. See Babylon.js docs.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name for the camera.",
                    "type": "String"
                },
                {
                    "name": "alpha",
                    "description": "Position on X/Z axis.",
                    "type": "Number"
                },
                {
                    "name": "beta",
                    "description": "Position on Y axis.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The radius of the sphere.",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "The target..",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "scene",
                    "description": "The scene where the camera will be attached.",
                    "type": "BABYLON.Scene"
                }
            ]
        },
        "wnp.KeyboardManager": {
            "name": "wnp.KeyboardManager",
            "shortname": "wnp.KeyboardManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp",
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 38,
            "description": "The keyboard manager updates a dictionary of key states. \nIt can be easily used anywhere in the application",
            "is_constructor": 1
        },
        "PointerManager": {
            "name": "PointerManager",
            "shortname": "PointerManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "",
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 11,
            "description": "The pointer manager is an abstraction of `MouseEvent`, `TouchEvent` and `PointerEvent` and is responsible to manage\nall type of 'pointer' input in Wanaplan.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "callback",
                    "description": "Function called when an event is intercepted (can be null).",
                    "type": "Function"
                },
                {
                    "name": "domElement",
                    "description": "The DOM element to use for listening events.",
                    "type": "HTMLElement"
                },
                {
                    "name": "param",
                    "description": "(optional) Additional parameters `{ offsets: BABYLON.Vector3(0,0), width: 0, height: 0 }`.",
                    "type": "Object"
                }
            ]
        },
        "TouchManager": {
            "name": "TouchManager",
            "shortname": "TouchManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "",
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 11,
            "description": "The touch manager work with touch events and pointer events on mobile devices and bring an event system\nwhich can be used as mouse event.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "domElement",
                    "description": "The targeted DOM element.",
                    "type": "HTMLElement"
                }
            ]
        },
        "GlassMaterial": {
            "name": "GlassMaterial",
            "shortname": "GlassMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Glass.js",
            "line": 9,
            "description": "A material for representing object made with glass.\n\nHas an env map.",
            "is_constructor": 1,
            "extends": "MetalMaterial"
        },
        "LeatherMaterial": {
            "name": "LeatherMaterial",
            "shortname": "LeatherMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Leather.js",
            "line": 9,
            "description": "A material for representing leather.",
            "is_constructor": 1,
            "extends": "TexturedMaterial"
        },
        "MattMaterial": {
            "name": "MattMaterial",
            "shortname": "MattMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Matt.js",
            "line": 9,
            "description": "A matt material, that has no specular, with a default fire placeholder.",
            "is_constructor": 1,
            "extends": "TexturedMaterial"
        },
        "MetalMaterial": {
            "name": "MetalMaterial",
            "shortname": "MetalMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 9,
            "description": "A material for representing object made with metal.\n\nHave an env map",
            "is_constructor": 1,
            "extends": "StandardMaterial"
        },
        "PlasticMaterial": {
            "name": "PlasticMaterial",
            "shortname": "PlasticMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Plastic.js",
            "line": 9,
            "description": "A material to represent objects made of plastic.\nKinda glossy !",
            "is_constructor": 1,
            "extends": "WhiteMaterial"
        },
        "TexturedMaterial": {
            "name": "TexturedMaterial",
            "shortname": "TexturedMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 9,
            "description": "A simple textured material with diffuse and bump.",
            "is_constructor": 1,
            "extends": "StandardMaterial"
        },
        "TileMaterial": {
            "name": "TileMaterial",
            "shortname": "TileMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Tile.js",
            "line": 9,
            "description": "A material to represent tiles.",
            "deprecated": true,
            "is_constructor": 1,
            "extends": "TexturedMaterial"
        },
        "WhiteMaterial": {
            "name": "WhiteMaterial",
            "shortname": "WhiteMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\White.js",
            "line": 9,
            "description": "Simple white material",
            "is_constructor": 1,
            "extends": "StandardMaterial"
        },
        "WoodMaterial": {
            "name": "WoodMaterial",
            "shortname": "WoodMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Materials\\Wood.js",
            "line": 9,
            "description": "A material designed to represent wooden objects.",
            "is_constructor": 1,
            "extends": "TexturedMaterial"
        },
        "wnp.CameraFeatures": {
            "name": "wnp.CameraFeatures",
            "shortname": "wnp.CameraFeatures",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 12,
            "description": "The Camera Features adds cool features for camera management.",
            "is_constructor": 1
        },
        "wnp.CameraFeatures.AnimationCancelor": {
            "name": "wnp.CameraFeatures.AnimationCancelor",
            "shortname": "wnp.CameraFeatures.AnimationCancelor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp.CameraFeatures",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 522,
            "description": "Is relative to an animation started with computeAnimation.\nExposes functions which control the animation.\nAn `AnimationCancelor` object is returned by computed animation, and this class should not be instanciated in any another way.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "animations",
                    "description": "An array of ’BABYLON.Animation’.",
                    "type": "Array"
                },
                {
                    "name": "target",
                    "description": "The target of the animation.",
                    "type": "BABYLON.Mesh"
                }
            ]
        },
        "StandardMaterial": {
            "name": "StandardMaterial",
            "shortname": "StandardMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Material.js",
            "line": 11,
            "description": "Basic material for all decoration of wanaplan.",
            "is_constructor": 1,
            "extends": "BABYLON.StandardMaterial"
        },
        "Dummy": {
            "name": "Dummy",
            "shortname": "Dummy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Helpers\\DummyHelper.js",
            "line": 7,
            "description": "A class that contains dummy objects.",
            "static": 1
        },
        "GlobalHelper": {
            "name": "GlobalHelper",
            "shortname": "GlobalHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "",
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 6,
            "description": "Various methods to handle the HTML structure modification.",
            "is_constructor": 1
        },
        "ObjectHelper": {
            "name": "ObjectHelper",
            "shortname": "ObjectHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 6,
            "description": "Various methods to handle 3D object manipulation.",
            "is_constructor": 1
        },
        "ObjectHelper.AABB": {
            "name": "ObjectHelper.AABB",
            "shortname": "ObjectHelper.AABB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 118,
            "description": "Axis Aligned Bounding Box\n\nin order to keep thing simple and limit space complexity, this class hold minimal mandatory properties",
            "is_constructor": 1,
            "params": [
                {
                    "name": "max",
                    "description": "the point of the box which is the greatest ( in world reference )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "min",
                    "description": "the point of the box which is the smallest ( in world reference )",
                    "type": "BABYLON.Vector3"
                }
            ]
        },
        "ObjectHelper.OBB": {
            "name": "ObjectHelper.OBB",
            "shortname": "OBB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 224,
            "description": "Oriented Bounding Box\n\nin order to keep thing simple and limit space complexity, this class hold minimal mandatory properties",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dimension",
                    "description": "the vector from the origin to the top corner ( positive vector )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "matrix",
                    "description": "the transormation matrix of the box, should be a rotation combined with a translation",
                    "type": "BABYLON.Matrix"
                }
            ]
        },
        "ObjectHelper.OyBB": {
            "name": "ObjectHelper.OyBB",
            "shortname": "OyBB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 314,
            "description": "Oriented along Y axis Bounding Box\nsame as OBB but the rotation is only along the Y axis, which save some computations\n\nin order to keep thing simple and limit space complexity, this class hold minimal mandatory properties",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dimension",
                    "description": "the vector from the origin to the top corner ( positive vector )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "matrix",
                    "description": "the transormation matrix of the box, should be a rotationY combined with a translation",
                    "type": "BABYLON.Matrix"
                }
            ]
        },
        "ObjectHelper.collision": {
            "name": "ObjectHelper.collision",
            "shortname": "collision",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 467,
            "description": "Collision checking.",
            "static": 1,
            "is_constructor": 1
        },
        "ObjectHelper.Interval": {
            "name": "ObjectHelper.Interval",
            "shortname": "Interval",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 1152,
            "description": "One Dimension Interval, can compute operations on intervals such as [ 1 , 2 ] U [ 3 ,4 ] ..",
            "is_constructor": 1
        },
        "wnp.Symbols2D": {
            "name": "wnp.Symbols2D",
            "shortname": "wnp.Symbols2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 10,
            "description": "Draw methods for standard 2D symbols",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "wnp.uuid": {
            "name": "wnp.uuid",
            "shortname": "wnp.uuid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Helpers\\uuid.js",
            "line": 10,
            "description": "Generating unique ids, according to RFC4122 http://www.ietf.org/rfc/rfc4122.txt",
            "is_constructor": 1
        },
        "Logger": {
            "name": "Logger",
            "shortname": "Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Logger.js",
            "line": 5,
            "description": "This class is dedicated to debugging by providing methods which are active only in debug mode.",
            "static": 1
        },
        "wnp.LoopTimer": {
            "name": "wnp.LoopTimer",
            "shortname": "wnp.LoopTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\LoopTimer.js",
            "line": 8,
            "description": "A timer manager",
            "is_constructor": 1
        },
        "TestManager": {
            "name": "TestManager",
            "shortname": "TestManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 5,
            "description": "This component is responsible to load test case files and execute them.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 101,
            "description": "Changes the Avatar visibility.",
            "itemtype": "method",
            "name": "setVisibility",
            "params": [
                {
                    "name": "isVisible",
                    "description": "True to set visible and false to set invisible.",
                    "type": "Boolean"
                }
            ],
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 57,
            "description": "start displaying the handles at every camera move",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 73,
            "description": "stop displaying the handles",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 206,
            "description": "dispose handle specified by the name, or all the handles if name is omitted",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 277,
            "description": "fill the _availableHandlesobject with true for one handle if the object can be edited along this axis, flase else\nis based in the getPropertyName",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 1,
            "description": "listen masterReshaper",
            "extends": "BaseComponent3D",
            "requires": [
                "MasterReshaperComponent"
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 104,
            "description": "display the handle when the object is resized, when false the handle will be hided",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 109,
            "description": "display the handle when the object is resized, when false the handle will be hided",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 114,
            "description": "animate the handle when the cursor is hover a face",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 119,
            "description": "display a plan to figure the new position of the dragged face",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 124,
            "description": "display a plan to figure the face when the cursor is over it",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 129,
            "description": "display a plan to figure the old face when it is dragged",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 134,
            "description": "round the object dimension",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 139,
            "description": "debug option",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 194,
            "description": "return the true bounding box, where position is the center of the box and dimension the dimension of the box",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 1,
            "description": "is responsive of notify UI event to reshaper children\nregister a unique reshaper with a askhand / releasehand mecanism\n\nanswer event thrown by ConfiguratorModComponent",
            "extends": "BaseComponent3D",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 103,
            "description": "a reshaper should call this before being actived,\nif requireHand return true, the reshaper is actived and can edit the object\nelse it can't\n\nthis prevent from having two active reshaper at the same time",
            "itemtype": "method",
            "name": "requireHand",
            "params": [
                {
                    "name": "configurator",
                    "description": "the reshaper which wants to be acived",
                    "type": "Component"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 140,
            "description": "a reshaper should call this for desactivation,",
            "itemtype": "method",
            "name": "releaseHand",
            "params": [
                {
                    "name": "configurator",
                    "description": "the reshaper which wants to be acived",
                    "type": "Component"
                }
            ],
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 159,
            "description": "start the reshaper master, and all the reshaper which depends on him",
            "itemtype": "method",
            "name": "start",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 185,
            "description": "stop the reshaper master, and all the reshaper which depends on him",
            "itemtype": "method",
            "name": "stop",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 106,
            "description": "launchs the animation to focus the camera on the object",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 186,
            "description": "cancel the animation, leave the camera where it is",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 195,
            "description": "go back to primar camera state",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 141,
            "description": "try to start the configurator,\nif the state is not suitable do nothing\n\nif the animationInOut component is loaded, start the animation, else simulate the animation envent cycle and start immediatly",
            "itemtype": "method",
            "name": "requestStart",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 168,
            "description": "try to stop the configurator,\nif the state is not suitable do nothing\n\nif the animationInOut component is loaded, start the animation, else simulate the animation envent cycle and start immediatly",
            "itemtype": "method",
            "name": "requestStop",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 192,
            "description": "stop immediatly the configurator,\nstop the currently play animation immediatly is needed\nthe difference with requestStop is that if the configurator is in a animated state, it will cause to stop immediaty the animation",
            "itemtype": "method",
            "name": "cancel",
            "class": "ConfiguratorModComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "line": 349,
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 1,
            "description": "/!\\ does not support multimaterial yet",
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 68,
            "description": "apply transparency on walls when they are between the target and the camera",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 73,
            "description": "apply transparency on all the object",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 78,
            "description": "apply transparency on all the object",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 51,
            "description": "Called when the floor is selected.\nTriggered on event `wnp.request.floorSelected`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSelectFloor",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 68,
            "description": "Called when the floor is requested to be deleted.\nTriggered on event `wnp.request.floorDeleted`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSelectFloor",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 81,
            "description": "Called when the plan is ready.\nWill delete the whole structure mesh.\nTriggered on `wnp.request.newPlanReady`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onNewPlanReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 102,
            "description": "Deletes a floor on the scene.\nThis disposes all the mesh of this floor AND ABOVE THIS FLOOR.\nTODO : weird behaviour, will be changed.",
            "itemtype": "method",
            "name": "deleteFloor",
            "params": [
                {
                    "name": "floor",
                    "description": "The floor structure.",
                    "type": "FloorStructure"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 121,
            "description": "Gets the mesh associated to the floor structure.",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "floor",
                    "description": "The structure of the floor. If ommited, use the currently selected floor.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "The mesh associated to the floor structure.",
                "type": "BABYLON.Mesh"
            },
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 140,
            "description": "Build the floors :\n  - retreive the currently selected floor.\n  - delete the floors which are above the currently selected one.\n  - rebuild all the floors which are between the start floor (passed in params) and the currently selected one.",
            "itemtype": "method",
            "name": "createFloor",
            "params": [
                {
                    "name": "start",
                    "description": "The floor id to be built. If ommited, start from the first one (0).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 189,
            "description": "Build the empty floor Mesh.",
            "itemtype": "method",
            "name": "createFloorMesh",
            "params": [
                {
                    "name": "element",
                    "description": "The structure of the floor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the mesh built.",
                "type": "BABYLON.Mesh"
            },
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 63,
            "description": "Updates the HTML element of the remote control.\nTriggered on `wnp.structure.locale.loaded`",
            "itemtype": "method",
            "name": "updateHTML",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 74,
            "description": "Removes the HTML code for the component.",
            "itemtype": "method",
            "name": "removeHTML",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 86,
            "description": "Builds the HTML code for the component.",
            "itemtype": "method",
            "name": "buildHTML",
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 174,
            "description": "Inserts a floor before another. \n> For instance, you can move the 4th floor to the 1st floor,\n> This will shift up every floor after the current 1st one, including the 1st.",
            "itemtype": "method",
            "name": "insertFloorBefore",
            "params": [
                {
                    "name": "floorIndex",
                    "description": "The index of the floor to move.",
                    "type": "Number"
                },
                {
                    "name": "beforeIndex",
                    "description": "The index of the floor to insert before.",
                    "type": "Number"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 198,
            "description": "Click on a floor-item for selecting a stage.\nTriggered on event `click` on the floor html element.",
            "itemtype": "method",
            "name": "onItemClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associate to the event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 211,
            "description": "Shows a context menu to change the floor parameters\nTriggered on event `click` on the \"i\" inside the floor html element.",
            "itemtype": "method",
            "name": "onItemContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The object associate to the event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 246,
            "description": "Triggered when a property of a context menu changes.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "target",
                    "description": "The object.",
                    "type": "FloorStructure"
                },
                {
                    "name": "property",
                    "description": "The property change.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the change property.",
                    "type": "Number"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 277,
            "description": "Click on delete, and delete the stage.\nTriggered on `click` on the \"x\" inside the floor html element.",
            "itemtype": "method",
            "name": "onItemDelete",
            "params": [
                {
                    "name": "event",
                    "description": "The associated event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 320,
            "description": "Click on add, begin to add the stage and clone the property selected.\nTriggered on `click` on the \"+\" HTML element.",
            "itemtype": "method",
            "name": "onAddItemClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated with the event.",
                    "type": "Event"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 377,
            "description": "Begins to add the floor.\nTriggered on `click` on the add button of the duplication window.",
            "itemtype": "method",
            "name": "onAddItemConfirm",
            "params": [
                {
                    "name": "event",
                    "description": "The objet associated with the event.",
                    "type": "Event"
                },
                {
                    "name": "options",
                    "description": "The different options set by the user.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 402,
            "description": "Duplicates the current floor with the duplication rules chosen by the user.\n\noptions[\"walls\"] = true => Keep the wall.\noptions[\"objects\"] = true => Keep the objects.\netc...",
            "itemtype": "method",
            "name": "duplicateForFloor",
            "params": [
                {
                    "name": "options",
                    "description": "The different options set by the user.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 480,
            "description": "Selects a floor.",
            "itemtype": "method",
            "name": "selectFloor",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the selected floor.",
                    "type": "Number"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 18,
            "description": "Floor label, chosen by the user.",
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 26,
            "description": "Array of PointStructure referenced in this floor.",
            "itemtype": "property",
            "name": "points",
            "type": "{PointStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 34,
            "description": "Array of WallStructure referenced in this floor.",
            "itemtype": "property",
            "name": "walls",
            "type": "{WallStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 42,
            "description": "Array of OvertureStructure referenced in this floor.",
            "itemtype": "property",
            "name": "overtures",
            "type": "{OvertureStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 50,
            "description": "Array of RoomStructure referenced in this floor. These rooms are internal, see Wiki for more info.",
            "itemtype": "property",
            "name": "internalRooms",
            "type": "{RoomStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 58,
            "description": "Array of RoomStructure referenced in this floor. These rooms are external, see Wiki for more info.",
            "itemtype": "property",
            "name": "externalRooms",
            "type": "{RoomStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 66,
            "description": "Array of ObjectStructure referenced in this floor.",
            "itemtype": "property",
            "name": "objects",
            "type": "{ObjectStrcture[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 74,
            "description": "Array of StairwayStructure referenced in this floor.",
            "itemtype": "property",
            "name": "stairways",
            "type": "{StairwayStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 82,
            "description": "Array of HopperStructure referenced in this floor.",
            "itemtype": "property",
            "name": "hoppers",
            "type": "{HopperStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 90,
            "description": "Array of SubSlopeStructure referenced in this floor.",
            "itemtype": "property",
            "name": "subslopes",
            "type": "{SubSlopeStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 98,
            "description": "Array of SubSlopeOvertureStructure referenced in this floor.",
            "itemtype": "property",
            "name": "subSlopeOverture",
            "type": "{SubSlopeOvertureStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 106,
            "description": "Floor elevation. Represents the \"y\" coordinate of the bottom of the floor.",
            "itemtype": "property",
            "name": "elevation",
            "default": "0",
            "type": "{Number}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 115,
            "description": "Floor height. Represents the height difference between the top (ceiling) and the bottom of the floor.",
            "itemtype": "property",
            "name": "height",
            "default": "250",
            "type": "{Number}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 124,
            "description": "This flag signals if the geometry of the floor has been dirtied by some component.\nComponents should read this with ```isDirty()``` and update their logic if the floor is dirtied.",
            "itemtype": "property",
            "name": "dirtyGeometry",
            "type": "{Boolean}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 136,
            "description": "Signals that the floor geometry has been dirtied, and needs to be updated.",
            "itemtype": "method",
            "name": "dirty",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 145,
            "description": "Signals that the floor geometry has been tidied, and no longer needs to be updated.",
            "itemtype": "method",
            "name": "tidy",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 154,
            "description": "Checks if the floor geometry has been dirtied",
            "itemtype": "method",
            "name": "isDirty",
            "return": {
                "description": "The geometry status.",
                "type": "Boolean"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 213,
            "description": "Update the wall parent after the serialization.",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure contain the instances.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 250,
            "description": "Insert an element into the structure.",
            "itemtype": "method",
            "name": "insertElement",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the object (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element to insert.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 276,
            "description": "Return a category.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "category",
                    "description": "Category of an element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of element of the category.",
                "type": "Array"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 291,
            "description": "Return an indexed element in the given category.",
            "itemtype": "method",
            "name": "getElementByIdentifier",
            "params": [
                {
                    "name": "id",
                    "description": "Id of the element.",
                    "type": "Number"
                },
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "Primary key of the search (ex: \"id\", \"name\", ...).",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"id\""
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 312,
            "description": "Delete an element in the structure.",
            "itemtype": "method",
            "name": "removeElement",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element to insert.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 338,
            "description": "Replace all the element of a category.",
            "itemtype": "method",
            "name": "removeElements",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "",
                    "description": "elements Array of the element to insert.",
                    "type": "BaseStructure",
                    "optional": true
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 350,
            "description": "Clone the current object.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "FloorStructure"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 368,
            "description": "Reindex a collection.",
            "itemtype": "method",
            "name": "reindexElements",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection.",
                    "type": "Collection"
                },
                {
                    "name": "start",
                    "description": "The start index.",
                    "type": "Int"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 382,
            "description": "Add walls to the floor. The walls will be merge together if needed, and with the actual walls of the floor if needed.",
            "itemtype": "method",
            "name": "addWallsAsPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The 2D polygon, is an array of object which must have x and y attribute ( BABYLON.Vector2 for exemple ). The polygon does not need to repeat the first and last elements, it's already considered closed.",
                    "type": "Object[]"
                },
                {
                    "name": "options",
                    "description": "Set of options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "height",
                            "description": "The height of the walls.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "250"
                        },
                        {
                            "name": "thickness",
                            "description": "The thickness of the walls.",
                            "type": "Thickness",
                            "optional": true,
                            "optdefault": "25"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The added walls",
                "type": "WallStructure[]"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 418,
            "description": "Add one wall to the floor. The wall will be merge with the actual walls of the floor if needed.",
            "itemtype": "method",
            "name": "addOneWall",
            "params": [
                {
                    "name": "a",
                    "description": "The first point, must have x and y attribute ( BABYLON.Vector2 for exemple ).",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The second point, must have x and y attribute ( BABYLON.Vector2 for exemple ).",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Set of options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "height",
                            "description": "The height of the walls.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "250"
                        },
                        {
                            "name": "thickness",
                            "description": "The thickness of the walls.",
                            "type": "Thickness",
                            "optional": true,
                            "optdefault": "25"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The added wall.",
                "type": "WallStructure"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 471,
            "description": "Instanciate a WallStructure with the correct param.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "prepareWallStructure",
            "params": [
                {
                    "name": "a",
                    "description": "The first point, must have x and y attribute ( BABYLON.Vector2 for exemple ).",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The second point, must have x and y attribute ( BABYLON.Vector2 for exemple ).",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Set of options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "height",
                            "description": "The height of the walls.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "250"
                        },
                        {
                            "name": "thickness",
                            "description": "The thickness of the walls.",
                            "type": "Thickness",
                            "optional": true,
                            "optdefault": "25"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The wall.",
                "type": "WallStructure"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 94,
            "description": "Disable all the possible action when the user leave the hopper.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure leaved.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 109,
            "description": "Enable all the possible action when the user hover the hopper.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure hovered.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 125,
            "description": "Draw an highlight on the hopper.",
            "itemtype": "method",
            "name": "onHoverHopper",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 139,
            "description": "Add a point on the hover when the user double click on it.",
            "itemtype": "method",
            "name": "onDblClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure clicked.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 163,
            "description": "Move the hopper when it is dragged.",
            "itemtype": "method",
            "name": "onDrag",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure dragged.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 216,
            "description": "Compute all the structure's hoppers.",
            "itemtype": "method",
            "name": "compute",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 228,
            "description": "Compute one hopper. Check the hopper consistency and delete it if the hopper is no longer valid.\n - merge together vertices which are close enought.\n - remove the hopper if has less than 3 vertices ( invalid hopper ).",
            "itemtype": "method",
            "name": "computeHopper",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper drawn.",
                    "type": "HopperStructure"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 253,
            "description": "Compute the hopper when the drag end.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure dragged.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 266,
            "description": "Add action when the drag start.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure dragged.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 281,
            "description": "Add action when the drag is added.",
            "itemtype": "method",
            "name": "onAddHopper",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 293,
            "description": "Draw the hopper on the click.",
            "itemtype": "method",
            "name": "onAddHopperClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure added.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 314,
            "description": "Move the hopper when the mouse move.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure moved.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 330,
            "description": "The context menu of the hopper.",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 386,
            "description": "When the context menu of the hopper changed a value.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "target",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "property",
                    "description": "The property changed.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value changed.",
                    "type": "Number|String"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 417,
            "description": "When the user close the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 459,
            "description": "Draw the hopper guide. Display visual information on the hopper, depending on the context.\nBasically, it indicates whever the user is over a hopper element ( the whole hopper, a side , a point ).",
            "itemtype": "method",
            "name": "drawTarget",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper's structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "ctx",
                    "description": "The 2d context.",
                    "type": "Context2D"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 479,
            "description": "Draw the hopper.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper's structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "ctx",
                    "description": "The 2d context.",
                    "type": "Context2D"
                },
                {
                    "name": "translation",
                    "description": "The translation  of the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "True is the hopper is curretly selected, false else.",
                    "type": "Boolean"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 532,
            "description": "Returns the roomStructure of the room where the hopper is.\nWill try to rattach the hopper to a room if hopper.room is not defined.\n\nIf force flag is up, try to rattach the hopper even if it already have hopper.room set.s.",
            "itemtype": "method",
            "name": "getRoom",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper's structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "force",
                    "description": "If set to true, ignore the internal attribute and try to rattach to a room.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The room where the hopper is.",
                "type": "RoomStructure"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 560,
            "description": "Test the collision with a point and all the hopper's sides.",
            "itemtype": "method",
            "name": "isPointInHopperSide",
            "params": [
                {
                    "name": "vector",
                    "description": "The point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "hopper",
                    "description": "The hopper's structure.",
                    "type": "HopperStructure"
                }
            ],
            "return": {
                "description": "False if the point does not collide with any of the hopper's sides. The index of the side which collide else.",
                "type": "Number|boolean"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 582,
            "description": "Test the collision with a point and area defined by the hopper.",
            "itemtype": "method",
            "name": "isPointInHopper",
            "params": [
                {
                    "name": "vector",
                    "description": "The point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "hopper",
                    "description": "The hopper's structure..",
                    "type": "HopperStructure"
                }
            ],
            "return": {
                "description": "True if the point collide, false else",
                "type": "Boolean"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 23,
            "description": "The hopper component 3D needs the room component 3D to get informations about the room.",
            "itemtype": "property",
            "name": "roomcmp3D",
            "default": "null",
            "type": "{RoomComponent3D}",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 32,
            "description": "Material on the hopper hole.",
            "itemtype": "property",
            "name": "roomcmp3D",
            "default": "The room material",
            "access": "private",
            "tagname": "",
            "type": "{String}",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 56,
            "description": "When the floor is ready, the room can be carved.",
            "onfloorready": "",
            "params": [
                {
                    "name": "event",
                    "description": "Composed of {scene : The scene, structure: The currentr structure}.",
                    "type": "Event"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 72,
            "description": "Apply the texture to the pointed part of the object.\nFor the hopper the decorable part are the inner shape of the hole and the sticks ( rail-guards ).\n\n/!\\ This function in meant to be use in the context of the BABYLON.Mesh and will be used in a strict flow.\nIt's not meant to be used outside this flow and is therefore taged as private.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "decorate",
            "warning": "This function must be bind with a mesh.",
            "params": [
                {
                    "name": "material",
                    "description": "The material of the decoration.",
                    "type": "Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "The informations about the collided mesh.",
                    "type": "BABYLON.CollisionInfo"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 100,
            "description": "Merge the composants of a rail-guard.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "mergeGeometries",
            "params": [
                {
                    "name": "object",
                    "description": "The object to merge.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 142,
            "description": "Build the mesh that represent the sticks ( rail-guard ) of the hopper. Based on the hopper structure passed in argument.",
            "itemtype": "method",
            "name": "createHopperSticks",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper structure on which the sticks building will be based.",
                    "type": "HopperStructure"
                },
                {
                    "name": "scene",
                    "description": "The scene ( mandatory to create a mesh ).",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "False.",
                "type": "Boolean"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 228,
            "description": "The default materials of the hoppers.",
            "itemtype": "method",
            "name": "getDefaultMaterials",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "scene",
                    "description": "The scene ( mandatory to create a material ).",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "The materials.",
                "type": "Material[]"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 253,
            "description": "Set the materials on the hopper by using the traverse function.",
            "itemtype": "method",
            "name": "initMaterials",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object3d",
                    "description": "The 3D mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materials",
                    "description": "The materials to set on the 3D mesh.",
                    "type": "Material[]"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 271,
            "description": "Build the hopper.\nCarve the hopper into the room floor and add the sticks ( rail-guard ).",
            "itemtype": "method",
            "name": "Build",
            "static": 1,
            "params": [
                {
                    "name": "room3d",
                    "description": "The room mesh where the hopper will be applied.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "height",
                    "description": "The height position from where the hopper will be applied, basically it's either 0 to carve the floor or the room height to carve the ceiling.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "heightM",
                    "description": "The maximal height position of the carving.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "100"
                }
            ],
            "return": {
                "description": "The room mesh with the hopper.",
                "type": "BABYLON.Mesh"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 324,
            "itemtype": "method",
            "name": "Debug",
            "access": "private",
            "tagname": "",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 398,
            "description": "Set the shadow on all the child.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "applyShadow",
            "params": [
                {
                    "name": "object3D",
                    "description": "The 3D mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 34,
            "description": "The vertices of the hopper.\nBy default, the hopper is a 100cm large square.\nPoints can be moved, added ( a hopper can have more than 4 verices ), and removed ( while there is still at least 3 vertices ).\n\nNote that when we refer to a side, the side i is the edge ( points[ i ] , points[ i+1 ] ).",
            "itemtype": "property",
            "name": "points",
            "type": "BABYLON.Vector2[]",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 47,
            "description": "Set of labeled materials.\nThe material used for painting the hopper.\n\nThe available mesh decorable are:\n - rail_stick\n - rails\n - bas",
            "itemtype": "property",
            "name": "materials",
            "type": "BABYLON.Material[]",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 63,
            "description": "Indicates which side of the hopper should have a guard-rail.\nIs an object with a boolean for each side.\nexample : {\n   0 : false,   // the 0 side have no guard-rail\n   1 : true,    // whereas the 1 side have one\n   ...\n   };",
            "itemtype": "property",
            "name": "sticks",
            "default": "{ 0:false , 1:false , 2:false , 3:false } // a hopper without guard-rail.",
            "type": "{Boolean[]}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 79,
            "description": "If the hopper is relative to a stairway, the stairway id ( null else ).",
            "itemtype": "property",
            "name": "stairwayId",
            "default": "null",
            "type": "{String}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 89,
            "description": "Indicates if the hopper have been modified or if it's the default hopper.",
            "itemtype": "property",
            "name": "modified",
            "default": "false",
            "type": "{Boolean}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 128,
            "description": "Check the consistency of the hopper.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "False is the structure is corrupted, true else.",
                "type": "Boolean"
            },
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 151,
            "description": "Remove the hopper.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure from where the hopper must be removed.",
                    "type": "FloorStructure"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 161,
            "description": "Insert a point at a given place.",
            "itemtype": "method",
            "name": "inserPointAt",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "The",
                    "description": "place in the array where the point is insert.",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "inserted point.",
                    "type": "Object"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 173,
            "description": "Move the hopper by the translation vector passed in params ( relative move ).",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "moveVector",
                    "description": "The translation vector by which the hopper will by moved.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "line": 805,
            "description": "Permet d importer l objet window sur le chien assis",
            "itemtype": "method",
            "name": "importWindow",
            "params": [
                {
                    "name": "object",
                    "description": "qui correspond au chien assis",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "width",
                    "description": "la largeur du chien assis",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "la hauteur du chien assis",
                    "type": "Float"
                },
                {
                    "name": "z",
                    "description": "les coordonnees en hauteur de la fenetre",
                    "type": "Float"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "line": 857,
            "description": "Genere l objet 3D",
            "itemtype": "method",
            "name": "getObject3D",
            "params": [
                {
                    "name": "scene",
                    "description": "la scene 3D",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "L'objet 3D",
                "type": "BABYLON.Mesh"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 23,
            "description": "The associated structure of the programmable.",
            "itemtype": "property",
            "name": "structure",
            "type": "ObjectStructure",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 33,
            "description": "The id of the object.",
            "itemtype": "property",
            "name": "id",
            "type": "Number",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 45,
            "description": "Return a list which associate a default material for each part.",
            "itemtype": "method",
            "name": "getDefaultMaterials",
            "params": [
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "Set of labeled material, one for each part of the programmable.",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 58,
            "description": "Is called when the object receives a click with the decorable tool.\nThis method should apply the texture to the pointed part of the object.\n\n/!\\ This function in meant to be use in the context of the BABYLON.Mesh and will be used in a strict flow.",
            "itemtype": "method",
            "name": "decorate",
            "warning": "This function must be bind with a mesh.",
            "params": [
                {
                    "name": "material",
                    "description": "The material of the decoration.",
                    "type": "Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "The informations about the collided mesh.",
                    "type": "BABYLON.CollisionInfo"
                }
            ],
            "return": {
                "description": "The previous material.",
                "type": "Material"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 86,
            "description": "Is called when the object receives a click with the animate tool.\nThis method should apply the animation of the object.\n\n/!\\ This function in meant to be use in the context of the BABYLON.Mesh and will be used in a strict flow.",
            "itemtype": "method",
            "name": "animate",
            "warning": "This function must be bound with a mesh.",
            "params": [
                {
                    "name": "object3d",
                    "description": "The mesh of the global object",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 100,
            "description": "Import a mesh to the babylon format in a programmable. The file babylon must have the extension .babylon. \nImport a mesh in .babylon format.\nThis method is asynchronous.",
            "warning": "A file .babylon.manifest is required.",
            "itemtype": "method",
            "name": "importBabylon",
            "params": [
                {
                    "name": "filePath",
                    "description": "The path to the .babylon file.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function called when the file is loaded, this function will receive the mesh as parameter.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The mesh which will contains the mesh once the file is loaded.",
                "type": "Babylon.Mesh"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 139,
            "description": "Merge the parameter of the default parameter.",
            "itemtype": "method",
            "name": "mergeParams",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "The params to merge with the current instance.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 152,
            "description": "Should return all the params availables for the object.",
            "itemtype": "method",
            "name": "getDefaultParams",
            "return": {
                "description": "Can be a nested structure.",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 162,
            "description": "Should return the type of the params.\nThis is used to custom the input of the params panel. \nDefault is : all params are strings.",
            "itemtype": "method",
            "name": "getParamType",
            "params": [
                {
                    "name": "name",
                    "description": "the parameter's name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The type.",
                "type": "Object|String"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 208,
            "access": "private",
            "tagname": "",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 214,
            "description": "options\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 259,
            "description": "options\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 322,
            "description": "Creation of a programmable instance with the preloaded.",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "filename",
                    "description": "The name of the file to load like Folder.Object.js.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "The params to apply to the object building.",
                    "type": "Object"
                },
                {
                    "name": "materials",
                    "description": "The materials of the object.",
                    "type": "Object"
                },
                {
                    "name": "structure",
                    "description": "The object instance.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "callback",
                    "description": "The callback to build the object.",
                    "type": "Function"
                },
                {
                    "name": "customPath",
                    "description": "The path of the object.",
                    "type": "String"
                },
                {
                    "name": "engine",
                    "description": "The engine.",
                    "type": "BABYLON.Engine"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 369,
            "description": "Serializes the object (to JSON).",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized.",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 384,
            "description": "Deserializes the object (from JSON).",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 399,
            "description": "Deserializes the object (from JSON).",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 416,
            "description": "Get the available property.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The menu.",
                "type": "Object"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 455,
            "description": "Get the menu form for the programmable.",
            "itemtype": "method",
            "name": "generateFormForObject",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "param",
                    "description": "The param of the programmable.",
                    "type": "Object"
                },
                {
                    "name": "instance",
                    "description": "The instance of the programmmable.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "menu",
                    "description": "The menu.",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 535,
            "description": "Get the width parameter.",
            "itemtype": "method",
            "name": "getWidthParam",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 548,
            "description": "Get the height parameter.",
            "itemtype": "method",
            "name": "getHeightParam",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 562,
            "description": "Get the depth parameter.",
            "itemtype": "method",
            "name": "getDepthParam",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 129,
            "description": "Call when the context change",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "context",
                    "description": "The current context : 2D or 3D.",
                    "type": "String"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 158,
            "description": "Method callback call to peint an object with a color.",
            "itemtype": "method",
            "name": "onPaintHandler",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 178,
            "description": "Update the item of the menu with the last color",
            "itemtype": "method",
            "name": "updateLastItemMenu",
            "params": [
                {
                    "name": "item",
                    "description": "The last item.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 202,
            "description": "Method callback call when on a click event to change the material of an object.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 243,
            "description": "Put a new material on an object.",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "object",
                    "description": "Instance of an object3D BABYLON.Mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "material",
                    "description": "Instance of a material to use on an object.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "Informations on the collision between the rayon send on a click and the object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 256,
            "description": "Apply a new Material on an object.",
            "itemtype": "method",
            "name": "applyMaterial",
            "params": [
                {
                    "name": "object",
                    "description": "Instance of an object3D BABYLON.Mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "material",
                    "description": "Instance of a material to use on an object.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collided",
                    "description": "The collision informations",
                    "type": "Boolean"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 270,
            "description": "Get a material with the good parameter.",
            "itemtype": "method",
            "name": "getMaterial",
            "return": {
                "description": "Return a material Info",
                "type": "MaterialInfo"
            },
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 280,
            "description": "Stop the paint mode by putting all the parameter at null.",
            "itemtype": "method",
            "name": "stopPainMode",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 302,
            "description": "Add an history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 317,
            "description": "Undo the paint by calling the undoFunction of the type action when the ctrl-z is push.",
            "itemtype": "method",
            "name": "undoPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo or redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 328,
            "description": "Redo the paint by calling the undoFunction of the type action when the ctrl-z is push.",
            "itemtype": "method",
            "name": "redoPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo or redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 339,
            "description": "Function call when the undo or redo is done.",
            "itemtype": "method",
            "name": "historyPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo or redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                },
                {
                    "name": "modifiedMaterial",
                    "description": "The material modified.",
                    "type": "wnp.material"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 353,
            "description": "Create the history for the paint action",
            "itemtype": "method",
            "name": "setupHistory",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 22,
            "description": "[in] Fired by the engine when the user start dragging its cursor, /!\\ it's just about the cursor, it's not necessary an object which dragged\nwhen capted, test is an object is below the cursor, if so start moving it",
            "itemtype": "event",
            "name": "wnp.engine3D.drag-start",
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 30,
            "description": "[in] Fired by the engine when the user is dragging its cursor, /!\\ it's just about the cursor, it's not necessary an object which dragged\nwhen capted, if an object was below the cursor when the user start dragging, determine the new position of the object and apply it with transformComponent3D",
            "itemtype": "event",
            "name": "wnp.engine3D.drag-start",
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 38,
            "description": "[in] Fired by the engine when the user stop dragging its cursor\nwhen capted, if an object was dragged, stop to drag it, notify that the transformation is over",
            "itemtype": "event",
            "name": "wnp.engine3D.drag-start",
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 125,
            "description": "giving a ray, and some params about the object, determine the point pointed by the ray in the scene, considering the first object that the ray collide\n \n use the lhc to determine the first object on the path",
            "itemtype": "method",
            "name": "resolveProjectionConstraint",
            "params": [
                {
                    "name": "objectBox",
                    "description": "the object, as a Oriented along y axis Bounding Box",
                    "type": "ObjectHelper.OyBB"
                },
                {
                    "name": "ray_",
                    "description": "the ray which will determine the new position of the object box",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "flyY",
                    "description": "if false, the object is not flying, else the elevation where the object is flying",
                    "type": "Boolean or Number"
                },
                {
                    "name": "grab",
                    "description": "the vetor which comes from the center of the box to the point where it is grabbed",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "floorY",
                    "description": "elevation of the floor",
                    "type": "Number"
                },
                {
                    "name": "climbable",
                    "description": "[optional] a function which returns true if the object passed in params is climbable, false else, if omitted all objects are considered climbable. The object box can not be placed on a non climbable object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the point pointed by the ray with this resolution",
                "type": "BABYLON.Vector3"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 218,
            "description": "giving a ray, and some params about the object, determine the point pointed by the ray in the scene, considering the projection on the y axis",
            "itemtype": "method",
            "name": "resolveAxisConstraint",
            "params": [
                {
                    "name": "objectBox",
                    "description": "the object, as a Oriented along y axis Bounding Box",
                    "type": "ObjectHelper.OyBB"
                },
                {
                    "name": "ray_",
                    "description": "the ray which will determine the new position of the object box",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "grab",
                    "description": "the vetor which comes from the center of the box to the point where it is grabbed",
                    "type": "BABYLON.Vector3"
                }
            ],
            "return": {
                "description": "the point pointed by the ray with this resolution",
                "type": "BABYLON.Vector3"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 285,
            "description": "giving a ray, and some params about the object, determine the point pointed by the ray in the scene, considering the projection on the floor ( without considering walls or object that may be on the path )",
            "itemtype": "method",
            "name": "resolvePlaneConstraint",
            "params": [
                {
                    "name": "objectBox",
                    "description": "the object, as a Oriented along y axis Bounding Box",
                    "type": "ObjectHelper.OyBB"
                },
                {
                    "name": "ray_",
                    "description": "the ray which will determine the new position of the object box",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "flyY",
                    "description": "if false, the object is not flying, else the elevation where the object is flying",
                    "type": "Boolean or Number"
                },
                {
                    "name": "grab",
                    "description": "the vetor which comes from the center of the box to the point where it is grabbed",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "floorY",
                    "description": "elevation of the floor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the point pointed by the ray with this resolution",
                "type": "BABYLON.Vector3"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 329,
            "description": "giving a ray, determine the first object collided, or null if the obejct is not draggable",
            "itemtype": "method",
            "name": "grabDraggableAt",
            "params": [
                {
                    "name": "ray",
                    "description": "the ray which will determine the first collided object",
                    "type": "BABYLON.Ray"
                }
            ],
            "return": {
                "description": "the object draggable pointed, or null if there is none",
                "type": "BABYLON.Mesh"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 373,
            "description": "return the last fictive the box, the one computed before applying the magnetism\n this is exposed for other component to work with",
            "itemtype": "method",
            "name": "getLastFictiveBox",
            "return": {
                "description": "the box",
                "type": "ObjectHelper.OyBB"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 387,
            "description": "return the object currently dragged, or null",
            "itemtype": "method",
            "name": "getDraggedObject",
            "return": {
                "description": "the object",
                "type": "BABYLON.Mesh"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 38,
            "description": "Side on the wall (a wall can have several subslopes in both directions).\nWarning : This property is an array, but only the first element matters.\nthis.side[0] is a vector normal to the wall, indicating in which direction the subslope lays.",
            "itemtype": "property",
            "name": "side",
            "type": "{BABYLON.Vector2[]}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 55,
            "description": "The rotator widget: \nAllow the user to turn an object with the green circle.",
            "itemtype": "property",
            "name": "rotatorWidget",
            "type": "{Widget.Rotator}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 64,
            "description": "The info widget: \nAllow the user to have all the property of an object by clicking on the info sprite.",
            "itemtype": "property",
            "name": "infoWidget",
            "type": "{Widget.Info}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 74,
            "description": "The elevation widget: \nSet a scroll on the right side of the screen and can move the elevation of an object.",
            "itemtype": "property",
            "name": "elevationWidget",
            "type": "{Widget.Info}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 83,
            "description": "The table of all the widget.",
            "itemtype": "property",
            "name": "widget",
            "type": "{Widget[]}",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 114,
            "description": "Adds a widget in the object edition.",
            "itemtype": "method",
            "name": "addWidget",
            "params": [
                {
                    "name": "widget",
                    "description": "The widget to add.",
                    "type": "Widget"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 125,
            "description": "Applies a function to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "The event to add a function.",
                    "type": "Event"
                },
                {
                    "name": "handler",
                    "description": "The function attached to the event.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this.",
                "type": "EditionComponent3D"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 140,
            "description": "Unapplies a function to an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "The event to add a function.",
                    "type": "Event"
                },
                {
                    "name": "handler",
                    "description": "The function attached to the event.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this.",
                "type": "EditionComponent3D"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 266,
            "description": "Fired when the configurator action is needed for a group.",
            "itemtype": "event",
            "name": "wnp.request.groupConfigurator.start",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 272,
            "description": "Fired when the configurator action is needed for an object.",
            "itemtype": "event",
            "name": "wnp.request.configurator.start",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 278,
            "description": "Sends a different action for the configurator depending on the object's nature (Group or not).",
            "itemtype": "method",
            "name": "onIAction",
            "access": "private",
            "tagname": "",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 294,
            "description": "Fired when a mouse button is down.",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "collided",
                    "description": "The collided mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 301,
            "description": "Triggered on event pointerdown.\nCall when a button of the mouse is down.\nNotify the action and send the collided object.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 315,
            "description": "Fired when a mouse button is up.",
            "itemtype": "event",
            "name": "mouseup",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 321,
            "description": "Triggered on event pointerup.\nCall when a button of the mouse is up.",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 332,
            "description": "Fired when the mouse move.",
            "itemtype": "event",
            "name": "mousemove",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 338,
            "description": "Triggered on event pointermove.\nCall when the mouse is moved.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 349,
            "description": "Fired when the click action is done.",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "collided",
                    "description": "The collided mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 356,
            "description": "Fired when the configurator is needed.",
            "itemtype": "event",
            "name": "special",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 362,
            "description": "Triggered on event wnp.engine3D.click.collided.\nCall when the user click on the mouse.\nThis function handles if the user has the control pressed \nor if the object is a group or a sprite and do the appropriate action.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 424,
            "description": "Triggered on event wnp.engine3D.dblclick.collided.\nCall when the user double click on an object for the animation.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 438,
            "description": "Fired when the delete button is pushed and a mesh is selected.",
            "itemtype": "event",
            "name": "wnp.request.object.remove",
            "params": [
                {
                    "name": "object",
                    "description": "The current selected object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "FloorStructure"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 446,
            "description": "Triggered on event wnp.keyboardManager.keyDown.\nCall when the user use ctrl-d (duplication an object) and\nthe delete button (remove an object).",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 465,
            "description": "Triggered on event wnp.request.object.remove.\nRemove an object.",
            "itemtype": "method",
            "name": "onRemoveObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 476,
            "description": "Triggered on event wnp.request.newPlanReady.\nCall when the user click on the new plan button.",
            "itemtype": "method",
            "name": "onNewPlan",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 487,
            "description": "Triggered on event wnp.engine3D.object.create.\nCall when a mesh is added on the scene.",
            "itemtype": "method",
            "name": "onCreateObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 523,
            "description": "Triggered on event wnp.engine3D.object.refresh.\nCall when an object is refresh",
            "itemtype": "method",
            "name": "onRefreshObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 535,
            "description": "Fired when a dispose is done.",
            "itemtype": "event",
            "name": "dispose",
            "params": [
                {
                    "name": "object",
                    "description": "The selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 542,
            "description": "Triggered on event wnp.engine3D.object.dispose.\nCall when an object is remove from the scene.",
            "itemtype": "method",
            "name": "onDispose",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 555,
            "description": "Triggered on event wnp.engine3D.allFloorsReady.\nCall when the floor id changed.",
            "itemtype": "method",
            "name": "onDispose",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 566,
            "description": "Fired when a deselecting is done.",
            "itemtype": "event",
            "name": "deselectObject",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 572,
            "description": "Disables the widget on an object.",
            "itemtype": "method",
            "name": "disableWidget",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 581,
            "description": "Fired when a selection is done.",
            "itemtype": "event",
            "name": "selectObject",
            "params": [
                {
                    "name": "object",
                    "description": "The selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 588,
            "description": "Enables the widget on an object.",
            "itemtype": "method",
            "name": "EnableWidget",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 598,
            "description": "Checks if a mesh is a group.",
            "itemtype": "method",
            "name": "isGroup",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a group or not.",
                "type": "Boolean"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 609,
            "description": "Checks if a mesh is a virtual group.\nA virtual group is a group create only with the ctrl button.\nThe property group is not set permanently.",
            "itemtype": "method",
            "name": "isVirtualGroup",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a group or not.",
                "type": "Boolean"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 622,
            "description": "Checks if a mesh is selectable (can change his property).",
            "itemtype": "method",
            "name": "isSelectableObject",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh to check.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Is a selectable mesh or not.",
                "type": "Boolean"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 633,
            "description": "Gets the current selected object.",
            "itemtype": "method",
            "name": "getSelectedbject",
            "return": {
                "description": "The current selected object.",
                "type": "BABYLON.Mesh"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 643,
            "description": "Select an object and set it at the current selected object.",
            "itemtype": "method",
            "name": "selectedObject",
            "params": [
                {
                    "name": "object",
                    "description": "The selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 654,
            "description": "Deselect an object and set the current selected object at null.",
            "itemtype": "method",
            "name": "deselectedObject",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 683,
            "description": "Create a group mesh, ready for decoration and serialization.\nTHe group has a custom decoration behavior, it will decorate all the part which have the same name, regardless of what object they belong to.",
            "itemtype": "method",
            "name": "createGroup",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the group.",
                    "type": "Number"
                },
                {
                    "name": "parent",
                    "description": "The parent, in general the floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "The new mesh of the group (can be virtual of normal).",
                "type": "BABYLON.Mesh"
            },
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 768,
            "description": "Add an object to a group.",
            "itemtype": "method",
            "name": "addToGroup",
            "params": [
                {
                    "name": "object",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "group",
                    "description": "A group, an object or null.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "isHistoryAction",
                    "description": "Add or not to the history.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 798,
            "description": "Removes a object from a group.",
            "itemtype": "method",
            "name": "removeFromGroup",
            "params": [
                {
                    "name": "object",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "group",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 831,
            "description": "Delete a group.",
            "itemtype": "method",
            "name": "deleteGroup",
            "params": [
                {
                    "name": "group",
                    "description": "A group.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "isHistoryAction",
                    "description": "Add or not to the history.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 876,
            "description": "Delete the current selected group.",
            "itemtype": "method",
            "name": "deleteSelectedGroup",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 886,
            "description": "Center a group.",
            "itemtype": "method",
            "name": "centerGroup",
            "params": [
                {
                    "name": "group",
                    "description": "The groupe to centered.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 918,
            "description": "Fired when an object is refreshed and if the history is needed.",
            "itemtype": "event",
            "name": "wnp.request.historyAction",
            "params": [
                {
                    "name": "component",
                    "description": "The component of the action (here is editionComponent3D, this).",
                    "type": "BaseComponent3D"
                },
                {
                    "name": "object",
                    "description": "The target.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "params",
                    "description": "Params of the history.",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The type of action done.",
                    "type": "String"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 928,
            "description": "Refresh an object. For example when a property is changed, the object is refreshed.",
            "itemtype": "method",
            "name": "refreshObject",
            "params": [
                {
                    "name": "object3D",
                    "description": "the mesh to refresh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "The options : noHistory and modifiedProperties",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 953,
            "description": "Set an id to a group.",
            "itemtype": "method",
            "name": "setGroupId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "Group or Selectable object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "groupId",
                    "description": "The id.",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 974,
            "description": "Remove group id to a group.",
            "itemtype": "method",
            "name": "removeGroupId",
            "params": [
                {
                    "name": "object",
                    "description": "Group or Selectable object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 993,
            "description": "Change the type of a group (virtual -> real).",
            "itemtype": "method",
            "name": "virtualToRealGroup",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1010,
            "description": "Triggered on event wnp.engine3D.contextMenu.group.\nCall when the user create a group.",
            "itemtype": "method",
            "name": "onGroup",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1026,
            "description": "Fired when the history save is needed.",
            "itemtype": "event",
            "name": "wnp.request.saveHistory",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1032,
            "description": "Call when the user clone a group.\nCareful this function is used in onCloneObject but do not react to an event.",
            "itemtype": "method",
            "name": "onCloneGroup",
            "params": [
                {
                    "name": "group",
                    "description": "The group cloned.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1079,
            "description": "Fired when the clone object is needed.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.clone",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1085,
            "description": "Triggered on event wnp.request.object.clone.\nCall when the user clone an object or a group.",
            "itemtype": "method",
            "name": "onCloneObject",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1120,
            "description": "Remove an object or a group.",
            "itemtype": "method",
            "name": "onCloneObject",
            "params": [
                {
                    "name": "object3D",
                    "description": "The object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "doNotAddHistory",
                    "description": "Add or not to the history.",
                    "type": "Boolean"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1161,
            "description": "TODO",
            "itemtype": "method",
            "name": "onAddToProducts",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS Event.",
                    "type": "Event"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1235,
            "description": "Add an history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1258,
            "description": "The undo function for the refresh history.",
            "itemtype": "method",
            "name": "undoRefresh",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1270,
            "description": "The redo function for the refresh history.",
            "itemtype": "method",
            "name": "redoRefresh",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1282,
            "description": "The action done when the redo of undo function is called.",
            "itemtype": "method",
            "name": "historyRefresh",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                },
                {
                    "name": "valueField",
                    "description": "The value.",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1308,
            "description": "The undo function for the group history.",
            "itemtype": "method",
            "name": "undoGroup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1320,
            "description": "The redo function for the group history.",
            "itemtype": "method",
            "name": "redoGroup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1332,
            "description": "The action done when the redo of undo function is called.",
            "itemtype": "method",
            "name": "historyGroup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                },
                {
                    "name": "valueField",
                    "description": "The value.",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1386,
            "description": "The undo function for the delete history.",
            "itemtype": "method",
            "name": "undoDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1398,
            "description": "The redo function for the delete history.",
            "itemtype": "method",
            "name": "redoDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1410,
            "description": "The undo function for the add history.",
            "itemtype": "method",
            "name": "undoAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1419,
            "description": "The redo function for the add history.",
            "itemtype": "method",
            "name": "redoAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1429,
            "description": "The action done when the redo of undo function is called.",
            "itemtype": "method",
            "name": "historyDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in.",
                    "type": "Object"
                },
                {
                    "name": "valueField",
                    "description": "The value.",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1461,
            "description": "Setup all the history option of the edition.",
            "itemtype": "method",
            "name": "setupHistory",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1521,
            "description": "lock some actions. Register a key so that the action can only be re-able with the same key.\nactions to lock must be passed as an addition of their corresponding flag\nsupport multi-lock :\n\n  A lock the action ------------------------------------------------------------------- A unlock the action\n                      B lock the same action ----------------- B unlock the action\n\n  <-------------------------------action is locked ------------------------------------------------------->\n\n\n  --------time--------->",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "locker",
                    "description": "can be anything, is register as key for the lock, the action will be unlock only with the same key",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "[ optional ] actions to lock, CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8;",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1572,
            "description": "unlock actions",
            "itemtype": "method",
            "name": "unlock",
            "params": [
                {
                    "name": "locker",
                    "description": "can be anything, is register as key for the lock, the action will be unlock only with the same key",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "[ optional ] actions to lock, CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8;",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 90,
            "description": "Triggered on event wnp.engine3D.addGroup.",
            "itemtype": "method",
            "name": "onAddGroup",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 124,
            "description": "Triggered on event wnp.engine3D.addObject.",
            "itemtype": "method",
            "name": "onAddObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 184,
            "description": "Triggered on event wnp.engine3D.object.remove.",
            "itemtype": "method",
            "name": "onRemoveObject",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 200,
            "description": "Fired when an object is rebuilt in the method `refreshObject`.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.refresh",
            "params": [
                {
                    "name": "object",
                    "description": "The refreshed mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 207,
            "description": "Rebuilds the object, assuming the structure object have changed (not necessarely the case).\nThe object reference will be kept.\nThis function is asynchronous.\nThrows wnp.engine3D.object.refresh when the object mesh have been rebuilt.",
            "itemtype": "method",
            "name": "refreshObject",
            "params": [
                {
                    "name": "meshObject",
                    "description": "The mesh object, as defined in wanaplan, should declare a reference to the `objectStructure` ( meshObject.structure ).",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "callback",
                    "description": "The function called when the object is built. Takes the new mesh as its only parameter.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 296,
            "description": "Builds the object, given the object structure and the object params.\nAs this may require to load scripts, the function is asynchronous.\nAppends the object to the floor when it is ready, throws the wnp.engine3D.object.create event when it's done.",
            "itemtype": "method",
            "name": "buildObject",
            "params": [
                {
                    "name": "objectStructure",
                    "description": "The object structure to be instanciated.",
                    "type": "ObjectStructure"
                },
                {
                    "name": "params",
                    "description": "Params of the object to be instanciated such as defined in the specific programmable.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "materials",
                            "description": "Contains labeled materials. If the materials are already defined in `objectStructure.programmableInstance`, this will have no effect.",
                            "type": "BABYLON.Material[]",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "floorStructure",
                    "description": "The floor where the object will be appended, default is the current floor.",
                    "type": "FloorStructure",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function called when the object is built.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "silent",
                    "description": "If true, no event will be thrown at the object creation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 349,
            "description": "Fired when an object is created in the method `buildObject`.",
            "itemtype": "event",
            "name": "wnp.engine3D.object.create",
            "params": [
                {
                    "name": "object",
                    "description": "The created mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "objectStructure",
                    "description": "The involved object structure.",
                    "type": "ObjectStructure"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 357,
            "description": "Prépare l'object3d en fonction de son objetStructure pour être ajouté à la scene",
            "itemtype": "method",
            "name": "addObjectToScene",
            "access": "private",
            "tagname": "",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 378,
            "description": "Fired when a mesh is disposed (`mesh.dispose` is called).",
            "itemtype": "event",
            "name": "wnp.engine3D.object.dispose",
            "params": [
                {
                    "name": "object",
                    "description": "The disposed mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 385,
            "description": "Adds several properties mandatory to the object3D.",
            "methode": "prepareObject3D",
            "access": "private",
            "tagname": "",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 415,
            "description": "cas d'un rechargement à chaud depuis clic sur etage ou passage 2D 3D\n=> on repositionne les objets groupés dans leur reperes de floor pour eviter que ca pete",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 451,
            "description": "Obtient une valeur à partir d'un paramètre, si ce dernier est undefined c'est la valeur par défaut qui est renvoyée.",
            "itemtype": "method",
            "name": "getValue",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "targetValue",
                    "description": "Paramètre à tester pour récupérer sa valeur.",
                    "type": "Object"
                },
                {
                    "name": "defaultValue",
                    "description": "Valeur par défaut à utiliser si la valeur de targetValue est undefined.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "La valeur du paramètre si il est défini, sinon retourn la valeur par défaut.",
                "type": "Object"
            },
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 465,
            "description": "Obtient un objet de type Vector3 à partir d'un objet littéral JavaScript avec 3 composantes x, y et z.",
            "itemtype": "method",
            "name": "getVector3",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "pVector",
                    "description": "Un objet littéral avec 3 composantes x, y et z.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Une instance de BABYLON.Vector3 avec les 3 composantes du vecteur passé en paramètre.\n                           Si le vecteur passé en paramètre est déjà une instance de BABYLON.Vector3 il est automatiquement retourné.",
                "type": "BABYLON.Vector3"
            },
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 479,
            "description": "Applique l'ombre à l'objet ainsi que tous ces enfants",
            "itemtype": "method",
            "name": "applyShadow",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object3d"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 41,
            "description": "The path to the programmable file.\nsuch as /js/Programmables/\nsupports http request such as http://github.com/wanadev/Programmables/",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "string",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 52,
            "description": "The file name of the programmable.\nsuch as MyProgrammable.js",
            "itemtype": "property",
            "name": "filename",
            "type": "string",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 62,
            "description": "Define an optimal angle for the object.\nThe object is well positioned when the angle between its x axis and a wall is equals to this value.\nThis value is use by the magnetism algorithm to make the objects face the right direction.\nAngle must be k * Pi/2, else it will probably give unwanted result.",
            "itemtype": "property",
            "name": "preferredYAngle",
            "type": "number",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 74,
            "description": "A reference to the mesh.",
            "itemtype": "property",
            "name": "objectInstance",
            "type": "BABYLON.Mesh",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 83,
            "description": "A reference to the programmable.",
            "itemtype": "property",
            "name": "programmableInstance",
            "type": "Programmable",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 92,
            "description": "A reference to the mesh position.\n\n/!\\ This is a reference to `this.objectInstance.position` and not a copy, \nbreaking the reference will result in hard failure in serialisation.",
            "itemtype": "property",
            "name": "position",
            "type": "BABYLON.Vector3",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 104,
            "description": "A reference to the mesh rotation.\n\n/!\\ This is a reference to `this.objectInstance.rotation` and not a copy, \nbreaking the reference will result in hard failure in serialisation.",
            "itemtype": "property",
            "name": "rotation",
            "type": "BABYLON.Vector3",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 116,
            "description": "A reference to the mesh scaling\n\n/!\\ This is a reference to `this.objectInstance.scaling` and not a copy, \nbreaking the reference will result in hard failure in serialisation.",
            "itemtype": "property",
            "name": "scaling",
            "type": "BABYLON.Vector3",
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 185,
            "description": "Check if the object structure contains errors, if so remove it",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "structure",
                    "description": "The floorStructure where the object belongs",
                    "type": "FloorStructure"
                }
            ],
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 200,
            "description": "Clones the object, making a deep copy.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A new instance of the object, with the same attributes.",
                "type": "ObjectStructure"
            },
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 212,
            "description": "Get the available properties of the programmable instance.\nThis is a shortcut to `Programmable.getAvailableProperties`.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "An object containing the programmable properties.",
                "type": "Object"
            },
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 227,
            "description": "Animates an animatable object.\nAs object can have multiple animation for having multiple meshes, pass the targeted mesh in param\n> NB : This is a shortcut to `Programmable.animate`.",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "object",
                    "description": "The mesh of the object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "target",
                    "description": "The specific mesh which should be animated.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 242,
            "description": "Sets the material for a named mesh.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "name",
                    "description": "The mesh name, this mesh must be or be a child of `objectStructure.objectInstance`.",
                    "type": "String"
                }
            ],
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 252,
            "description": "Gets the material of a given mesh or child mesh.",
            "itemtype": "method",
            "name": "getMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "The mesh name, this mesh must be or be a child of `objectStructure.objectInstance`.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The material.",
                "type": "BABYLON.Material"
            },
            "class": "ObjectStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 7,
            "description": "The object in params will be transformed a lot ( well at least that the spirit )",
            "itemtype": "event",
            "name": "wnp.engine3D.object.start-transform",
            "params": [
                {
                    "name": "object",
                    "description": "the object \n\n throw when \n    * beginTransformObject is callled",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 18,
            "description": "The object in params will not longer be transformed a lot ( well at least that the spirit )",
            "itemtype": "event",
            "name": "wnp.engine3D.object.end-transform",
            "params": [
                {
                    "name": "object",
                    "description": "the object\n\n throw when \n    * endTransformObject is callled\n\n if the object have been transformed since the last beginTransform, wnp.engine3D.object.translate and wnp.engine3D.object.translate can be thown too",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 31,
            "description": "The object in params have been translated",
            "itemtype": "event",
            "name": "wnp.engine3D.object.translate",
            "params": [
                {
                    "name": "object",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "true if the object is in a begin - end period\n\n throw when \n    * moveObject is callled\n    * endTransformObject is called, and a translation have been performed since the last beginTransform",
                    "type": "Boolean"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 44,
            "description": "The object in params have been rotated",
            "itemtype": "event",
            "name": "wnp.engine3D.object.rotate",
            "params": [
                {
                    "name": "object",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "true if the object is in a begin - end period\n\n throw when \n    * moveObject is called, if the magnetism have decided that it should be rotated\n    * rotateObject is called\n    * endTransformObject is called, and a rotation have been performed since the last beginTransform",
                    "type": "Boolean"
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 91,
            "description": "notify that the object will be transformed a lot, and it's begin now\nthe transformation apply after will be notifyed with the flag pending and will not trigger the history, this behavior stop when calling endTransformObject",
            "itemtype": "method",
            "name": "beginTransformObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object, can be a group",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "silent",
                            "description": "if true, will not trigger the event",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 114,
            "description": "notify that the object will not longer be transformed a lot\nthe transformation which occured since the last beginTransformObject will be merge, notifyed and historized",
            "itemtype": "method",
            "name": "endTransformObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object, can be a group",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "silent",
                            "description": "if true, will not trigger the event",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 149,
            "description": "move the object on the scene",
            "itemtype": "method",
            "name": "moveObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object, can be a group",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newPosition",
                    "description": "the new position",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "noMagnetism",
                            "description": "if true, the magnetism will not be applied, if \"xz\" the xz magnetism will not be applied, same thing for \"y\"",
                            "type": "Boolean|string"
                        },
                        {
                            "name": "noHistory",
                            "description": "if true, the transformation will not be historized",
                            "type": "Boolean"
                        },
                        {
                            "name": "silent",
                            "description": "if true, the transformation will not trigger the event",
                            "type": "Boolean"
                        },
                        {
                            "name": "relative",
                            "description": "if true, the newPosition will be added to the current position",
                            "type": "Boolean"
                        },
                        {
                            "name": "enableGravity",
                            "description": "if true, the object bottom have to touch another object along the y axis",
                            "type": "Boolean"
                        },
                        {
                            "name": "old",
                            "description": "the old position, if omited take the current position",
                            "type": "BABYLON.Vector3"
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 254,
            "description": "rotate the object on the scene",
            "itemtype": "method",
            "name": "rotateObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newRotation",
                    "description": "the new rotation",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "noMagnetism",
                            "description": "if true, the magnetism will not be applied",
                            "type": "Boolean"
                        },
                        {
                            "name": "noHistory",
                            "description": "if true, the transformation will not be historized",
                            "type": "Boolean"
                        },
                        {
                            "name": "silent",
                            "description": "if true, the transformation will not trigger the event",
                            "type": "Boolean"
                        },
                        {
                            "name": "relative",
                            "description": "if true, the newPosition will be added to the current rotation",
                            "type": "Boolean"
                        },
                        {
                            "name": "old",
                            "description": "the old rotation, if omited take the current rotation",
                            "type": "BABYLON.Vector3"
                        }
                    ]
                }
            ],
            "class": "TransformObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 62,
            "description": "Initialize the component for the menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 133,
            "description": "Test if the cursor is on on of the element and return it.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector representing the coord of the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The target or null if nothing is under the cursor.",
                "type": "Object"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 177,
            "description": "Draw an overture.",
            "itemtype": "method",
            "name": "_drawOverture",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 297,
            "description": "Compute the overture on the wall.",
            "itemtype": "method",
            "name": "compute",
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 317,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 335,
            "description": "Handle the movement and reshape of the overture.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 367,
            "description": "When the dragging start for the move of the cursor.",
            "itemtype": "method",
            "name": "onDraggingMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 393,
            "description": "When the dragging start for resize.",
            "itemtype": "method",
            "name": "onDraggingResize",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 416,
            "description": "When the dragging end.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 437,
            "description": "When the overture is hovered by the mouse.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 452,
            "description": "When the overture is leaved by the mouse.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 466,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onSelectionDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 495,
            "description": "Add an overture.",
            "itemtype": "method",
            "name": "onAddOverture",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive with the basics data.",
                    "type": "Event"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 530,
            "description": "When add an overture and the cursor drag it.",
            "itemtype": "method",
            "name": "onAddOvertureDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 548,
            "description": "When add an overture and update it.",
            "itemtype": "method",
            "name": "onAddOvertureUpdate",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 567,
            "description": "When the action to add an overture is done.",
            "itemtype": "method",
            "name": "onAddOvertureEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 597,
            "description": "When the action to add an overture is done and the cursor leave the zone, we unregister the event.",
            "itemtype": "method",
            "name": "onAddOvertureLeaveZone",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 628,
            "description": "Handle all the item of the context menu.",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 766,
            "description": "When a value is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 803,
            "description": "When the user remove the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "wnp.overtureStructure"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 814,
            "description": "Duplicate the overture on the double click.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture selected.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "l etat de la souris.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data.",
                    "type": "Object"
                }
            ],
            "class": "OvertureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 39,
            "description": "Create the 3D meshes of the overture.",
            "itemtype": "method",
            "name": "onWallsReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive, it contain the wall mesh, the floor mesh and the structure of the floor.",
                    "type": "Event"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 46,
            "description": "Fired this event when the wall is ready to be dig.",
            "itemtype": "event",
            "name": "wnp.engine3D.overturesReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the wall.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 80,
            "description": "Create the 3D meshes of the subslope overture.",
            "itemtype": "method",
            "name": "onSubslopesReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive, it contain the wall mesh, the floor mesh and the structure of the floor.",
                    "type": "Event"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 87,
            "description": "Fired this event when the subslop of the wall are ready and can be dig.",
            "itemtype": "event",
            "name": "wnp.engine3D.subslopeOverturesReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the wall.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 121,
            "description": "Create the overture mesh.",
            "itemtype": "method",
            "name": "createOverture",
            "params": [
                {
                    "name": "overture",
                    "description": "The structure of the overture.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "structure",
                    "description": "The structure of the current stage.",
                    "type": "wnp.floorComponent3D"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3D.",
                    "type": "wnp.floorStructure"
                }
            ],
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 219,
            "description": "Create a box with the CSG mesh.",
            "itemtype": "method",
            "name": "overtureBox",
            "params": [
                {
                    "name": "ov",
                    "description": "The structure of the overture.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "The",
                    "description": "structure of the current stage.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3D.",
                    "type": "wnp.floorComponent3D"
                }
            ],
            "return": {
                "description": "The cube use to dig in CSG format.",
                "type": "BABYLON.CSG"
            },
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 263,
            "description": "Dig an overture in the wall.",
            "itemtype": "method",
            "name": "carveWithOvertureMeshes",
            "params": [
                {
                    "name": "ov",
                    "description": "The CSG mesh of the cube.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "wallCSG",
                    "description": "The wall in CSG mesh.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "wall3D",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3D.",
                    "type": "wnp.floorComponent3D"
                }
            ],
            "return": {
                "description": "New wall create after dig the wall.",
                "type": "BABYLON.Mesh"
            },
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 292,
            "description": "Dig an overture in the subslope.",
            "itemtype": "method",
            "name": "carveSubslopeOverture",
            "params": [
                {
                    "name": "subslope",
                    "description": "The subslope of the overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "ov",
                    "description": "The structure of the overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "structure",
                    "description": "The structure of the current floor.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3Ds.",
                    "type": "wnp.floorComponent3D"
                }
            ],
            "return": {
                "description": "New wall create after dig the wall.",
                "type": "BABYLON.Mesh"
            },
            "class": "OvertureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 18,
            "description": "Type of the overture.\nAvailables values are \"Door\" , \"Window\" , \"Garage\" , \"Velux\" , \"Dormer\"",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 26,
            "description": "Position of the overture.",
            "itemtype": "property",
            "name": "position",
            "type": "BABYLON.Vector2",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 33,
            "description": "Width of the overture.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 40,
            "description": "Height of the structure.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 47,
            "description": "Thickness of the overture.",
            "itemtype": "property",
            "name": "thickness",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 54,
            "description": "Elevation of the overture.",
            "itemtype": "property",
            "name": "elevation",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 61,
            "description": "Define the side of the overture where the hinge should be displayed (0 = right, 1 = left).",
            "itemtype": "property",
            "name": "hinge",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 68,
            "description": "Define the side of the room where the hinge should be displayed ( inside / outside of the room ).\nAvailables values are -1 or 1",
            "itemtype": "property",
            "name": "side",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 76,
            "description": "The number of the casement.\nAvailables values are 0 , 1 , 2 , 3",
            "itemtype": "property",
            "name": "nbCasement",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 84,
            "description": "The parent wall.",
            "itemtype": "property",
            "name": "parentWall",
            "type": "wnp.wallPane",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 91,
            "description": "The minimum size of the overture.",
            "itemtype": "property",
            "name": "minsize",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 98,
            "description": "If the overture is sliding or not.",
            "itemtype": "property",
            "name": "sliding",
            "type": "Boolean",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 105,
            "description": "j'ai demandé à google, un galangage c'est quand une fenetre coulisse dans le mur en position ouverte. Ce qui fait que la surface de l'ouverture est totalement ouverte dans le cas d'une baie vitrée.\napparement ce n'est pas actuellement possible dans wanaplan\nfeature abandonnée j'imagine\npar contre le param est correctement traduit et relayer jusquau getObject3D",
            "itemtype": "property",
            "name": "galandage",
            "access": "private",
            "tagname": "",
            "type": "Boolean",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 117,
            "description": "The Thickness of the structure.",
            "itemtype": "property",
            "name": "batiThickness",
            "type": "Number",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 124,
            "description": "The instance of the programmable.",
            "itemtype": "property",
            "name": "programmableInstance",
            "type": "BABYLON.Mesh",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 131,
            "description": "Describe if a plinte should be displayed or not.\nOnly for the windows.",
            "itemtype": "property",
            "name": "plinte",
            "type": "Boolean",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 159,
            "description": "Check the coherence of all the parameters.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "structure",
                    "description": "The overture structure.",
                    "type": "OvertureStructure"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 179,
            "description": "Gets the wall of the overture.",
            "itemtype": "method",
            "name": "getParentWall",
            "return": {
                "description": "The parent of the overture.",
                "type": "WallPane"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 190,
            "description": "Sets the wall of the overture.",
            "itemtype": "method",
            "name": "setParentWall",
            "params": [
                {
                    "name": "wall",
                    "description": "The futur parent of the overture.",
                    "type": "WallPane"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 220,
            "description": "Compute the position of the overture on the new wall when we change the overture on a new wall.",
            "itemtype": "method",
            "name": "computePositionOnWallChange",
            "params": [
                {
                    "name": "newWall",
                    "description": "The new wall of the overture.",
                    "type": "wnp.wallPane"
                }
            ],
            "return": {
                "description": "The new position.",
                "type": "BABYLON.Vector2"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 241,
            "description": "Project on the wall the position of the overture.",
            "itemtype": "method",
            "name": "projectOnWall",
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 264,
            "description": "Return a couple: the position giving the center of the overture and the unit vector of the parent wall.",
            "itemtype": "method",
            "name": "getAbsolutePos",
            "return": {
                "description": "position: BABYLON.Vector3, vector: BABYLON.Vector3 The position and the unit vector.",
                "type": "Object"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 277,
            "description": "Return the angle of the overture.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "The angle.",
                "type": "Number"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 288,
            "description": "Return the polygon describing the overture.",
            "itemtype": "method",
            "name": "getPolygon",
            "return": {
                "description": "The array of the points of the polygon.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 307,
            "description": "Resize the overture in function of the parent wall.",
            "itemtype": "method",
            "name": "clampSize",
            "params": [
                {
                    "name": "allowDelete",
                    "description": "Specify if we allow the deletion or not if the size of the wall is to small.",
                    "type": "Boolean"
                },
                {
                    "name": "structure",
                    "description": "The current floor structure. Must be specify if allowDelete == true.",
                    "type": "FloorStructure"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 329,
            "description": "Delete the overture.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure where the engine have to remove the overture.",
                    "type": "FloorStructure"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 344,
            "description": "Set the material.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "Material"
                }
            ],
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 353,
            "description": "Get a material.",
            "itemtype": "method",
            "name": "getMaterial",
            "return": {
                "description": "The material.",
                "type": "Material"
            },
            "class": "OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\Path.js",
            "line": 15,
            "class": "Path",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\Path.js",
            "line": 17,
            "class": "Path",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 19,
            "description": "Size of the points when drawn on the 2D canvas.",
            "itemtype": "property",
            "name": "_SIZE",
            "type": "{Number}",
            "default": "13",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 28,
            "description": "Radius of the angle when drawn on the 2D canvas.",
            "itemtype": "property",
            "name": "_ANGLERADIUS",
            "type": "{Number}",
            "default": "55",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 37,
            "description": "Which points need their angle to be displayed.",
            "itemtype": "property",
            "name": "anglePointList",
            "type": "{PointStructure[]}",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 45,
            "description": "Flag that indicates whether a point is currently dragged.",
            "itemtype": "property",
            "name": "dragging",
            "access": "private",
            "tagname": "",
            "type": "{Boolean}",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 54,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "90",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 103,
            "description": "Process all points which have the ```needsUpdate``` flag set to true.\nThis method tries to merge points or attach them to surrounding walls.",
            "itemtype": "method",
            "name": "tryMergeAttachAll",
            "params": [
                {
                    "name": "force",
                    "description": "Forces the update of all points.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 133,
            "description": "Draws the angle between the two parent walls of a point.",
            "itemtype": "method",
            "name": "drawAngle",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 195,
            "description": "When the mouse begins to drag the point.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "BABYLON.PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 223,
            "description": "When the mouse is dragging the point.",
            "itemtype": "method",
            "name": "onDragging",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "BABYLON.PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 244,
            "description": "When the mouse releases the point.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "BABYLON.PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 297,
            "description": "When the mouse hovers the point.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "BABYLON.PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 316,
            "description": "When the mouse leaves the point.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "BABYLON.PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 335,
            "description": "When the mouse double clicks on the point.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The point structure dragged by the mouse.",
                    "type": "BABYLON.PointStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 18,
            "description": "2D position of the point.",
            "itemtype": "property",
            "name": "position",
            "type": "{BABYLON.Vector2}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 26,
            "description": "On which wall the point is attached to. Can be null.",
            "itemtype": "property",
            "name": "attachedTo",
            "type": "{WallStructure}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 34,
            "description": "Flag that indicates if the points needs to be updated\n(attached or merged).",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 43,
            "description": "The parent walls of the point. The length can be 1 or 2.",
            "itemtype": "property",
            "name": "parents",
            "type": "{WallStructure[]}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 51,
            "description": "Internal, deserialization.",
            "itemtype": "property",
            "name": "_parentIds",
            "access": "private",
            "tagname": "",
            "type": "{WallStructure}",
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 129,
            "description": "Moves the point by a given vector offset.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "vector",
                    "description": "Offset vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 139,
            "description": "Removes the point from the floor structure.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure referencing this point.",
                    "type": "FloorStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 154,
            "description": "Replaces a parent wall with another parent wall.\n\nNB: The order of the parents list can change.",
            "itemtype": "method",
            "name": "replaceParent",
            "params": [
                {
                    "name": "oldWall",
                    "description": "The old parent.",
                    "type": "WallStructure"
                },
                {
                    "name": "newWall",
                    "description": "The new parent, can be undefined if you just want to delete a parent.",
                    "type": "WallStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 169,
            "description": "Tries to merge the point with the other surrounding points, if such a thing is possible.",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure containing this point.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The merged point. Returns this point if nothing has been merged.",
                "type": "PointStructure"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 220,
            "description": "Forces merging with another point.",
            "itemtype": "method",
            "name": "forceMerge",
            "params": [
                {
                    "name": "point",
                    "description": "Other point to merge with. It will be deleted from the floor structure.",
                    "type": "PointStructure"
                },
                {
                    "name": "fs",
                    "description": "The floor structure containing this point.",
                    "type": "FloorStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 250,
            "description": "Tries to attach the point on the surrounding walls, if such a thing is possible.",
            "itemtype": "method",
            "name": "tryAttach",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure containing this point.",
                    "type": "FloorStructure"
                },
                {
                    "name": "blacklist",
                    "description": "Wall to ignore while searching for candidates.",
                    "type": "WallStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "False if nothing has been attached.",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 327,
            "description": "Returns the current attached status.",
            "itemtype": "method",
            "name": "isAttached",
            "return": {
                "description": "True if the point is attached.",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 337,
            "description": "Returns the wall onto the point is attached.",
            "itemtype": "method",
            "name": "wallAttached",
            "return": {
                "description": "A wall, or undefined/null if the point is not attached.",
                "type": "WallStructure"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 347,
            "description": "Removes the attach of a point.",
            "itemtype": "method",
            "name": "unAttach",
            "return": {
                "description": "False if the point wasn't previously attached.",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 19,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "9",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 29,
            "description": "Temporary storage of the 2D computed rooms.",
            "itemtype": "property",
            "name": "rooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 38,
            "description": "Temporary storage of the 2D internal rooms.",
            "itemtype": "property",
            "name": "internalRooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 47,
            "description": "Temporary storage of the 2D external rooms.",
            "itemtype": "property",
            "name": "externalRooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 56,
            "description": "Flag signaling if we can use the previously computed rooms stored in the cache.\nSpeed up purposes.",
            "itemtype": "property",
            "name": "useCache",
            "access": "private",
            "tagname": "",
            "type": "{Boolean}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 66,
            "description": "Flag to display/hide room names.",
            "itemtype": "property",
            "name": "displayRoomName",
            "type": "{Boolean}",
            "default": "true",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 97,
            "description": "Returns a subslope list based on the rooms.\nWarning : the subslopes returned are not usable as is, they must be processed by \"getSubSlope\" from subSlopeComponent2D !",
            "itemtype": "method",
            "name": "getAllSubSlopes",
            "params": [
                {
                    "name": "structure",
                    "description": "The related floor. If not specified, the current active floor will be used.",
                    "type": "FloorStructure"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 159,
            "description": "Returns the current computed internal rooms.",
            "itemtype": "method",
            "name": "getInternalRooms",
            "return": {
                "description": "The current internal rooms.",
                "type": "RoomStructure[]"
            },
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 170,
            "description": "Returns the current computed external rooms.",
            "itemtype": "method",
            "name": "getInternalRooms",
            "return": {
                "description": "The current external rooms.",
                "type": "RoomStructure[]"
            },
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 182,
            "description": "Matches two sets of RoomStructure to pair those which look alike the most.\nThis uses a custom (yet perfectible) matching algorithm based on overlapping areas.",
            "itemtype": "method",
            "name": "identifyRooms",
            "params": [
                {
                    "name": "rooms0",
                    "description": "Set 0.",
                    "type": "RoomStructure[]"
                },
                {
                    "name": "rooms1",
                    "description": "Set 1.",
                    "type": "RoomStructure[]"
                }
            ],
            "return": {
                "description": "An array T such as T[i] = roomj implies :\nThe room i in the smaller set is the most alike to the roomj in the bigger set.\nT length is : ```min(rooms0.length, rooms1.length)```\nExample case :\nrooms0.length is smaller than rooms1.length : if T[i] = roomj, then the image of rooms0[i] is roomj, and roomj is taken from rooms1.",
                "type": "Array"
            },
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 232,
            "description": "Copies the properties of a former room collection with a new generated room collection.",
            "itemtype": "method",
            "name": "dispatchRooms",
            "params": [
                {
                    "name": "collection",
                    "description": "Can be either \"internalRooms\", either \"externalRooms\".",
                    "type": "String"
                },
                {
                    "name": "structure",
                    "description": "The related floor.",
                    "type": "FloorStructure"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 259,
            "description": "Computes the rooms from the 2D geometry of the house.\nBased on the ```polygonMerger``` method.",
            "itemtype": "method",
            "name": "computeRooms",
            "params": [
                {
                    "name": "structure",
                    "description": "The related floor. If not specified, the current active floor will be used.",
                    "type": "FloorStructure",
                    "optional": true,
                    "optdefault": "CurrentStructure"
                },
                {
                    "name": "cycles",
                    "description": "Optionnal parameter to specify pre-computed cycles (usually from the cache), in order to speed up the process.",
                    "type": "Cycles",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 439,
            "description": "Draws all rooms for the current active floor.",
            "itemtype": "method",
            "name": "drawRooms",
            "params": [
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 456,
            "description": "Determines if a point is inside the polygon of one of the currently displayed rooms.",
            "itemtype": "method",
            "name": "isPointInRooms",
            "params": [
                {
                    "name": "vector",
                    "description": "The test vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The room in which the point stands, or null if it is outside every room.",
                "type": "RoomStructure"
            },
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 473,
            "description": "Draws a room.",
            "itemtype": "method",
            "name": "drawRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to draw.",
                    "type": "RoomStructure"
                },
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 19,
            "description": "Default textures",
            "itemtype": "property",
            "name": "_defaultRoomTextures",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 31,
            "description": "Default Material for the floor",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{wnp.Material}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 42,
            "description": "Default Material for the ceiling",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{wnp.Material}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 51,
            "description": "Default Material for carving floors & ceilings",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{wnp.Material[]}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 60,
            "description": "Material offset for batching of the rooms into 1 single mesh.",
            "itemtype": "property",
            "name": "_materialOffset",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 73,
            "description": "Returns the common material displayed on the side of the floor when it is carved by hoppers.",
            "itemtype": "method",
            "name": "getSideMaterial",
            "return": {
                "description": "The side Material.",
                "type": "wnp.Material"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 83,
            "description": "Sets the common material displayed on the side of the floor when it is carved by hoppers.",
            "itemtype": "method",
            "name": "setSideMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The side Material.",
                    "type": "wnp.Material"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 93,
            "description": "Returns the common ceiling material.",
            "itemtype": "method",
            "name": "getCeilingMaterial",
            "return": {
                "description": "The ceiling Material.",
                "type": "wnp.Material"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 103,
            "description": "Sets the common ceiling material.",
            "itemtype": "method",
            "name": "setCeilingMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The ceiling Material.",
                    "type": "wnp.Material"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 128,
            "description": "Callback called when the floor mesh is ready.",
            "itemtype": "method",
            "name": "onFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "The \"floor-ready\" event.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 179,
            "description": "Builds the 3D floor-wide room mesh and adds it to the scene.",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "rooms",
                    "description": "The rooms to build.",
                    "type": "RoomStructure[]"
                },
                {
                    "name": "hoppers",
                    "description": "Polygonal holes in the floor.",
                    "type": "HopperStructure[]"
                },
                {
                    "name": "floor",
                    "description": "Related floor.",
                    "type": "FloorStructure"
                },
                {
                    "name": "hoppers",
                    "description": "Polygonal holes in the ceiling.",
                    "type": "HopperStructure[]"
                }
            ],
            "return": {
                "description": "globalMesh Floor-wide mesh for the rooms & ceilings.",
                "type": "BABYLON.Mesh"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 231,
            "description": "Removes the 3D floor added by the doors to make the junction.",
            "itemtype": "method",
            "name": "normalizePolygon",
            "params": [
                {
                    "name": "points",
                    "description": "Room 2D points.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "} New list of points.",
                "type": "BABYLON.Vector2{]"
            },
            "access": "private",
            "tagname": "",
            "warning": "This method is a ugly hack and should not be used by anyone. Even the wanaplan team. Just sayin'.",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 250,
            "description": "Builds a single 3D room with its hoppers.",
            "itemtype": "method",
            "name": "createRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to build.",
                    "type": "RoomStructure"
                },
                {
                    "name": "height",
                    "description": "The height of the room.",
                    "type": "Number"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 313,
            "description": "Carves a hole in the room.",
            "itemtype": "method",
            "name": "carveHole",
            "params": [
                {
                    "name": "room3D",
                    "description": "Floor-wide mesh of the rooms.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "hole",
                    "description": "Polygonal 2D hole (flat).",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "height",
                    "description": "The height of the hole, amount of the 3D extrusion of the 2D polygon.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "finalRoom Room after carving.",
                "type": "BABYLON.Mesh"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 344,
            "description": "Replaces the former 3D room mesh with a new 3D mesh, keeping the custom property of a 3D room-mesh like \"boundingBoxes\" or \"objectInstances\".",
            "itemtype": "method",
            "name": "replaceRoom",
            "params": [
                {
                    "name": "oldRoom",
                    "description": "Old room.",
                    "type": "OldRoom"
                },
                {
                    "name": "newRoom",
                    "description": "New room.",
                    "type": "NewRoom"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 369,
            "description": "Creates the object instances and bounding boxes from merged subMeshes.",
            "itemtype": "method",
            "name": "createInstances",
            "params": [
                {
                    "name": "roomMesh",
                    "description": "3D room mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 24,
            "description": "2D vectors building the room's flat polygon.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 32,
            "description": "Potential holes in the room's polygon.\nArray of 2D vectors array describing the holes.",
            "itemtype": "property",
            "name": "holes",
            "type": "{BABYLON.Vector2[][]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 41,
            "description": "Walls that surround the room.",
            "itemtype": "property",
            "name": "walls",
            "type": "{WallStructure[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 49,
            "description": "Array of normal vectors to walls referenced in the \"walls\" property.\nThese vectors are normal to the walls, and point towards the room polygon.\nIndex sync : given i an index, parentWallSides[i] is normal to walls[i].",
            "itemtype": "property",
            "name": "parentWallSides",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 59,
            "description": "Array of wall panes. See the wanaplan wiki for more info about wall panes.",
            "itemtype": "property",
            "name": "panes",
            "type": "{WallPanes3D[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 67,
            "description": "Cycle used to build the room, private property.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "cycle",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 76,
            "description": "Room's inner id, can't be modified by the user.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 85,
            "description": "Room label, can be modified by the user.",
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 93,
            "description": "Room's hexa color.",
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 101,
            "description": "Room's area (2D).",
            "itemtype": "property",
            "name": "area",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 109,
            "description": "Indicates if the room is external (see Wiki for more info about internal and external rooms).",
            "itemtype": "property",
            "name": "isExternal",
            "type": "{Boolean}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 117,
            "description": "Where to display the room's area label on the screen (2D).",
            "itemtype": "property",
            "name": "areaPosition",
            "type": "{BABYLON.Vector2}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 125,
            "description": "Text style: The width of the text.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "textWidth",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 134,
            "description": "Text style: the height of the text.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "textHeight",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 143,
            "description": "Room's materials.\nContains two fields : materials['ceiling'] and materials['floor'].",
            "itemtype": "property",
            "name": "materials",
            "type": "{Object}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 152,
            "description": "Room's panes materials.\nFor serialization purposes, has to be modified in the future.",
            "access": "private",
            "tagname": "",
            "todo": [
                ""
            ],
            "itemtype": "property",
            "name": "panesMaterials",
            "type": "{BABYLON.Material[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 163,
            "description": "Room elevation.",
            "itemtype": "property",
            "name": "elevation",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 171,
            "description": "Room height (distance between the floor and the ceiling).",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 179,
            "description": "Thickness of the floor (3D).",
            "itemtype": "property",
            "name": "thickness",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 187,
            "description": "Ceiling flag:\n0 means no ceiling\n1 means ceiling\n2 means \"let the algorithm choose\".",
            "itemtype": "property",
            "name": "ceiling",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 240,
            "description": "Deserializes the object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "An object issued from a serialization.",
                    "type": "String"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 270,
            "description": "Get the floor referencing this object.",
            "itemtype": "method",
            "name": "getFloor",
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection.",
                "type": "FloorStructure"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 286,
            "description": "Returns the center of a room.",
            "itemtype": "method",
            "name": "getCenter",
            "return": {
                "description": "The 2D center of gravity of the room's polygon.",
                "type": "BABYLON.Vector2"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 297,
            "description": "Sets the color of a room.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "The",
                    "description": "hexa representation of the color.",
                    "type": "String"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 307,
            "description": "Get the Wall Panes (see Wanaplan API wiki for more info).",
            "itemtype": "method",
            "name": "getWallPanes",
            "return": {
                "description": "The Wall Panes of the room.",
                "type": "WallPane3D[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 317,
            "description": "Updates a wallPane with a new material and refreshes its center and normal.\nThis function must be called after dispatchMaterials, if there have been a 2D -> 3D switch.",
            "itemtype": "method",
            "name": "updatePaneMaterial",
            "params": [
                {
                    "name": "pane",
                    "description": "The pane to be updated.",
                    "type": "WallPane3D"
                },
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "BABYLON.Material"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 332,
            "description": "Copies a room from mandatory params.\n\nWARNING: Beware of shared materials !",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "room",
                    "description": "The room to copy.",
                    "type": "RoomStructure"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 365,
            "description": "Creates a room from a closed cycle of points.",
            "itemtype": "method",
            "name": "createFromCycle",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "cycle",
                    "description": "The cycle of points.",
                    "type": "Object[][]"
                }
            ],
            "return": {
                "description": "The resulting room.",
                "type": "RoomStructure"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 407,
            "description": "Creates the wall panes for the room.\nBasically, one side of the room's polygon = 1 wall pane.",
            "itemtype": "method",
            "name": "createWallPanes",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The wall panes.",
                "type": "WallPane3D[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 431,
            "description": "Dispatches the materials onto the wall panes.\nTakes the panesMaterials list, and finds on which pane, which material is most likely to be.\nThe likelihood score is determined by the center and normal of the wallPane.",
            "itemtype": "method",
            "name": "dispatchMaterials",
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 481,
            "description": "Adds floor on doors, or overtures that hit the ground, so there is no hole in the connection between 2 rooms.",
            "itemtype": "method",
            "name": "addFloorOnOvertures",
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 587,
            "description": "Equal operator for 2 rooms.\nCompares the points of 2 rooms.",
            "itemtype": "method",
            "name": "eql",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with.",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "True if this room points are inside the parametered room points.",
                "type": "Boolean"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 607,
            "description": "Determines if a point is in the room.",
            "itemtype": "method",
            "name": "isPointIn",
            "params": [
                {
                    "name": "vector",
                    "description": "The point in plan coordinates.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "True if the point is in the room.",
                "type": "Boolean"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 625,
            "description": "Returns the area of the room.",
            "itemtype": "method",
            "name": "getRoomArea",
            "params": [
                {
                    "name": "force",
                    "description": "Forces a recomputing of the room area.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The room area.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 641,
            "description": "Computes the area of the room.",
            "itemtype": "method",
            "name": "processRoomArea",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The room area.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 670,
            "description": "Returns the oriented area of the room.",
            "itemtype": "method",
            "name": "orientedArea",
            "return": {
                "description": "The room area, negative if the room is counterclockwise.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 683,
            "description": "Flips a room. If it was counterclockwise, it becomes clockwise.",
            "itemtype": "method",
            "name": "reversePath",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 692,
            "description": "Returns a BABYLON.Vector2 Array of the room points.",
            "itemtype": "method",
            "name": "toVec2Array",
            "return": {
                "description": "The array of points.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 707,
            "description": "Determines the overlapping area of 2 rooms boundingBoxes.",
            "itemtype": "method",
            "name": "getOverlappingRectArea",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with.",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "The overlapping area of boundingBoxes.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 730,
            "description": "Gives a score of likelihood between 2 rooms.",
            "itemtype": "method",
            "name": "getLikelihood",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with.",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "An arbitrary number, usually less than 10. The higher, the more alike the rooms look.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 757,
            "description": "Returns the 2D not oriented Bounding Box.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "The Bounding Box.",
                "type": "BABYLON.BoundingBox"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 25,
            "description": "Serialize the object.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "A string resulting of the serialization.",
                "type": "String"
            },
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 61,
            "description": "Deserialize a stairway.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The object serialized.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A structure stairway serialized.",
                "type": "wnp.stairwayStructure"
            },
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 94,
            "description": "Compute the point of a spiral stairway.",
            "itemtype": "method",
            "name": "computeSpiralPoints",
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 135,
            "description": "Get the point of the hopper create by the stairway.",
            "itemtype": "method",
            "name": "getHopperPoints",
            "return": {
                "description": "The points of the hopper.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 157,
            "description": "Draw a the spiral stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "_temp",
                    "description": "The temporary position of the stairway.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "SpiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 59,
            "description": "When the structure is load, we check the coherenct of the structure.",
            "itemtype": "method",
            "name": "onStructureLoaded",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 77,
            "description": "When the user add a stage, the engine look for the stairway in stage below and compute the hopper.",
            "itemtype": "method",
            "name": "onFloorAdded",
            "params": [
                {
                    "name": "event",
                    "description": "The associated event.",
                    "type": "Event"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 100,
            "description": "When the user leave the stairway.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure leaved.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 116,
            "description": "When the user hover the stairway.",
            "itemtype": "method",
            "name": "onHoverStair",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 132,
            "description": "When the user hover the stairway with the cursor.",
            "itemtype": "method",
            "name": "onHoverStairMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure hovered.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 148,
            "description": "When hover.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure hovered.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 166,
            "description": "When the user finish to drag the stairway.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 205,
            "description": "Draw the stair when the user drag the stairway.",
            "itemtype": "method",
            "name": "onDrawDragging",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 219,
            "description": "Method call only on the drag start when the user draw, it allow to simulate a pen to draw the stairway.",
            "itemtype": "method",
            "name": "onDrawDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 236,
            "description": "When the user start to drag the stair.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure leaved.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 250,
            "description": "When the user drag a spiral stair.",
            "itemtype": "method",
            "name": "onDragStairSpiral",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The spiral stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 291,
            "description": "When the user drag a spiral stair.",
            "itemtype": "method",
            "name": "onDragStair",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The spiral stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 337,
            "description": "Get the stairway and return it.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 363,
            "description": "Initialize the component for the menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 413,
            "description": "Add a stairway.",
            "itemtype": "method",
            "name": "onAddStairway",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive with the basics data.",
                    "type": "Event"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 436,
            "description": "When the user double click on the stairway, add a new point.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 453,
            "description": "Finalize to build the stairway, and create the hopper.",
            "itemtype": "method",
            "name": "finalizeTmpStairway",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 483,
            "description": "When the user add a point on the stairway with a simple click.",
            "itemtype": "method",
            "name": "onAddStairwayClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 522,
            "description": "On the mousemove, in draw state, we create the temporary point (perpendicular to the last segment).",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 565,
            "description": "Add the magnetism on the stairway.",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "origin",
                    "description": "The origin of the point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 593,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 626,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 664,
            "description": "Handle all the item of the context menu.",
            "itemtype": "method",
            "name": "onContextMenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 817,
            "description": "When a value is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure changed value.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 831,
            "description": "When the user remove the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "StairwayStructure"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 850,
            "description": "Draw a stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "tmpPoint",
                    "description": "The tamporary point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 871,
            "description": "Draw a spiral stairway.",
            "itemtype": "method",
            "name": "drawTargetSpiral",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 895,
            "description": "Draw a stairway.",
            "itemtype": "method",
            "name": "drawTargetSpiral",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "StairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 39,
            "description": "When the floor is ready, we can create all the floor of the stage.",
            "itemtype": "method",
            "name": "onFloorReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event with the important informations (The scene and the current structure).",
                    "type": "Event"
                }
            ],
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 54,
            "description": "Create all the stairways of the scene.",
            "itemtype": "method",
            "name": "createScene",
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 76,
            "description": "Put the material on the good mesh.",
            "itemtype": "method",
            "name": "initMaterials",
            "params": [
                {
                    "name": "object3d",
                    "description": "The mesh of the stairway.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materials",
                    "description": "The materials of the stairway.",
                    "type": "wnp.standardMaterial[]"
                }
            ],
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 93,
            "description": "Create the mesh of the stairway.",
            "itemtype": "method",
            "name": "createStairway",
            "params": [
                {
                    "name": "stairway",
                    "description": "The structure of the stairway.",
                    "type": "wnp.stairwayStructure"
                },
                {
                    "name": "sceneF",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "scene",
                    "description": "The global scene.",
                    "type": "BABYLON.scene"
                }
            ],
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 137,
            "description": "Apply the shadow of all the mesh.",
            "itemtype": "method",
            "name": "applyShadow",
            "params": [
                {
                    "name": "Object3d",
                    "description": "The 3D object.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "StairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 22,
            "description": "The points defining the path of the subslope.",
            "itemtype": "property",
            "name": "points",
            "type": "BABYLON.Vector3[]",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 29,
            "description": "Type of the subslope (straight of spiral).",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 36,
            "description": "Width of the stairway.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 43,
            "description": "Height of the stairway.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 50,
            "description": "The stair height.",
            "itemtype": "property",
            "name": "stair_height",
            "type": "Number",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 57,
            "description": "The stair thickness.",
            "type": "Number",
            "itemtype": "property",
            "name": "stair_thickness",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 64,
            "description": "The stair width.",
            "type": "Number",
            "itemtype": "property",
            "name": "stair_width",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 71,
            "description": "Have or not rails.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "rail_a",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 78,
            "description": "Have or not rails.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "rail_b",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 85,
            "description": "Have or not limon.",
            "type": "Number",
            "itemtype": "property",
            "name": "limon",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 92,
            "description": "The stick spacement.",
            "type": "Number",
            "itemtype": "property",
            "name": "stick_spacement",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 99,
            "description": "Have or not contremarche.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "have_contremarche",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 106,
            "description": "The elevation of the stairway.",
            "type": "Number",
            "itemtype": "property",
            "name": "elevation",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 113,
            "description": "The diameter of the middle of the stairway.",
            "type": "Number",
            "itemtype": "property",
            "name": "diameter",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 120,
            "description": "Have or not bearing.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "bearing",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 127,
            "description": "The stair offset.",
            "type": "Number",
            "itemtype": "property",
            "name": "stair_offset",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 134,
            "description": "The materials of the stairway.",
            "type": "wnp.StandardMaterial",
            "itemtype": "property",
            "name": "materials",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 141,
            "description": "The room.",
            "type": "wnp.roomStructure",
            "itemtype": "property",
            "name": "room",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 148,
            "description": "The orientation of the stairway.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "orientation",
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 248,
            "description": "Get the hopper point create by the stairway.",
            "itemtype": "method",
            "name": "getHopperPoints",
            "return": {
                "description": "The four point of the hopper.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 283,
            "description": "Return the point of the step.",
            "itemtype": "method",
            "name": "getStepBoundPoints",
            "params": [
                {
                    "name": "bottomIndex",
                    "description": "The index of the bottom point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The four point of a step.",
                "type": "BABYLON.Vector3[]"
            },
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 312,
            "description": "Get the normal from the index point.",
            "itemtype": "method",
            "name": "getNormalAtPoint",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The normal at the point.",
                "type": "BABYLON.Vector3"
            },
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 329,
            "description": "Delete the strairway.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure of the floor.",
                    "type": "wnp.floorStructure"
                }
            ],
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 340,
            "description": "Add a material.",
            "itemtype": "method",
            "name": "addMaterial",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "parent",
                    "description": "The parent of the mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "mesh",
                    "description": "The stairway mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materialItem",
                    "description": "The item material.",
                    "type": "wnp.StandardMaterial"
                }
            ],
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 358,
            "description": "Get the property of the object.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "An array contain the different property of the object.",
                "type": "Object[]"
            },
            "class": "StairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 26,
            "description": "Check if the stair is valid and have enough point to create the 3D mesh.",
            "itemtype": "method",
            "name": "isValid",
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 39,
            "description": "Check if the stair is the target.",
            "itemtype": "method",
            "name": "computeSpiralPoints",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector create by the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 69,
            "description": "Draw a the spiral stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "tmpPoint",
                    "description": "The temporary position of the stairway.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 91,
            "description": "Serialize the object.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "A string resulting of the serialization.",
                "type": "String"
            },
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 128,
            "description": "Deserialize a stairway.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The object serialized.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A structure stairway serialized.",
                "type": "wnp.stairwayStructure"
            },
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 163,
            "description": "Compute the point of the step of a straight stairway.",
            "itemtype": "method",
            "name": "computeSteps",
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 255,
            "description": "Get the bounding point of a step.",
            "itemtype": "method",
            "name": "getBoundPoints",
            "params": [
                {
                    "name": "step",
                    "description": "The step of the stairway.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The table of the bounding points.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 281,
            "description": "Draw the bearing.",
            "itemtype": "method",
            "name": "drawStepBearing",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "polygon",
                    "description": "The polygon points of the bearing.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "end",
                    "description": "Know if it is the last bearing or not.",
                    "type": "Number"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 313,
            "description": "Draw the step.",
            "itemtype": "method",
            "name": "drawStep",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "step",
                    "description": "The step of the stairway.",
                    "type": "Number"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 357,
            "description": "Draw all the steps of the stairway.",
            "itemtype": "method",
            "name": "drawStepStairs",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "segment",
                    "description": "The segment done by the step.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 397,
            "description": "Check of a point is in the polygon the bearing or the step.",
            "itemtype": "method",
            "name": "isInPoly",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector of the cursor.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "points",
                    "description": "The points of the polygon.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "class": "StraightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 20,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "100",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 30,
            "description": "Current computed subSlopes for caching purposes.",
            "itemtype": "property",
            "name": "subSlopes",
            "access": "private",
            "tagname": "",
            "type": "{SubSlopeStructure[]}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 39,
            "description": "Component internal update flag",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 47,
            "description": "Flag for height settings",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_applyHeightToAll",
            "type": "{Boolean}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 56,
            "description": "2D display style (radius).",
            "itemtype": "property",
            "name": "_HANDLERADIUS",
            "type": "{Number}",
            "default": "10",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 65,
            "description": "2D display style (static color).",
            "itemtype": "property",
            "name": "_HANDLESTATICSTYLE",
            "type": "{String}",
            "default": "'rgba(60,82,129,0.8)'",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 74,
            "description": "2D display style (current handle style).",
            "itemtype": "property",
            "name": "_HANDLESTYLE",
            "type": "{String}",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 114,
            "description": "Fired when the subslope is in the menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The item in the menu (name of the section, index, etc ...).",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "The path of the menu.",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "The position inside the menu.",
                    "type": "Number"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 137,
            "description": "Function call when the user click on the subslope button and is in MODE_SUBSLOPE in the engine2D.",
            "itemtype": "event",
            "name": "wnp.engine2d.onEditSubSlope",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 148,
            "description": "Function call when the user go back to the MODE_NORMAL.",
            "itemtype": "event",
            "name": "wnp.engine2d.onModeSubSlopeEnd",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 159,
            "description": "Function call when the user go back normal mode and skip the draw of the subslope.",
            "itemtype": "event",
            "name": "subslope-end",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 170,
            "description": "Draw the subslopes on the canvas.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 188,
            "description": "Draws the subslopes on the canvas dynamically when the subslope is dragged.",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D Context of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 207,
            "description": "When the mouse hovers the subslope.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 223,
            "description": "When the mouse leaves the subslope.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure left by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 240,
            "description": "When the mouse begins to drag the subslope.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure dragged by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 256,
            "description": "When the mouse is dragging the subslope.",
            "itemtype": "method",
            "name": "onDragging",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure dragging by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 390,
            "description": "When the mouse stops dragging the subslope.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 400,
            "description": "Fired when the user stops dragging the subslope.",
            "itemtype": "event",
            "name": "wnp.subslope.drag-end",
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 415,
            "description": "Recalculates all the subslopes.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor we want to update.\nNote that providing this parameter forces the update of the subslopes.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 455,
            "description": "Gets the list of the walls which can have a subslope.",
            "itemtype": "method",
            "name": "getSubSlopes",
            "params": [
                {
                    "name": "force",
                    "description": "Forces the subslopes to be updated.",
                    "type": "Noolean"
                },
                {
                    "name": "structure",
                    "description": "The related floor.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 577,
            "description": "Splits the subslope in two subslopes, with the help of a subslope divider.",
            "itemtype": "method",
            "name": "splitSubSlope",
            "params": [
                {
                    "name": "sSS",
                    "description": "The subslope divided.",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "dSS",
                    "description": "The subslope dividing.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 638,
            "description": "Draws the subslopes.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 655,
            "description": "Draws the subslopes on a wall.",
            "itemtype": "method",
            "name": "drawOnWall",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "subSlope",
                    "description": "The current subslopeStructure.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 704,
            "description": "When the menu of the subslopes have to be drawn on the canvas to set the basics parameters.",
            "itemtype": "method",
            "name": "onContextMenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 786,
            "description": "When a property change in the context menu.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 815,
            "description": "When the menu is removed.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "SubSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 21,
            "description": "Id of the current subslope.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "currentID",
            "type": "{Number}",
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 45,
            "description": "Event sent by the wallComponent3D when the wall is ready to be carved.",
            "itemtype": "event",
            "name": "",
            "type": "Walls: current wall, scene : the scene of wanaplan, structure: structure of the floor",
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 61,
            "description": "Builds the CSG mesh which carves a part of the wall mesh.",
            "itemtype": "method",
            "name": "buildCSG",
            "params": [
                {
                    "name": "points",
                    "description": "Points of the subslope plane mesh.",
                    "type": "BABYLON.Vector3[]"
                },
                {
                    "name": "structure",
                    "description": "Structure of the SubSlope",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Final CSG mesh.",
                "type": "BABYLON.CSG"
            },
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 163,
            "description": "Adds the subslope mesh to the scene.",
            "itemtype": "method",
            "name": "addSubSlope",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "points",
                    "description": "Points of the subslope plane mesh.",
                    "type": "BABYLON.Vector3[]"
                },
                {
                    "name": "subSlope",
                    "description": "The current subslope.",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "structure",
                    "description": "The wall on which the subslope must be added.",
                    "type": "WallStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 315,
            "description": "Carves the wall with the big union of CSG.",
            "itemtype": "method",
            "name": "buildFromCSG",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "wallCSG",
                    "description": "Mesh of the wall but in CSG.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "roomCSG",
                    "description": "CSG of the room.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "subslopeCSG",
                    "description": "CSG of all the subslope.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 357,
            "description": "Carves And creates subslopes for all the floor.",
            "itemtype": "method",
            "name": "drawSSForStructure",
            "params": [
                {
                    "name": "structure",
                    "description": "Current structure.",
                    "type": "FloorStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Global scene of the floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 365,
            "description": "Fired when the subslope are drawn.",
            "itemtype": "event",
            "name": "wnp.engine3D.subslopesReady",
            "params": [
                {
                    "name": "floor",
                    "description": "Global scene of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "Current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The final wallMeshes (The subslopes are in the wall mesh).",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "SubSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 31,
            "description": "Test if the cursor is on on of the element and return it.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector representing the coord of the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The target or null if nothing is under the cursor.",
                "type": "Object"
            },
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 71,
            "description": "Initialize the component for the menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 77,
            "description": "Fired when the component initialize, add in the menu the velux and the dormer.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "access": "private",
            "tagname": "",
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 148,
            "description": "When the cursor hovered the subslope, we draw the target.",
            "itemtype": "method",
            "name": "onHoverSubSlopeOverture",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 162,
            "description": "When we finish to drag the subslope.",
            "itemtype": "method",
            "name": "onDragEndSubSlope",
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 189,
            "description": "When the cursor leave the target.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 203,
            "description": "Handle the dynamic draw when a subslope move.",
            "itemtype": "method",
            "name": "onDragDynamicDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 316,
            "description": "Compute the distance on the canvas between the different subslope overture.",
            "itemtype": "method",
            "name": "calculateDistance",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The 1st overture structure.",
                    "type": "wnp.subSlopesOvertureStructure"
                },
                {
                    "name": "subslopeOV2",
                    "description": "The 2nd overture structure.",
                    "type": "wnp.subSlopesOvertureStructure"
                },
                {
                    "name": "Vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "number",
                    "description": "Check the size we have to change.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance between the subslope overture.",
                "type": "Number"
            },
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 343,
            "description": "Return the point resulting from the intersection of a subslopeOverture and a subslope.",
            "itemtype": "method",
            "name": "getIntersectPoint",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopetructure"
                },
                {
                    "name": "Vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "number",
                    "description": "Check the size we have to change.",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "intersection.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 399,
            "description": "When the user select the dynamic draw.",
            "itemtype": "method",
            "name": "onSelectionDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 421,
            "description": "When the user change the type of overture, we change the event.",
            "itemtype": "method",
            "name": "changeAddStateVelux",
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 434,
            "description": "When the user change the type of overture, we change the event.",
            "itemtype": "method",
            "name": "changeAddStateSubSlopeOverture",
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 447,
            "description": "When the user add a velux.",
            "itemtype": "method",
            "name": "onAddVelux",
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 458,
            "description": "When the user add an overture.",
            "itemtype": "method",
            "name": "onAddSubSlopeOverture",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 476,
            "description": "When the user click and put the overture on the subslope.",
            "itemtype": "method",
            "name": "onAddSubSlopeOvertureClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 487,
            "description": "Fired when the subslope overture is deselect.",
            "itemtype": "event",
            "name": "wnp.menu.main.deselect",
            "access": "private",
            "tagname": "",
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 507,
            "description": "When the mouse move.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 540,
            "description": "Handle all the item of the context menu.",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 658,
            "description": "When a value is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 696,
            "description": "When the user remove the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 708,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 733,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 752,
            "description": "When the user start dragging the subslope overture.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 772,
            "description": "When the user move a subslopeOverture.",
            "itemtype": "method",
            "name": "onDraggingMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The target.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the cursor.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "The subslopeOverture selected.",
                    "type": "wnp.SubslopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "The context of the canvas.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 914,
            "description": "Duplicate the overture on the double click.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "l etat de la souris.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 940,
            "description": "Initiliaze the component for the menu.",
            "itemtype": "method",
            "name": "isInSubSlope",
            "params": [
                {
                    "name": "ssCoord",
                    "description": "Coordonnate of the subslope.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "ssOvCoord",
                    "description": "Coordonnate of the subslope overture.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "width",
                    "description": "The width of the subslope overture.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the subslope overture.",
                    "type": "Number"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 978,
            "description": "Put two overture at the same height if they are closed.",
            "itemtype": "method",
            "name": "appliedMagnetism",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the subslope overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "normalVector",
                    "description": "The normal vector of the wall of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "colVector",
                    "description": "A vector colinear to the wall vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1013,
            "description": "Applied the magnetism on the good side.",
            "itemtype": "method",
            "name": "appliedSideMagnetism",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the subslope overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "normalVector",
                    "description": "The normal vector of the wall of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "colVector",
                    "description": "A vector colinear to the wall vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "moveVector",
                    "description": "The movment vector done with the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1073,
            "description": "Reorganize the subslopes overture of one subslope.",
            "itemtype": "method",
            "name": "reorganizeSubslopes",
            "params": [
                {
                    "name": "ssArray",
                    "description": "Array of all the overture of a subslope.",
                    "type": "wnp.subSlopeOvertureStructure[]"
                },
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "vector",
                    "description": "The vector of the wall.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1120,
            "description": "When stop dragging the subslope overture.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1141,
            "description": "Check the size of the overture : Must be positive.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "data",
                    "description": "The size of the subslope overture.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1156,
            "description": "Check if a point is inside a side of an overture.",
            "itemtype": "method",
            "name": "isPointInOvertureSide",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector of the overture.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "overture",
                    "description": "The subslope overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1177,
            "description": "Draw the target : the subslope overture on the canvas.",
            "itemtype": "method",
            "name": "drawTarget",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "subslopeOverture",
                    "description": "The subslope overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1197,
            "description": "Draw an overture on the subslope.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "overture",
                    "description": "The overturewhich have to be draw.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "The overture is selected or not.",
                    "type": "Boolean"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1296,
            "description": "Draw a line between 2 positions of overture with the magnetism.",
            "itemtype": "method",
            "name": "drawMagnetism",
            "params": [
                {
                    "name": "ssOv1",
                    "description": "The 1st subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ssOv2",
                    "description": "The second subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1340,
            "description": "Draw the distance between 2 overture.",
            "itemtype": "method",
            "name": "drawCotes",
            "params": [
                {
                    "name": "ssOv1",
                    "description": "The 1st subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ssOv2",
                    "description": "The second subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to draw.",
                    "type": "Number"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1426,
            "description": "Draw the distance between a subslope overture and the closest side of a subslope.",
            "itemtype": "method",
            "name": "drawCotesSS",
            "params": [
                {
                    "name": "ssOv",
                    "description": "The subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The index point of the subslope.",
                    "type": "Number"
                },
                {
                    "name": "vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "subSlopeOvertureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 50,
            "description": "Serialization of the structure.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The string resulting of the serialization.",
                "type": "String"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 69,
            "description": "Deserialization of the structure.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The serialized object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The structure of the serialized element.",
                "type": "wnp.subSlopeStructure"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 82,
            "description": "Return the parent of the subslopeOverture.",
            "itemtype": "method",
            "name": "getParent",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 92,
            "description": "Set the parent of the subslope overture.",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopeStructure"
                }
            ],
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 119,
            "description": "Test if the vector is in the polygon.",
            "itemtype": "method",
            "name": "isTargeted",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 130,
            "description": "Test if the vector is in the polygon.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "The",
                    "description": "structure to remove.",
                    "type": "wnp.subSlopeOvertureStructure"
                }
            ],
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 141,
            "description": "Return the position on the canvas.",
            "itemtype": "method",
            "name": "getAbsolutePosition",
            "return": {
                "description": "The position and the vector.",
                "type": "Object"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 159,
            "description": "Set the material.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "wnp.Material"
                }
            ],
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 168,
            "description": "Get a material.",
            "itemtype": "method",
            "name": "getMaterial",
            "return": {
                "description": "The material.",
                "type": "wnp.Material"
            },
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 181,
            "description": "????",
            "itemtype": "method",
            "name": "to3D",
            "access": "private",
            "tagname": "",
            "class": "SubSlopeOvertureStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 19,
            "description": "The 2D base points of the subslope. \nThere is always 2 basepoints on a subslope, and they lay on the side of a wall.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 27,
            "description": "Side on the wall (a wall can have several subslopes in both directions).\nWarning : This property is an array, but only the first element matters.\nthis.side[0] is a vector normal to the wall, indicating in which direction the subslope lays.",
            "itemtype": "property",
            "name": "side",
            "type": "{BABYLON.Vector2[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 37,
            "description": "The wall structure associated to the subslope.",
            "itemtype": "property",
            "name": "wall",
            "type": "{PolygonWall}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 44,
            "description": "The  walls adjacent to the subslope.",
            "itemtype": "property",
            "name": "neighbors",
            "type": "{PolygonWall[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 51,
            "description": "The overtures on the subslope.",
            "itemtype": "property",
            "name": "overtures",
            "type": "{SubSlopesOvertureStructure[]}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 58,
            "description": "The distance between the 2 side of the subslope : offset < wall.thickness <==> subslope does not need to be drawn.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Number}",
            "default": "0",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 66,
            "description": "The materials of the subslopes.",
            "itemtype": "property",
            "name": "materials",
            "type": "{wnp.StandardMaterial}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 73,
            "description": "The minimum height of the subslope.",
            "itemtype": "property",
            "name": "lowHeight",
            "type": "{Number}",
            "default": "80",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 81,
            "description": "The maximum height of the subslope.",
            "itemtype": "property",
            "name": "hiHeight",
            "type": "Number",
            "default": "250",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 89,
            "description": "The 2D polygon vertices of the subslope.\nThe lenght of this array is always 4 at all times.",
            "itemtype": "property",
            "name": "polygonPoints",
            "type": "BABYLON.Vector2[]",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 97,
            "description": "Update flag for the structure.\nSet to true if your subslope needs to be recomputed.",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 141,
            "description": "Checks the coherency of the structure, for instance : \n     - this.lowHeight < this.hiHeight\n     - this.lowHeight > 0\n     - this.hiHeight < 4000\n\nWARNING : This method automatically corrects incoherency.\nSo it may modify the parameters of the subslope.",
            "itemtype": "method",
            "name": "checkCoherence",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 173,
            "description": "Searches the closest point of the carrying wall and return the index in the array.",
            "itemtype": "method",
            "name": "indexClosest",
            "params": [
                {
                    "name": "points",
                    "description": "The points of the wall carrying the subslope.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "The index of the closest point.",
                "type": "Number"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 184,
            "description": "Searches if the points are on the same side.",
            "itemtype": "method",
            "name": "isSameSide",
            "params": [
                {
                    "name": "points",
                    "description": "The points of the wall of the subslope.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "true if the points are on the same side.",
                "type": "Boolean"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 197,
            "description": "Returns a vector going from the base point 0 to the base point 1 of the subslope.",
            "itemtype": "method",
            "name": "getVector",
            "return": {
                "description": "The final vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 207,
            "description": "Returns the distance between 2 subslopes.",
            "itemtype": "method",
            "name": "distanceFrom",
            "params": [
                {
                    "name": "ss",
                    "description": "The subslope.",
                    "type": "SubSlopeStructure"
                }
            ],
            "return": {
                "description": "The distance.",
                "type": "Number"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 243,
            "description": "Computes the polygon points.",
            "itemtype": "method",
            "name": "computePolygonPoints",
            "params": [
                {
                    "name": "force",
                    "description": "Force to update the polygon points.",
                    "type": "Boolean"
                }
            ],
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 339,
            "description": "Tests if a point is inside the subslope 2D polygon.",
            "itemtype": "method",
            "name": "isPointIn",
            "params": [
                {
                    "name": "pt",
                    "description": "The point we want to test.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "true if the point is inside the subslope polygon.",
                "type": "Boolean"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 353,
            "description": "Returns the 4 points defining the plane of the subslope in 3D.",
            "itemtype": "method",
            "name": "plane",
            "return": {
                "description": "The 4 points of the plane.",
                "type": "BABYLON.Vector3[]"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 383,
            "description": "Resets the subslope.",
            "itemtype": "method",
            "name": "remove",
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 396,
            "description": "Gets the nearest subslope.",
            "itemtype": "method",
            "name": "getNearestSubSlope",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "The floor structure of the subslope.",
                    "type": "SubSlopeStructure"
                }
            ],
            "return": {
                "description": "The nearest subslope.",
                "type": "SubSlopeStructure"
            },
            "class": "SubSlopeStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 18,
            "description": "The 2D polygon shape of the wall.",
            "itemtype": "property",
            "name": "polygonPoints",
            "type": "{BABYLON.Vector2[]}",
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 73,
            "description": "Returns the 2 segments connecting the edge polygons of the wall.\nThese axis are parallel to the wall vector.",
            "itemtype": "method",
            "name": "getAxis",
            "return": {
                "description": "2x2 Array containing the 2 connecting segments.",
                "type": "BABYLON.Vector2[][]"
            },
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 19,
            "description": "Constant for normal wall.",
            "itemtype": "property",
            "name": "TYPE_NORMAL",
            "type": "Number",
            "default": "1",
            "static": 1,
            "final": 1,
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 29,
            "description": "Constant for separator walls.",
            "itemtype": "property",
            "name": "TYPE_SEPARATOR",
            "type": "Number",
            "default": "2",
            "static": 1,
            "final": 1,
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 40,
            "description": "Constant for the color of the wall.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_COLORS",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 50,
            "description": "Drawing patterns for drawing style of the walls.\nThis is an array of drawing patterns (see canvas patterns).\nYou can then change the style of the wall in the function `drawWall` using\n`options.styleId` where styleId is the index of the style in this Array.\n\n> NB : use function `createPattern` of a 2D context. For the `Image` parameter,\nuse the image in `PATTERN_IMGS` at the same index.",
            "itemtype": "property",
            "name": "_PATTERNS",
            "default": "\"repeat\"",
            "type": "{ctxPattern[]}",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 65,
            "description": "Images for drawing style of the walls.\nThis is an array of Image.\nYou can then change the style of the wall in the function `drawWall` using\n`options.styleId` where styleId is the index of the style in this Array.",
            "itemtype": "property",
            "name": "_PATTERN_IMGS",
            "type": "{Image[]}",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 89,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "10",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 116,
            "description": "Flag that enables/disables the displaying of measures.",
            "itemtype": "property",
            "name": "displayMesure",
            "type": "{Boolean}",
            "default": "true",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 257,
            "description": "Deletes small walls.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "simplifyWalls",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 284,
            "description": "Draws a wall.",
            "itemtype": "method",
            "name": "drawWall",
            "params": [
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "wall",
                    "description": "Involved wall.",
                    "type": "WallStructure"
                },
                {
                    "name": "options",
                    "description": "Drawing options, such as :\n- `options.measureDisplayed` shows or hides the measure\n- `options.styleId` changes the drawing style.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 313,
            "description": "Draws all measures.",
            "itemtype": "method",
            "name": "_drawMeasures",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Canvas 2D context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 329,
            "description": "Adds a the first point in the wall.",
            "itemtype": "method",
            "name": "_addWallFirstPoint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "State of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "point",
                    "description": "point 0 of the wall.",
                    "type": "PointStructure",
                    "optional": true
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 365,
            "description": "Add the second point and insert the wall in the structure.",
            "itemtype": "method",
            "name": "_addWallUpdate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "State of the mouse.",
                    "type": "Object"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 400,
            "description": "Updates the wall temporary.",
            "itemtype": "method",
            "name": "_addWallUpdate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 40,
            "description": "evenement renvoyé par le floorComponent3d une fois que l'object3d correspondant à l'étage est ajouté à la scene",
            "itemtype": "event",
            "name": ":",
            "type": "Scene : la scene demandée, structure: la structure en cours",
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 64,
            "description": "Retourne l'équivalent 3D (mesh) d'un mur 2D",
            "itemtype": "method",
            "name": "get3DWallFrom2D",
            "params": [
                {
                    "name": "2Dwall",
                    "description": "Le mur 2D",
                    "type": "WallStructure"
                }
            ],
            "return": {
                "description": "Le mur 3D",
                "type": "THREE.Mesh"
            },
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 77,
            "description": "Remplace un mur par un autre mur (meshes), en gardant la synchro 2D 3D",
            "itemtype": "method",
            "name": "replaceWall",
            "params": [
                {
                    "name": "oldWall",
                    "description": "Ancien mur",
                    "type": "THREE.Mesh"
                },
                {
                    "name": "newWall",
                    "description": "Nouveau mur",
                    "type": "THREE.Mesh"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 125,
            "description": "Decoration des murs, fonction spécifique pour la décoration des murs (inclu les murs, les ouvertures et les sous-pentes)",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "Materiel",
                    "description": "utilisé pour décorer le mur",
                    "type": "Material"
                },
                {
                    "name": "Information",
                    "description": "necessaires sur la collision du rayon avec le mur",
                    "type": "CollisionInfo"
                }
            ],
            "return": {
                "description": "Ancien matériel, utilisé pour l'historique",
                "type": "OldMaterial"
            },
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 169,
            "description": "Methode principal de WallComponent3D: Crée les maillages et les sous-maillages en appliquant les bonnes textures au mur.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "Structure",
                    "description": "de l'étage",
                    "type": "Structure"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 227,
            "description": "Fonction qui crée les faces des murs",
            "itemtype": "method",
            "name": "buildFace4",
            "params": [
                {
                    "name": "Point",
                    "description": "0 provenant de la 2D",
                    "type": "Pt0"
                },
                {
                    "name": "Point",
                    "description": "1 provenant de la 2D",
                    "type": "Pt1"
                },
                {
                    "name": "elevation",
                    "description": "du mur",
                    "type": "ElevationOffset"
                },
                {
                    "name": "Index",
                    "description": "du material dans le multimaterial du maillage principal",
                    "type": "MaterialIndex"
                },
                {
                    "name": "COté",
                    "description": "du mur",
                    "type": "WallSide"
                },
                {
                    "name": "Hauteur",
                    "description": "de départ de l'étage",
                    "type": "ElevationStart"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 467,
            "description": "Compatibilité anciennes versions des murs",
            "itemtype": "method",
            "name": "migrateMaterials",
            "params": [
                {
                    "name": "Liste",
                    "description": "des murs",
                    "type": "Walls"
                },
                {
                    "name": "Murs",
                    "description": "",
                    "type": "InternalPanes"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 531,
            "description": "Method permettant de switcher la transparence des murs d'un étage. \nUtilisé lors des changements de mode.",
            "itemtype": "method",
            "name": "switchTransparentStatusByStructure",
            "params": [
                {
                    "name": "Structure",
                    "description": "de l'étage",
                    "type": "Structure"
                },
                {
                    "name": "Point",
                    "description": "1 provenant de la 2D",
                    "type": "Transparent"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 571,
            "description": "Créé les tableaux d'instance et de bounding box à partir des subMesh\nUne partie de mur qui n'a pas d'objet instance (sauf exception) est éliminée des mesh",
            "itemtype": "method",
            "name": "createInstances",
            "params": [
                {
                    "name": "Maillage",
                    "description": "du mur",
                    "type": "WallMesh"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 21,
            "description": "Material information on this wall pane.",
            "itemtype": "property",
            "name": "materialInfo",
            "type": "{MaterialInfo}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 29,
            "description": "Reference of the parent room containing this pane.",
            "itemtype": "property",
            "name": "room",
            "type": "{RoomStructure}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 37,
            "description": "Material index in the wall mesh.",
            "itemtype": "property",
            "name": "materialIndex",
            "type": "{Number}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 45,
            "description": "A reference to the wall mesh carrying the pane",
            "itemtype": "property",
            "name": "wallMesh",
            "type": "{BABYLON.Mesh}",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 56,
            "description": "Sets the parent room reference.",
            "itemtype": "method",
            "name": "setRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The new parent room.",
                    "type": "RoomStructure"
                }
            ],
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 66,
            "description": "Applies the material of the pane onto the wall mesh",
            "itemtype": "method",
            "name": "apply",
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 74,
            "description": "Compares this wallPane's materialInfo to a list a materialInfos.\nReturns the materialInfo geometrically closest to this wallPane's materialInfo.",
            "itemtype": "method",
            "name": "nearestMaterial",
            "params": [
                {
                    "name": "materialInfos",
                    "description": "The materialInfo list to compare with.",
                    "type": "MaterialInfo[]"
                }
            ],
            "return": {
                "description": "The index of the closest materialInfo.",
                "type": "Number"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 99,
            "description": "Adds or changes a material for the wall pane.",
            "itemtype": "method",
            "name": "addMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "BABYLON.Material"
                }
            ],
            "return": {
                "description": "The old material, null if the WallPane did not have a material.",
                "type": "BABYLON.Material"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 116,
            "description": "Adds or changes a material for the wall pane. This is an alias for `addMaterial`.",
            "itemtype": "method",
            "name": "setMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material.",
                    "type": "BABYLON.Material"
                }
            ],
            "return": {
                "description": "The old material, null if the WallPane did not have a material.",
                "type": "BABYLON.Material"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 125,
            "description": "Get a material for the wall pane.",
            "itemtype": "method",
            "name": "getMaterial",
            "return": {
                "description": "The material, null if the WallPane did not have a material.",
                "type": "BABYLON.Material"
            },
            "class": "WallPane3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 21,
            "description": "Two 2D vectors building the ends of the wall.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[2]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 29,
            "description": "The two polygons surrounding the ends.",
            "itemtype": "property",
            "name": "_edgePolygons",
            "type": "{BABYLON.Vector2[][2]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 37,
            "description": "Attached points. See Wanaplan Wiki for more info about the connections between walls.",
            "itemtype": "property",
            "name": "attachedPoints",
            "type": "{PointStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 45,
            "description": "Overtures (doors, windows, bay windows ...).",
            "itemtype": "property",
            "name": "overtures",
            "type": "{OvertureStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 53,
            "description": "Wall height.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "default": "250",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 62,
            "description": "Wall thickness.",
            "itemtype": "property",
            "name": "thickness",
            "type": "{Number}",
            "default": "30",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 71,
            "description": "2D minimum distance to display the measure.",
            "itemtype": "property",
            "name": "measureDist",
            "type": "{Number}",
            "default": "15",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 80,
            "description": "Flag to enable/disable measure display.",
            "itemtype": "property",
            "name": "measureDisplayed",
            "type": "{Boolean}",
            "default": "true",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 89,
            "description": "Subslope list for this wall.",
            "itemtype": "property",
            "name": "subSlopes",
            "type": "{SubSlopeStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 97,
            "description": "Flag that signals if the geometry of the wall must be re-computed.",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 105,
            "description": "Class type of the wall.\ne.g. : 'polygon' for polygonal walls, which are most used in wanaplan.",
            "itemtype": "property",
            "name": "instance",
            "type": "{String}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 115,
            "description": "Type of a wall : Normal.",
            "itemtype": "property",
            "name": "TYPE_NORMAL",
            "type": "{Number}",
            "default": "1",
            "static": 1,
            "final": 1,
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 126,
            "description": "Type of a wall : Separator.",
            "itemtype": "property",
            "name": "TYPE_SEPARATOR",
            "type": "{Number}",
            "default": "2",
            "static": 1,
            "final": 1,
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 137,
            "description": "Type of the wall.\nCan be TYPE_NORMAL or TYPE_SEPARATOR.\nTODO : Must be deleted in future version, \nthis has to be replaced by a class \"SeparatorWall\" that has its own behaviour.",
            "itemtype": "property",
            "name": "type",
            "type": "{Number}",
            "default": "TYPE_NORMAL",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 210,
            "description": "Checks if the object structure contains errors, if so remove it.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "structure",
                    "description": "The floorStructure where the object belong.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 233,
            "description": "Gets the floor referencing this object.",
            "itemtype": "method",
            "name": "getFloor",
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection.",
                "type": "FloorStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 243,
            "description": "Computes a flat polygon ending, typically for unconnected walls.\nSee Wanaplan API wiki for more info on connection.",
            "itemtype": "method",
            "name": "computeDefault",
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The index of the ending point, 0 or 1.",
                    "type": "Number"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 261,
            "description": "Computes a polygon ending for one-way connected walls.\nSee Wanaplan API wiki for more info on connection.",
            "itemtype": "method",
            "name": "computeWeak",
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The index of the ending point, 0 or 1.",
                    "type": "Number"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 276,
            "description": "Computes a polygon ending for two-way connected walls.\nSee Wanaplan API wiki for more info on connection.",
            "itemtype": "method",
            "name": "computeStrong",
            "params": [
                {
                    "name": "pointIndex",
                    "description": "The index of the ending point, 0 or 1.",
                    "type": "Number"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 334,
            "description": "Updates the wall after the deserialization.",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "The floorStructure where the object belong.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 386,
            "description": "Gets the points of the wall.",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the point.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "If an index is provided, return the index of the point.\n                          Else return an array containing the 2 points.",
                "type": "BABYLON.Vector2|BABYLON.Vector2[2]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 403,
            "description": "Checks if the wall is targeted by the cursor.",
            "itemtype": "method",
            "name": "isTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The cursor position.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Is targeted or not.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 432,
            "description": "Changes the points composing the wall.",
            "itemtype": "method",
            "name": "setPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Array composed of instances of `PointStructure`.\nOR a `PointStructure` if the parameter `index` is provided.",
                    "type": "PointStructure[]"
                },
                {
                    "name": "index",
                    "description": "Index of the point (0 or 1).",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 474,
            "description": "Returns the polygon points.",
            "itemtype": "method",
            "name": "getPolygon",
            "return": {
                "description": "The polygon as an array of vertices.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 492,
            "description": "Computes the vector representing the wall.\nStarts from its point 0 position, and ends on its point 1 position.",
            "itemtype": "method",
            "name": "getWallVector",
            "return": {
                "description": "Vector representing the wall.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 503,
            "description": "Computes the wall length.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "The length of the wall.",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 517,
            "description": "Draws the wall on a canvas.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 546,
            "description": "Translates the wall.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "vector",
                    "description": "Translation vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "Floor structure containing the wall.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 558,
            "description": "Returns a list of intersections with the other walls in the same floor.\nThe extremities of the walls are not considered as intersections.\nThe array is returned after sorting the elements by distance from the point 0 of the wall.",
            "itemtype": "method",
            "name": "getIntersections",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The intersections as an array of PointStructure.",
                "type": "PointStructure[]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 611,
            "description": "Splits the wall in lot of intersections with the other wall of the floor.",
            "itemtype": "method",
            "name": "splitAtIntersections",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 622,
            "description": "Distributes the attached walls and the overtures when the wall is splited in several pieces.",
            "itemtype": "method",
            "name": "reorganizeOnSplit",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                },
                {
                    "name": "wallList",
                    "description": "The resulting pieces of the split.",
                    "type": "WallStructure[]"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 677,
            "description": "Upgrades the connection from weak (attached) to strong (connected).",
            "itemtype": "method",
            "name": "weakToStrong",
            "params": [
                {
                    "name": "point",
                    "description": "The point attached that becomes strong.",
                    "type": "PointStructure"
                },
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "wnp.FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 725,
            "description": "Tries to merge the wall with the other walls in the same floor.",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The resulting wall. Returns this if the method does not do anything.",
                "type": "WallStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 737,
            "description": "Updates the position of the attached points.",
            "itemtype": "method",
            "name": "updateAttachedPoints",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 748,
            "description": "Updates the position of the overtures on the wall.",
            "itemtype": "method",
            "name": "updateOvertures",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 763,
            "description": "Returns the projection of the given vector on the wall segment.",
            "itemtype": "method",
            "name": "getNearestPoint",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "margin",
                    "description": "The margin we take outside the endings of the wall.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 790,
            "description": "Returns the projection of the given vector on the wall axe.",
            "itemtype": "method",
            "name": "getNearestPointOnAxe",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 808,
            "description": "Returns the projection of the given vector on the wall bounding rectangle.",
            "itemtype": "method",
            "name": "getNearestPointOnRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "margin",
                    "description": "The margin we take outside the endings of the wall.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 823,
            "description": "Returns true if the point is inside the polygon of the wall.",
            "itemtype": "method",
            "name": "isPointInPolygon",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "True if the point is inside the polygon.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 842,
            "description": "Returns the projection of the given vector on the wall polygon.",
            "itemtype": "method",
            "name": "getNearestPointOnPolygon",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Projected point.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 875,
            "description": "Computes the bounding box.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "1st element: min, 2nd element : max",
                "type": "BABYLON.Vector2[]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 904,
            "description": "Returns the nearest wall from the given point.",
            "itemtype": "method",
            "name": "getNearestWall",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "The floor structure to check.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The nearest wall.",
                "type": "WallStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 929,
            "description": "Returns the distance from a wall to a point.",
            "itemtype": "method",
            "name": "distanceFrom",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Distance to the wall.",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 945,
            "description": "Returns the distance from the given vector to the wall bounding rectangle.",
            "itemtype": "method",
            "name": "distanceFromRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "margin",
                    "description": "The margin we take outside the endings of the wall.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The distance.",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 963,
            "description": "Returns the vector from the projected point on the wall, to the given point.\nDirection : wall -> point.",
            "itemtype": "method",
            "name": "vectorTo",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 980,
            "description": "Checks if a point is on a wall, within a `delta` incertitude.",
            "itemtype": "method",
            "name": "isPointOn",
            "params": [
                {
                    "name": "vector",
                    "description": "Involved point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "delta",
                    "description": "Incertitude.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1e-5"
                }
            ],
            "return": {
                "description": "True if the point is on the wall.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 994,
            "description": "Returns an orthogonal vector.",
            "itemtype": "method",
            "name": "getNormalVector",
            "params": [
                {
                    "name": "norm",
                    "description": "The desired norm.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "Orthogonal vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1011,
            "description": "Sort the list of the attached points (point 0 to point 1).",
            "itemtype": "method",
            "name": "sortAttached",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1023,
            "description": "Returns all the points of the wall (extremities and attached) in a specific order.",
            "itemtype": "method",
            "name": "getAllPoints",
            "params": [
                {
                    "name": "inOrder",
                    "description": "Order (-1 = descending, 1 = ascending).",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Array of all the points.",
                "type": "PointStructure[]"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1041,
            "description": "Deletes a wall.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1086,
            "description": "Adds a wall and its points to a structure.",
            "itemtype": "method",
            "name": "addToStructure",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor structure containing the wall.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1100,
            "description": "Checks if the wall is parallel to another wall.",
            "itemtype": "method",
            "name": "paralleleTo",
            "params": [
                {
                    "name": "wall",
                    "description": "Other wall.",
                    "type": "WallStructure"
                }
            ],
            "return": {
                "description": "True if the walls are parallel.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "line": 71,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "line": 73,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "line": 56,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "line": 58,
            "class": "GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent2D.js",
            "line": 51,
            "description": "Enables the scrolling on the grid",
            "itemtype": "method",
            "name": "enableScrolling",
            "params": [
                {
                    "name": "enable",
                    "description": "\"Enabled\" flag.",
                    "type": "Boolean"
                }
            ],
            "class": "GridComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 61,
            "description": "Ground creation.",
            "itemtype": "method",
            "name": "createGround",
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 101,
            "description": "Sky creation.",
            "itemtype": "method",
            "name": "createSky",
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 126,
            "description": "Lighting setup.",
            "itemtype": "method",
            "name": "setupLights",
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 181,
            "description": "Changes the aspect of the ground.\nTriggered on `wnp.engine3D.changeGround`",
            "itemtype": "method",
            "name": "onChangeGround",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Object"
                }
            ],
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 194,
            "description": "Changes the aspect of the sky.\nTriggered on `wnp.engine3D.changeSky`",
            "itemtype": "method",
            "name": "onChangeSky",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Object"
                }
            ],
            "class": "GridComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 85,
            "description": "Resets the entire history.",
            "itemtype": "method",
            "name": "reset",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 97,
            "description": "Registers a component so it uses undo and redo capabilities.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "component",
                    "description": "The involved component.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 109,
            "description": "Saves an action which can be undone or redone.",
            "itemtype": "method",
            "name": "registerAction",
            "params": [
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "undoFunction",
                    "description": "The function call to handle the ctrl-z (undo).\nThis function has 2 parameters : \n * `target` the target object, can be anything that is concerned by the action\n *  `params` a set of parameters\nSee `actionDone` method for more info.",
                    "type": "Function"
                },
                {
                    "name": "redoFunction",
                    "description": "The function call to handle the ctrl-y (redo).",
                    "type": "Function"
                },
                {
                    "name": "component",
                    "description": "The involved component. Must be registered first with `register`.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 134,
            "description": "Adds an user action to the history.",
            "itemtype": "method",
            "name": "actionDone",
            "params": [
                {
                    "name": "target",
                    "description": "The target object, can be anything that is concerned by the action.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "A set of parameters.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The involved component.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 176,
            "description": "Undoes the last action.",
            "itemtype": "method",
            "name": "controlZ",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 195,
            "description": "Redoes the last action",
            "itemtype": "method",
            "name": "controlY",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 211,
            "description": "Dispatches on the good action when the ctrl-z or ctrl-y are pushed.\nTriggered by event `wnp.keyboardManager.keyDown`.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "Event catch.",
                    "type": "Event"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 229,
            "description": "Calls the component's addHistory method.\nTriggered on `wnp.request.historyAction`.",
            "itemtype": "method",
            "name": "onHistoryActionRequest",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 23,
            "description": "Initialize the component by adding a new entry in the top menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 35,
            "description": "Called when the component is destroyed. The menu item is removed.",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 34,
            "description": "Exits the plan and redirects the user to the exit url (see api.exitUrl)",
            "itemtype": "method",
            "name": "doExit",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 51,
            "description": "Displays a confirm dialog and exits if the user clicks on exit button.",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 14,
            "description": "Fired when the user clicks on the fullscreen toggle button.",
            "itemtype": "event",
            "name": "wnp.request.toggleFullscreen",
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 62,
            "description": "Toggles the fullscreen mode.\nTriggered on `wnp.request.toggleFullscreen`.",
            "itemtype": "method",
            "name": "toggleFullscreen",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 84,
            "description": "Called when the fullscreen mode change. It fix the fullscreen button.",
            "itemtype": "method",
            "name": "onFullScreenChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 36,
            "description": "Create a new plan.",
            "itemtype": "method",
            "name": "createNewPlan",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 56,
            "description": "Create a new plan by destroying the previous one but by conserving the historic.",
            "itemtype": "method",
            "name": "launchProcess",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 24,
            "description": "Display or hide the lock icon when context change.",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "context",
                    "description": "The context : 2D or 3D.",
                    "type": "String"
                }
            ],
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 38,
            "description": "Initialize objects and add a custom stylesheet.",
            "itemtype": "method",
            "name": "initialize",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 60,
            "description": "Remove the icon from the menu and stop event listeneing.",
            "itemtype": "method",
            "name": "destroy",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 69,
            "description": "Toggle to lock or unlock.",
            "itemtype": "method",
            "name": "toggleLock",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 105,
            "description": "Détermine si le magnétisme doit être cours circuité ou non. (lorsque l'utilisateur appuie sur <Ctrl>).",
            "itemtype": "method",
            "name": "_shortCircuitMagnetism",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Retourne `true` si le magnétisme doit être cours-circuité, `false` dans le cas contraire.",
                "type": "Boolean"
            },
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 122,
            "description": "Applique le magnétisme de la souris en fonction des points présents sur le plan.",
            "itemtype": "method",
            "name": "_magFromPoints",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                },
                {
                    "name": "ignorePoint",
                    "description": "Point à ignorer (optionnel).",
                    "type": "PointStructure"
                }
            ],
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 190,
            "description": "Applique le magnétisme de la souris pour aligner les murs",
            "itemtype": "method",
            "name": "_globalWallMag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                },
                {
                    "name": "wallList",
                    "description": "Liste de murs à considérer pour le magnétisme (optionnel)",
                    "type": "PointStructure"
                }
            ],
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 287,
            "description": "Applique le magnétisme de la souris en fonction des murs présents sur le plan.",
            "itemtype": "method",
            "name": "_magFromWalls",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                },
                {
                    "name": "wallList",
                    "description": "Liste de murs à considérer pour le magnétisme (optionnel)",
                    "type": "PointStructure"
                }
            ],
            "class": "MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 68,
            "description": "Tries to merge all measures.",
            "itemtype": "method",
            "name": "mergeMeasures",
            "params": [
                {
                    "name": "measures",
                    "description": "Measures set to merge.",
                    "type": "MeasureStructure[]"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 92,
            "description": "Draws the measure on the currently drawn wall.",
            "itemtype": "method",
            "name": "drawTmpWallMesure",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 120,
            "description": "Draws all measures on the canvas.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 173,
            "description": "Draws a slice of the measure.",
            "itemtype": "method",
            "name": "_drawMeasureSlice",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The canvas translation.",
                    "type": "BABYLON.vector2"
                },
                {
                    "name": "zoom",
                    "description": "The canvas zoom.",
                    "type": "Number"
                },
                {
                    "name": "v1",
                    "description": "Vecteur Origin point.",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "Vecteur Ending point.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The rounded meter value of the measure.",
                "type": "Number"
            },
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 196,
            "description": "Adds the overtures measures on the existing wall measures.",
            "itemtype": "method",
            "name": "_addOvertureIntersections",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wall",
                    "description": "Wall carrying overtures.",
                    "type": "WallStructure"
                },
                {
                    "name": "intersections",
                    "description": "Current wall measure `points` list.",
                    "type": "BABYLON.vector2[]"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 18,
            "description": "Contains all the points where to split the measure, ordered by distance to points[0] asc.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 26,
            "description": "Parent wall inducing the measure.",
            "itemtype": "property",
            "name": "parent",
            "type": "{WallStructure}",
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 34,
            "description": "Amount of offset to display the measure on the 2D canvas.",
            "itemtype": "property",
            "name": "offsetVector",
            "type": "{BABYLON.Vector2}",
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 43,
            "description": "Returns the center of the measure.",
            "itemtype": "method",
            "name": "center",
            "return": {
                "description": "The center.",
                "type": "BABYLON.Vector2"
            },
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 53,
            "description": "Returns a vector normal to the measure.\nNB : The direction of this vector is away from the wall carrying the measure.",
            "itemtype": "method",
            "name": "normal",
            "return": {
                "description": "The normal vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 64,
            "description": "Tries to merge this measure with another measure.\nOnly merges if the measures are aligned and are touching each other.",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "measure",
                    "description": "Another measure.",
                    "type": "MeasureStructure"
                }
            ],
            "return": {
                "description": "True if the measure has been merged.",
                "type": "Boolean"
            },
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureStructure.js",
            "line": 125,
            "description": "Tries to merge this measure with a set of measures.",
            "itemtype": "method",
            "name": "mergeMeasures",
            "params": [
                {
                    "name": "measures",
                    "description": "An array of measures.",
                    "type": "MeasureStructure[]"
                }
            ],
            "class": "MeasureStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MenuComponents\\TopMenuComponent.js",
            "line": 2,
            "description": "translation hack\n_(\"Capture\") _(\"New\") _(\"Save\") _(\"Options\") _(\"Change language\") _(\"Full Screen\")",
            "class": "MobileComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 63,
            "description": "Disable/Remove some unecessary components ans applying some mobile configuration.",
            "itemtype": "method",
            "name": "initialize",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 95,
            "description": "Apply configuration for mobile (graphics, performances). This method is called when all components are initialized.",
            "itemtype": "method",
            "name": "onCoreInitialized",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 170,
            "description": "Toggle the visibility of the left menu.",
            "itemtype": "method",
            "name": "_toggleMenu",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 28,
            "description": "Destroy the component and remove all listeners.",
            "itemtype": "method",
            "name": "destroy",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 36,
            "description": "Bind input event listeners",
            "itemtype": "method",
            "name": "_bindListeners",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 50,
            "description": "Unbind event listeners.",
            "itemtype": "method",
            "name": "_unbindListeners.",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 64,
            "description": "Method called when an input method is detected. The method disable the input method which is not necessary.",
            "itemtype": "method",
            "name": "_onInputChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 93,
            "description": "Remove an input method support (touch or mouse).",
            "itemtype": "method",
            "name": "removeInputSupport",
            "params": [
                {
                    "name": "type",
                    "description": "The type of input method to remove (touch or mouse).",
                    "type": "String"
                }
            ],
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "LargeHolyColliderDebuger",
                "OctreePartitionerFactory"
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "ObjectHelper"
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "line": 544,
            "description": "// empiric proof\nvar dimension = new Point( Math.random() , Math.random() , Math.random() )\ndimension.normalize()\nvar s = computePropPath( 1000 , dimension )\nvar prob = new Point(\n    ( s.split('x').length-1 )/1000,\n    ( s.split('y').length-1 )/1000,\n    ( s.split('z').length-1 )/1000\n)\nprob.normalize()\nconsole.log( dimension )\nconsole.log( prob )",
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 21,
            "description": "Tests the browser capabilities and redirects the user to the correct page.",
            "itemtype": "method",
            "name": "checkBrowserCapability",
            "return": {
                "description": "True if the browser supports Wanaplan, false and redirects if it does not.",
                "type": "Boolean"
            },
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 59,
            "description": "Gets the url of a pedago page.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getPageURL",
            "params": [
                {
                    "name": "page",
                    "description": "The page.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return the complete url of the page.",
                "type": "String"
            },
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 70,
            "description": "Redirects the browser to a page.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "redirectToPage",
            "params": [
                {
                    "name": "page",
                    "description": "The page.",
                    "type": "String"
                }
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 100,
            "description": "Changes the hardware scaling by reducing the backbuffer size (canvas internal size).",
            "itemtype": "method",
            "name": "setHardwareScalingLevel",
            "params": [
                {
                    "name": "level",
                    "description": "The level of scaling to apply, default is 1, use power of two.",
                    "type": "Number"
                }
            ],
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 121,
            "description": "Resize callback which sets the correct values on render canvas.\nTriggered on `resize`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onResize",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 26,
            "description": "Component name",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 34,
            "description": "Structure file instance (shortcut to wanaplan.structure)\nThis is the base object where the whole plan is saved",
            "itemtype": "property",
            "name": "structure",
            "type": "wnp.Structure",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 51,
            "description": "Priority of the component in the \"update\" and \"draw\" routines",
            "itemtype": "property",
            "name": "priority",
            "type": "Number",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 73,
            "description": "Method called when Wanaplan is initialized.\nYou don't need to call this method manually.",
            "itemtype": "method",
            "name": "initialize",
            "abstract": "",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 83,
            "description": "Calls all the event listeners.",
            "itemtype": "method",
            "name": "startListening",
            "abstract": "",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 90,
            "description": "Removes all the event listeners.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 96,
            "description": "Method called when the context is switched (2D -> 3D or 3D -> 2D)",
            "itemtype": "method",
            "name": "onContextChanged",
            "abstract": "",
            "params": [
                {
                    "name": "context",
                    "description": "The new context",
                    "type": "String"
                }
            ],
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 112,
            "description": "Disables the component",
            "itemtype": "method",
            "name": "disable",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 123,
            "description": "Enables the component",
            "itemtype": "method",
            "name": "enable",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 133,
            "description": "This methods tells if the given position is over an element handled by the component",
            "itemtype": "method",
            "name": "getTargeted",
            "abstract": "",
            "params": [
                {
                    "name": "vector",
                    "description": "A position, usually the cursor's one.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The targeted element, or null if nothing is found.",
                "type": "Object"
            },
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 147,
            "description": "Generic update method, called on every frame",
            "abstract": "",
            "itemtype": "method",
            "name": "update",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 168,
            "description": "Method called when the component is destroyed",
            "abstract": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 33,
            "description": "Name of the component.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 41,
            "description": "Instance of the structure (shortcut to wanaplan.structure).",
            "itemtype": "property",
            "name": "structure",
            "type": "wnp.Structure",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 49,
            "description": "Instance of the Keyboard Manager (shortcut to wanaplan.keyboardManager).",
            "itemtype": "property",
            "name": "keyboardManager",
            "type": "wnp.KeyboardManager",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 129,
            "description": "Method called when Wanaplan is initialized.\nYou don't need to call this method manually.",
            "itemtype": "method",
            "name": "initialize",
            "abstract": "",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 139,
            "description": "Calls all the event listeners.",
            "itemtype": "method",
            "name": "startListening",
            "abstract": "",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 148,
            "description": "Removes all the event listeners.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 156,
            "description": "Method called when the context is switched (2D -> 3D or 3D -> 2D)",
            "itemtype": "method",
            "name": "onContextChanged",
            "abstract": "",
            "params": [
                {
                    "name": "context",
                    "description": "The new context",
                    "type": "String"
                }
            ],
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 182,
            "description": "Enables the component",
            "itemtype": "method",
            "name": "enable",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 192,
            "description": "Update of the dynamic part of the component.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "The delta time.",
                    "type": "Number"
                }
            ],
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 203,
            "description": "Recompute of the component.",
            "itemtype": "method",
            "name": "compute",
            "access": "private",
            "tagname": "",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 222,
            "description": "Gets the current 3D floor or the structure in parameter.",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "The floor in 3D.",
                "type": "BABYLON.Mesh"
            },
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 248,
            "description": "Destructor.",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 18,
            "description": "Unique ID for the structure\nSet up automatically",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 27,
            "description": "Structure name",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 36,
            "description": "Add an element to the collection in parameter.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "propertyName",
                    "description": "Name of the dictionnary.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value to distribute.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Returns true if the value is added else returns false."
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 64,
            "description": "Method called after the loading of the component",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 73,
            "description": "Generic update method, must be overrided.",
            "itemtype": "method",
            "name": "update",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 82,
            "description": "Serializes the object (to JSON)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 91,
            "description": "Deserializes the object (from JSON). This method is the static version of `deserialize`,\nit creates an objects.",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 103,
            "description": "Deserializes the object (from JSON).",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 114,
            "description": "Generic method for rebuilding references after the deserialization\nFor example : restoring the link between a PointStructure and its parent WallStructure",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "Floor Structure to work with",
                    "type": "wnp.Structure"
                }
            ],
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 125,
            "description": "Get an element of the collection by his name.",
            "itemtype": "method",
            "name": "getElementByName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the element to search.",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The name of the collection in which we want to search. If this parameter is not defined,\n                the search is done in all the collection of type array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the needed element if it exist else returns null.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 168,
            "description": "Get the floor referencing this object",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "collection",
                    "description": "Collection to search within.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection.",
                "type": "FloorStructure"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\GeneralOptionComponent2D.js",
            "line": 1,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 51,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 53,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 55,
            "description": "Send a event to all listeners.",
            "itemtype": "method",
            "name": "notify",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The event's name.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A object that contains parameters to send to listeners.",
                    "type": "Object"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 66,
            "description": "Sets the context, 2D or 3D",
            "itemtype": "method",
            "name": "setContext",
            "params": [
                {
                    "name": "context",
                    "description": "Must be API.CONTEXT_2D for 2D or API.CONTEXT_3D for 3D"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 76,
            "description": "Gets the context, 2D or 3D",
            "itemtype": "method",
            "name": "getContext",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 85,
            "description": "Gets the mode for a given context",
            "itemtype": "method",
            "name": "getMode",
            "params": [
                {
                    "name": "_context",
                    "description": "The context, 2D or 3D. Default is the current selected context.",
                    "optional": true
                }
            ],
            "todo": [
                ""
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 101,
            "description": "Returns the version of the current opened plan.",
            "itemtype": "method",
            "name": "getVersion",
            "return": {
                "description": "The stringified version : \"X.x.x.x\"",
                "type": "String"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 111,
            "description": "Compares two stringified versions.",
            "itemtype": "method",
            "name": "compareVersion",
            "params": [
                {
                    "name": "versionA",
                    "description": "The first version.",
                    "type": "String"
                },
                {
                    "name": "versionB",
                    "description": "The second version.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns -1 if versionA is older than versionB.\n                 Returns 0 if versionA is the same than versionB.\n                 Returns 1 if versionA is newer than versionB.",
                "type": "Number"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 125,
            "description": "Returns a loaded component",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the component",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "(Optional) The context where the component is (API.CONTEXT_2D or API.CONTEXT_3D).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A wanaplan or custom component, loaded in the 2D or in the 3D engine.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 151,
            "description": "Sets the mode for a given context",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "name",
                    "description": "Must one of the following :\nAPI.MODE_NORMAL, API.MODE_DRAW, API.MODE_DRAG, API.MODE_SUBSLOPES"
                },
                {
                    "name": "_context",
                    "description": "The context, 2D or 3D. Default is the current selected context.",
                    "optional": true
                }
            ],
            "todo": [
                ""
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 170,
            "description": "Resizes the display window.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The new width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new height.",
                    "type": "Number"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 181,
            "description": "Gets the camera Id.",
            "itemtype": "method",
            "name": "getCameraId",
            "cameraid": "cameraId Must be API.ORBITCAMERA or API.FPSCAMERA.\nTODO : déplacer dans l'engine 3D (spécifique 3D)\nFIXME: WAT ??",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 199,
            "description": "Gets the cameraId.",
            "itemtype": "method",
            "name": "getCameraId",
            "return": {
                "description": "api.ORBITCAMERA or api.FPSCAMERA, depend on the actual camera\nTODO : déplacer dans l'engine 3D (spécifique 3D)"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 211,
            "description": "Returns custom data from the storage\nThis data is serialized along with the plan",
            "params": [
                {
                    "name": "field",
                    "description": "The name of your data",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "The raw data",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 223,
            "description": "Sets custom data to the storage\nThis data is serialized along with the plan",
            "params": [
                {
                    "name": "field",
                    "description": "The name of your data",
                    "type": "Object"
                },
                {
                    "name": "content",
                    "description": "An Array or Object where you store your own data structure",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setData",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 235,
            "description": "Returns the current working floor",
            "itemtype": "method",
            "name": "getCurrentFloor",
            "return": {
                "description": "The current displayed floor",
                "type": "FloorStructure"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 245,
            "description": "Returns the floor matching the given id (0 is ground, 1 is first floor etc)",
            "itemtype": "method",
            "name": "getFloorById",
            "params": [
                {
                    "name": "id",
                    "description": "The Floor id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The floor matching the given id",
                "type": "FloorStructure"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 261,
            "description": "Returns all the floors",
            "itemtype": "method",
            "name": "getFloors",
            "return": {
                "description": "The floors",
                "type": "FloorStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 271,
            "description": "Returns the wall points for a given floor",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of points",
                "type": "PointStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 284,
            "description": "Returns the walls for a given floor",
            "itemtype": "method",
            "name": "getWalls",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of walls",
                "type": "WallStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 297,
            "description": "Returns the walls for a given floor",
            "itemtype": "method",
            "name": "getWalls",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of walls",
                "type": "WallStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 310,
            "description": "Returns the rooms for a given floor",
            "itemtype": "method",
            "name": "getRooms",
            "params": [
                {
                    "name": "_external",
                    "description": "Get either internal or external rooms (see Wiki for more info)",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of walls",
                "type": "RoomStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 324,
            "description": "Returns the stariways for a given floor",
            "itemtype": "method",
            "name": "getStairways",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of Stairways",
                "type": "StairwayStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 337,
            "description": "Get all object structures on the scene",
            "itemtype": "method",
            "name": "getObjects",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of all object structures.",
                "type": "ObjectStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 350,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 352,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 354,
            "description": "Save an action which can be undo from a component.",
            "itemtype": "method",
            "name": "registerAction",
            "params": [
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "Float"
                },
                {
                    "name": "undoFunction",
                    "description": "The function call after doing a ctrl-z.",
                    "type": "Function"
                },
                {
                    "name": "redoFunction",
                    "description": "The function call after doing a ctrl-y.",
                    "type": "Function"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 367,
            "description": "Add an history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "Number"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BaseComponent2D|BaseComponent3D"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 380,
            "description": "Recursively serializes an object",
            "itemtype": "method",
            "name": "serializeObject",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The serialized object",
                    "type": "Object"
                },
                {
                    "name": "optionnalTarget",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "whiteList",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "blackList",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A deserialized Object",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 393,
            "description": "Recursively deserializes an object",
            "itemtype": "method",
            "name": "deserializeObject",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The serialized object",
                    "type": "Object"
                },
                {
                    "name": "optionnalTarget",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "whiteList",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "blackList",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A deserialized Object",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 406,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 408,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 410,
            "description": "Returns textured material with or without custom params",
            "itemtype": "method",
            "name": "TexturedMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A textured wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 422,
            "description": "Returns white material with or without custom params",
            "itemtype": "method",
            "name": "WhiteMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (factor (factor of gray)).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A white wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 434,
            "description": "Returns Leather material with or without custom params",
            "itemtype": "method",
            "name": "LeatherMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A leather wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 446,
            "description": "Returns Metal material with or without custom params",
            "itemtype": "method",
            "name": "MetalMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (brillance, baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A metal wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 458,
            "description": "Returns Wood material with or without custom params",
            "itemtype": "method",
            "name": "WoodMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A wood wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 470,
            "description": "Returns Matt material with or without custom params",
            "itemtype": "method",
            "name": "MattMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A matt wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 482,
            "description": "Returns Glass material with or without custom params",
            "itemtype": "method",
            "name": "GlassMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (opacity or alpha (the transparency of the glass), baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A Glass wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 494,
            "description": "Returns Plastic material with or without custom params",
            "itemtype": "method",
            "name": "PlasticMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A Plastic wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 506,
            "description": "Returns Tile material with or without custom params",
            "itemtype": "method",
            "name": "TileMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A Tile wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 518,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 520,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 522,
            "description": "Returns a DOM element containing the UI widgets, that you can manipulate",
            "itemtype": "method",
            "name": "setData",
            "return": {
                "description": "The DOM Element containing widgets",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 532,
            "description": "Add an item in the main menu.",
            "itemtype": "method",
            "name": "addMainMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "An abject that contains informations about the item to add.",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "(Optional) The desired path for this item (default is \".\").",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 542,
            "description": "Add an item in the top menu.",
            "itemtype": "method",
            "name": "addTopMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "An abject that contains informations about the item to add.",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "(Optional) The desired path for this item (default is \".\").",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 552,
            "description": "Add an item in the sub menu.",
            "itemtype": "method",
            "name": "addSubMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "An abject that contains informations about the item to add.",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "(Optional) The desired path for this item (default is \".\").",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 562,
            "description": "Remove an item from the main menu.",
            "itemtype": "method",
            "name": "removeMainMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to remove or its id.",
                    "type": "Object|String"
                },
                {
                    "name": "menuPath",
                    "description": "(Optional) The desired path for this item (default is \".\").",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 572,
            "description": "Remove an item from the top menu.",
            "itemtype": "method",
            "name": "removeTopMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to remove or its id.",
                    "type": "Object|String"
                },
                {
                    "name": "menuPath",
                    "description": "(Optional) The desired path for this item (default is \".\").",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 582,
            "description": "Remove an item from the sub menu.",
            "itemtype": "method",
            "name": "removeSubMenuItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to remove or its id.",
                    "type": "Object|String"
                },
                {
                    "name": "menuPath",
                    "description": "(Optional) The desired path for this item (default is \".\").",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 606,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 608,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 610,
            "description": "Load and add a `HTMLElement` on the document.",
            "itemtype": "method",
            "name": "addHTML",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the HTML element to load.",
                    "type": "String"
                },
                {
                    "name": "domElement",
                    "description": "An instance of a DOM element.",
                    "type": "HTMLElement"
                },
                {
                    "name": "success",
                    "description": "A function called the operation is completed.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation has failed.",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 623,
            "itemtype": "method",
            "name": "addScript",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the script to load.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "A function called the operation is completed.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation has failed.",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 635,
            "description": "Load a collection of scripts. Here are two methods to load scripts.\n1. A simple array with urls [ \"script.js\", \"script2.js\" ]\n2. An array of dictionary [ { MyObject: \"myObjectScript.js\" } ]. In this case the function will test if the script is already loaded\n   by using the key of the dictionary as object name.",
            "itemtype": "method",
            "name": "addScripts",
            "params": [
                {
                    "name": "scripts",
                    "description": "An array that contains all url to load or an array of.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "(Optional) A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "(Optional) A function called when the script is ready.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "(Optional) A function called if the process fail.",
                    "type": "Function"
                },
                {
                    "name": "interval",
                    "description": "(Optional) The value of check interval.",
                    "type": "Number"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 651,
            "itemtype": "method",
            "name": "addCSS",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the css file to load.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "A function called the operation is completed.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation has failed.",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 663,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 665,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 667,
            "description": "Ajax method to get or post data.",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "options",
                    "description": "A set of options\n         - url: The url to call.\n         - data: The data to send.\n         - method: The method to use (GET, POST, PUT).\n         - success: A function called when the operation is completed\n                          with the response in parameter.\n               - error: A function called when the operation has failed.",
                    "type": "Object"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 685,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 687,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 690,
            "description": "Adds a listener for an event",
            "itemtype": "method",
            "name": "listen",
            "params": [
                {
                    "name": "eventName",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is triggered",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 710,
            "description": "Remvoes a listener for an event",
            "itemtype": "method",
            "name": "listen",
            "params": [
                {
                    "name": "eventName",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is triggered",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 731,
            "description": "Returns all API-triggered listeners for events",
            "itemtype": "method",
            "name": "getListeners",
            "return": {
                "description": "A map : key => event, value => Array of listeners",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 740,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 742,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 744,
            "description": "Register a callback for a specific event.",
            "itemtype": "method",
            "name": "registerEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "An unique identifier for this event (ex: \"coreComponentWallClick\").",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "The priority for this event (define callback call order).",
                    "type": "Number"
                },
                {
                    "name": "evName",
                    "description": "The event name associated to callback.",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "Define the mode where the event is active (ex: `Core.MODE_NORMAL|Core.MODE_DRAG`).",
                    "type": "Number"
                },
                {
                    "name": "objType",
                    "description": "The type of object which must be targeted, or `null`.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call.",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "(Optional) Data passed to the callback.",
                    "type": "Object"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 759,
            "description": "Unregister a callback for a specific event.",
            "itemtype": "method",
            "name": "unregisterEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier of the event to remove.",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 768,
            "description": "Returns the symbols 2D class for drawing stuff on the canvas.",
            "itemtype": "method",
            "name": "getSymbols2D",
            "return": {
                "description": "The symbols2D class",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 778,
            "description": "Returns the zoom applied on the canvas.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The zoom, also called scale.",
                "type": "Number"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 788,
            "description": "Returns the translation applied on the canvas.",
            "itemtype": "method",
            "name": "getTranslation",
            "return": {
                "description": "The translation (x, y).",
                "type": "BABYLON.Vector2"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 798,
            "description": "Sets the zoom applied on the canvas.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The zoom, also called scale.",
                    "type": "Number"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 808,
            "description": "Sets the translation applied on the canvas.",
            "itemtype": "method",
            "name": "setTranslation",
            "params": [
                {
                    "name": "translation",
                    "description": "The translation (x, y).",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 818,
            "description": "Gets a transformed vector from plan coordinates to canvas coordinates.",
            "itemtype": "method",
            "name": "toRealCoord",
            "params": [
                {
                    "name": "vector",
                    "description": "Plan coordinates.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "translation",
                    "description": "Translation applied on the canvas.",
                    "type": "BABYLON.Vector2",
                    "optional": true
                },
                {
                    "name": "zoom",
                    "description": "Zoom applied on the canvas.",
                    "type": "BABYLON.Vector2",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a transformed vector to canvas coordinates.",
                "type": "BABYLON.Vector2"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 830,
            "description": "Returns the mouse position, regarding to the 2D planner\nIt will give you unexploitable results in 3D",
            "itemtype": "method",
            "name": "getMousePos",
            "return": {
                "description": "The mouse position",
                "type": "BABYLON.Vector2"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 841,
            "description": "Returns the nearest wall from the mouse position.",
            "itemtype": "method",
            "name": "getNearestWallFromMousePos",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "wnp.floorStructure"
                }
            ],
            "return": {
                "description": "The nearest wall.",
                "type": "BABYLON.Vector2"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 854,
            "description": "Request a redraw of the bottom \"static\" canvas on the next frame\nThe bottom canvas is used to draw things that don't usually need a redraw\nwhen the mouse moves, like the walls, the rooms, the grid etc...\nNB : The top \"dynamic\" canvas will also be redrawn",
            "itemtype": "method",
            "name": "requestStaticDraw",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 866,
            "description": "Request a redraw of the top \"dynamic\" canvas on the next frame\nThe top canvas is used to draw things that may need a refresh when the mouse moves\nTypically, it is the symbols displayed when the mouse hovers something",
            "itemtype": "method",
            "name": "requestDynamicDraw",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 877,
            "description": "Change the precision angle of the magnetism.",
            "itemtype": "method",
            "name": "setMagnetismAnglePrecision",
            "params": [
                {
                    "name": "precision",
                    "description": "The new precision (Rad)",
                    "type": "Float"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 887,
            "description": "Return a set of colors used in 2D in several context.",
            "itemtype": "method",
            "name": "getColorConstants",
            "return": {
                "description": "set of labeled colors",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 897,
            "description": "Gets the 2D static `canvas`.",
            "itemtype": "method",
            "name": "getStaticCanvas",
            "return": {
                "description": "Returns the static canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 907,
            "description": "Gets the 2D dynamic `canvas`.",
            "itemtype": "method",
            "name": "getDynamicCanvas",
            "return": {
                "description": "Returns the dynamic canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 917,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 919,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 921,
            "description": "Gets the 3D render `canvas` used by the 3D view.",
            "itemtype": "method",
            "name": "getCanvas",
            "return": {
                "description": "Returns the render canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 931,
            "description": "Returns the current scene",
            "itemtype": "method",
            "name": "getScene",
            "return": {
                "description": "The current 3D scene",
                "type": "BABYLON.Scene"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 941,
            "description": "Returns the active camera for the 3D scene",
            "itemtype": "method",
            "name": "getCamera",
            "return": {
                "description": "The active camera",
                "type": "BABYLON.Camera"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 951,
            "description": "Switch the camera",
            "itemtype": "method",
            "name": "switchCamera",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 963,
            "description": "This function returns a container of some cool features to interact with the camera.\nSee CameraFeatures documentation for a detailed review of all features.",
            "itemtype": "method",
            "name": "getCameraFeatures",
            "return": {
                "description": "The cameraFeatures object",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 975,
            "description": "Get all meshes on the scene",
            "itemtype": "method",
            "name": "getMeshes",
            "return": {
                "description": "An array of all meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 985,
            "description": "Get the mesh of the room for the active floor.",
            "itemtype": "method",
            "name": "getRoomMesh",
            "return": {
                "description": "The room as a 3D mesh.",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 995,
            "description": "Set the default material for the floor of the room",
            "itemtype": "method",
            "name": "setRoomFloorMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "Api.material"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1006,
            "description": "Set the default material for the ceiling of the room",
            "itemtype": "method",
            "name": "setRoomCeilingMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "Api.material"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1017,
            "description": "Get all top-level meshes on the scene (meshes whose parent are directly the floor, or a group)",
            "itemtype": "method",
            "name": "getTopLevelMeshes",
            "return": {
                "description": "An array of all 3D top-level meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1037,
            "description": "Get the picking informations with the mouse position.\nThe picking information contain :\n    - bu, bv : informations on the uv of the picked mesh\n    - distance : the distance from the camera to the picked point\n    - faceId : The face id of the mesh\n    - hit : hit or not a mesh\n    - pickedMesh : the mesh collided\n    - pickedPoint : The point on the mesh collided\n    - pickedSubMeshIndex : The index of the submesh",
            "itemtype": "method",
            "name": "getPickingInfo",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The collided informations.",
                "type": "wnp.BaseStructure"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1056,
            "description": "Get the instance of an object in function of the mouse position in 3D.",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The structure of the mesh.",
                "type": "wnp.BaseStructure"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1070,
            "description": "Get the material of an object in function of the mouse position in 3D.",
            "itemtype": "method",
            "name": "getMaterialFromMousePosition",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The material of the selected mesh.",
                "type": "wnp.Material"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1082,
            "description": "Set the material of an object in function of the mouse position in 3D.",
            "itemtype": "method",
            "name": "setMaterialFromMousePosition",
            "params": [
                {
                    "name": "mousePos",
                    "description": "The mouse position on the screen.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "The",
                    "description": "material.",
                    "type": "wnp.Material"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1112,
            "description": "Get all Handable objects on the scene",
            "itemtype": "method",
            "name": "getObjects",
            "return": {
                "description": "An array of all 3D handable meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1131,
            "description": "Searches for a mesh by its name.",
            "itemtype": "method",
            "name": "getMeshByName",
            "return": {
                "description": "The mesh if found, null if not.",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1141,
            "description": "Returns the directional light acting as the sun",
            "itemtype": "method",
            "name": "getSunlight",
            "return": {
                "description": "The sun",
                "type": "BABYLON.DirectionalLight"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1151,
            "description": "Returns the spheric mesh acting as the sky",
            "itemtype": "method",
            "name": "getSkySphere",
            "return": {
                "description": "The sky",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1161,
            "description": "Returns the cubic mesh acting as the ground.",
            "itemtype": "method",
            "name": "getGround",
            "return": {
                "description": "The ground",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1171,
            "description": "Projects a screen position (or the mouse position) on a 3D plane.",
            "itemtype": "method",
            "name": "projectOnPlane",
            "params": [
                {
                    "name": "plane",
                    "description": "The 3D plane",
                    "type": "BABYLON.Plane"
                },
                {
                    "name": "x",
                    "description": "The x coordinate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The y coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The projected point",
                "type": "BABYLON.Vector3"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1185,
            "description": "Allow the mesh to cast a shadow\nBeware, this is an expensive feature, performance may be altered",
            "params": [
                {
                    "name": "The",
                    "description": "mesh",
                    "type": "BABYLON.Mesh"
                }
            ],
            "itemtype": "method",
            "name": "castShadows",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1197,
            "description": "Disable the casting of shadow on a mesh",
            "params": [
                {
                    "name": "The",
                    "description": "mesh",
                    "type": "BABYLON.Mesh"
                }
            ],
            "itemtype": "method",
            "name": "uncastShadows",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1208,
            "description": "Get the selected object",
            "itemtype": "method",
            "name": "getSelectedObject",
            "return": {
                "description": "The current selected object.",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1233,
            "description": "Important widget function.\nIt allows you to add a widget with the url and the name of the widget.",
            "itemtype": "method",
            "name": "addWidgetEvent",
            "params": [
                {
                    "name": "path",
                    "description": "The url of the widget.",
                    "type": "String"
                },
                {
                    "name": "widgetName",
                    "description": "The name of widget.",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1256,
            "description": "Adds a object to a group.",
            "itemtype": "method",
            "name": "addToGroup",
            "params": [
                {
                    "name": "object",
                    "description": "A group or an object.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "group",
                    "description": "A group, an object or null.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "isHistoryAction",
                    "description": "Add or not to the history.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1268,
            "description": "Deselect an object and set the current selected object at null.",
            "itemtype": "method",
            "name": "deselectedObject",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1277,
            "description": "Gets the current selected object.",
            "itemtype": "method",
            "name": "getSelectedbject",
            "return": {
                "description": "The current selected object.",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1287,
            "description": "Select an object and set it at the current selected object.",
            "itemtype": "method",
            "name": "selectedObject",
            "params": [
                {
                    "name": "object",
                    "description": "The selected object.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 1297,
            "description": "Center a group.",
            "itemtype": "method",
            "name": "centerGroup",
            "params": [
                {
                    "name": "group",
                    "description": "The groupe to centered.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Menu.js",
            "line": 28,
            "description": "Add element in a menu",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "menu",
                    "description": "name of the targeted menu (see constants MENU_TOP, MENU_MAIN)",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "see MenuItem",
                    "type": "Object"
                },
                {
                    "name": "_path",
                    "description": "is the path inside the targeted menu if needed",
                    "type": "String"
                }
            ],
            "class": "Menu",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 113,
            "description": "Attach the camera to the scene and select the correct input mode.",
            "itemtype": "method",
            "name": "attachControl",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "(Optional)",
                    "description": "noPreventDefault Allow or not to prevent default actions when an event is handled.",
                    "type": "Boolean"
                },
                {
                    "name": "params",
                    "description": "(Optional) An dictionary of additional parameters.",
                    "type": "Object"
                }
            ],
            "class": "OrbitCamera",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 128,
            "description": "Attach the camera to the scene with touch support.",
            "itemtype": "method",
            "name": "attachControlForMobile",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "(Optional)",
                    "description": "noPreventDefault Allow or not to prevent default actions when an event is handled.",
                    "type": "Boolean"
                },
                {
                    "name": "params",
                    "description": "(Optional) An dictionary of additional parameters.",
                    "type": "Object"
                }
            ],
            "class": "OrbitCamera",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 267,
            "description": "Attach the camera to the scene with mouse and pointer event support.",
            "itemtype": "method",
            "name": "attachControlForDesktop",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "(Optional)",
                    "description": "noPreventDefault Allow or not to prevent default actions when an event is handled.",
                    "type": "Boolean"
                },
                {
                    "name": "params",
                    "description": "(Optional) An dictionary of additional parameters.",
                    "type": "Object"
                }
            ],
            "class": "OrbitCamera",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 99,
            "description": "Handler called when the actual page gets the focus. All states are reseted.",
            "itemtype": "method",
            "name": "onFocus",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 110,
            "description": "Handler called when a keyboard event is intercepted.",
            "itemtype": "method",
            "name": "onKeyStateChange",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 136,
            "description": "Indicates whether one or more key are pressed.",
            "itemtype": "method",
            "name": "isPressed",
            "params": [
                {
                    "name": "key",
                    "description": "Mixed: An array of keys to tests or a keyCode.",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "Returns ’true’ if one or more key has been pressed, otherwise it returns false.",
                "type": "Boolean"
            },
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 158,
            "description": "Indicates whether one or more key are released.",
            "itemtype": "method",
            "name": "isReleased",
            "params": [
                {
                    "name": "key",
                    "description": "Mixed: An array of keys to tests or a keyCode.",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "Returns ’true’ if one or more key has been released, otherwise it returns false.",
                "type": "Boolean"
            },
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 43,
            "description": "The cursor position on the canvas.",
            "itemtype": "property",
            "name": "pos",
            "readonly": "",
            "type": "BABYLON.Vector3",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 51,
            "description": "The delta position of the cursor.",
            "itemtype": "property",
            "name": "posDelta",
            "readonly": "",
            "type": "BABYLON.Vector3",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 59,
            "description": "The current pressed button in use.\n\n  * `PointerManager.BUTTON_LEFT` = 1\n  * `PointerManager.BUTTON_MIDDLE` = 2\n  * `PointerManager.BUTTON_RIGHT` = 4",
            "itemtype": "property",
            "name": "buttons",
            "readonly": "",
            "type": "Number",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 72,
            "description": "Number that represent current actions (masks).\n\n  * `PointerManager.ACTION_CLICK` = 1\n  * `PointerManager.ACTION_DBLCLICK` = 2\n  * `PointerManager.ACTION_DRAGSTART` = 4\n  * `PointerManager.ACTION_DRAGGING` = 8\n  * `PointerManager.ACTION_DRAGEND` = 16\n  * `PointerManager.ACTION_SCROLLUP` = 32\n  * `PointerManager.ACTION_SCROLLDOWN` = 64",
            "itemtype": "property",
            "name": "actions",
            "readonly": "",
            "type": "Number",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 89,
            "description": "Number that represent current modifiers (masks).\n\n  * `PointerManager.MODIFIER_ALT` = 1\n  * `PointerManager.MODIFIER_CTRL` = 2\n  * `PointerManager.MODIFIER_SHIFT` = 4",
            "itemtype": "property",
            "name": "buttons",
            "readonly": "",
            "type": "Number",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 122,
            "description": "Set the DOM element to use for event listening.",
            "itemtype": "method",
            "name": "setDomElement",
            "params": [
                {
                    "name": "domElement",
                    "description": "The DOM element to use.",
                    "type": "HTMLElement"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 139,
            "description": "Add mouse support for standard browser or Internet Explorer 10 and 11.",
            "itemtype": "method",
            "name": "addMouseSupport",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 160,
            "description": "Remove mouse support",
            "itemtype": "method",
            "name": "removeMouseSupport",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 182,
            "description": "Add touch support for standard browser or Internet Explorer 10 and 11.",
            "itemtype": "method",
            "name": "addTouchSupport",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 195,
            "description": "Remove touch support.",
            "itemtype": "method",
            "name": "removeTouchSupport",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 209,
            "description": "Gets the current state of the manager;",
            "itemtype": "method",
            "name": "getStatus",
            "return": {
                "description": "Returns an object that contains all states of the manager.",
                "type": "Object"
            },
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 254,
            "description": "Force the exit of the state `stateful` (ex: \"dragging\")\nNOTICE: Out events will be not raised (ex \"drag-end\").",
            "itemtype": "method",
            "name": "reset",
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 265,
            "description": "Called when the viewport size has changed. If no parameters has been passed to the function then\nthe size is computed from the DOM element where events are listened.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "(Optional) New width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "(Optional) New height.",
                    "type": "Number"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 281,
            "description": "Gets the position on X axis of the cursor.",
            "itemtype": "method",
            "name": "_getX",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The position on X axis of the cursor.",
                "type": "Number"
            },
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 299,
            "description": "Gets the position on Y axis of the cursor.",
            "itemtype": "method",
            "name": "_getY",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object..",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The position on Y axis of the cursor.",
                "type": "Number"
            },
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 317,
            "description": "Gets the `pointer` button responisible of the event.",
            "itemtype": "method",
            "name": "_getButton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The `pointer` button.",
                "type": "Number"
            },
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 341,
            "description": "Update the pointer state.",
            "itemtype": "method",
            "name": "_updateMouseState",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                },
                {
                    "name": "additionalAction",
                    "description": "(Optional) Additional actions to add to mask.",
                    "type": "Number"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 429,
            "description": "Notify the callback that an event has been intercepted.",
            "itemtype": "method",
            "name": "_notifyCb",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 448,
            "description": "Handler called when a (mouse/touch/pointer) down event is intercepted.",
            "itemtype": "method",
            "name": "onMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 459,
            "description": "Handler called when a (mouse/touch/pointer) move event is intercepted.",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 470,
            "description": "Handler called when a (mouse/touch/pointer) up event is intercepted.",
            "itemtype": "method",
            "name": "onMouseUp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 481,
            "description": "Handler called when a double click event is intercepted.",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 491,
            "description": "Handler called when a mouse wheel event is intercepted. The value is normalized\nto be usable in Wanaplan.",
            "itemtype": "method",
            "name": "onMouseWheel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "PointerManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 72,
            "description": "Attach an event listener to an event type.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event to listen.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The method to call when the event is triggered.",
                    "type": "Function"
                }
            ],
            "class": "TouchManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 82,
            "description": "Detach an event listener from an event type.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The listened event name.",
                    "type": "String"
                }
            ],
            "class": "TouchManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 91,
            "description": "Sets the dead zone value. This value is used when a finger is moving on the screen.\nIf the delta position is lesser than dead zone then the move event is not triggered.",
            "itemtype": "method",
            "name": "setDeadZone",
            "params": [
                {
                    "name": "deadZone",
                    "description": "The value of the dead zone. Must be in range of 0...N. Default is 2.0.",
                    "type": "Number"
                }
            ],
            "class": "TouchManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 322,
            "description": "Start the manager activity.",
            "itemtype": "method",
            "name": "start",
            "class": "TouchManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 340,
            "description": "Stop the manager activity.",
            "itemtype": "method",
            "name": "stop",
            "class": "TouchManager",
            "module": "Wanaplan",
            "submodule": "Input"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 46,
            "class": "MetalMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 48,
            "class": "MetalMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 58,
            "class": "MetalMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 60,
            "class": "MetalMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 16,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 18,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 30,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 32,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 38,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 40,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 53,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 55,
            "class": "TexturedMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 37,
            "class": "WhiteMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 39,
            "class": "WhiteMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 48,
            "class": "WhiteMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 50,
            "class": "WhiteMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Box3.js",
            "line": 3,
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 30,
            "description": "Sets the current camera.",
            "itemtype": "method",
            "name": "setCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "The camera to use.",
                    "type": "BABYLON.Camera"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 39,
            "description": "Tests for wall transparency.\nTriggered on `wnp.engine3D.camera.move`.",
            "itemtype": "method",
            "name": "onCameraMove",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 51,
            "description": "Tests for wall transparency.\nTriggered on `wnp.engine3D.camera.zoom`.",
            "itemtype": "method",
            "name": "onCameraZoom",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 63,
            "description": "Handler called when the whole walls are ready (with their subslopes).\nTriggered on `wnp.engine3D.subslopeOverturesReady`.",
            "itemtype": "method",
            "name": "onWallsReady",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 77,
            "description": "Stops the transparency when the user click on the transparency button.",
            "itemtype": "method",
            "name": "stopTransparency",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 108,
            "description": "Starts the transparency when the user clicks on the transparency button.",
            "itemtype": "method",
            "name": "startTransparency",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 118,
            "description": "Builds a plane from a bouding box.",
            "itemtype": "method",
            "name": "buildPlaneFromBB",
            "params": [
                {
                    "name": "box",
                    "description": "A bounding box.",
                    "type": "BABYLON.BoundingBox"
                }
            ],
            "return": {
                "description": "Returns a plane.",
                "type": "BABYLON.Plane"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 133,
            "description": "Builds an index array corresponding to the sub-mesh that must be transparent.",
            "itemtype": "method",
            "name": "fillByZIndex",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "The wall mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "The index array.",
                "type": "Array"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 183,
            "description": "Applies transparency to materials based on camera position.\nUsed to see through walls and roofs.",
            "itemtype": "method",
            "name": "dynamicWallTransparency",
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 222,
            "description": "Sets all walls to opaque.",
            "itemtype": "method",
            "name": "makeWallsOpaque",
            "params": [
                {
                    "name": "{Structure]",
                    "description": "structure A structure to use."
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 255,
            "description": "Sets all walls to opaque when the 3D mode is enabled.\nTriggered on `wnp.contextChanged`",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 267,
            "description": "Handler which will apply transparency only on walls at the current floor.\nTriggered on `wnp.engine3D.allFloorsReady`",
            "itemtype": "method",
            "name": "onGlobaleFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 282,
            "description": "Gets the best focus radius to move the camera in the best position to see whole plan.",
            "itemtype": "method",
            "name": "getBestFocusRadius",
            "params": [
                {
                    "name": "target",
                    "description": "The target (the main mesh).",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "camerea",
                    "description": "The main camera.",
                    "type": "BABYLON.Camera"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "radius Returns the radius to use.",
                "type": "Number"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 306,
            "description": "Computes the best camera state to focus on an object. Only works with `OrbitCamera`.",
            "itemtype": "method",
            "name": "computeCameraStateLooking",
            "params": [
                {
                    "name": "target",
                    "description": "The target to use.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "camera",
                    "description": "The camera to use.",
                    "type": "BABYLON.Camera"
                },
                {
                    "name": "viewport",
                    "description": "(Optional) The viewport to use, default is (0, 0, 1, 1);",
                    "type": "BABYLON.Viewport"
                }
            ],
            "return": {
                "description": "An object where :\n * `target` is the targetted mesh.\n * `alpha` is the alpha angle of the camera (see `OrbitCamera` doc).\n * `beta` is the beta angle of the camera (see `OrbitCamera` doc).\n * `radius` is the radius of the camera (see `OrbitCamera` doc).",
                "type": "Object"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 416,
            "description": "Computes an animation by given an amnimatable object , source state and destination state, compute the animations babylon way and start play it",
            "params": [
                {
                    "name": "target",
                    "description": "is the animatable object that will be animate",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "src",
                    "description": "is a set of property and their value at the begin of the animation",
                    "type": "BABYLON.Vectior3"
                },
                {
                    "name": "dst",
                    "description": "is a set of property and their value at the end of the animation",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "An object where :\n\n - duration               is the animation duration in ms\n - callback               a function to call at the end of the animation\n - cleanAfterAnimation    if true the animation will be cleaned at the end, if set to not, the cancel function MUST be called somewhere ( default is true )\n - name                   name the animation\n - isACamera              if set to true, the event camera.move will be triggered during the animation\n - smooth                 accepted values are linear | ease or a function f x [0:1] -> [0:1]",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "computeAnimation",
            "return": {
                "description": "A function that cancel the animation on calling, also make the clean up. This function will be called at the end of the animation if cleanAfterAnimation is true. If cleanAfterAnimation is set to false, this function MUST be called eventually.",
                "type": "AnimationCancelor"
            },
            "class": "wnp.CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 543,
            "description": "Cancels the animation.",
            "itemtype": "method",
            "name": "cancel",
            "class": "wnp.CameraFeatures.AnimationCancelor",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp.CameraFeatures"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 557,
            "description": "Handler called when an animation is done.",
            "itemtype": "method",
            "name": "_onAnimationEnd",
            "access": "private",
            "tagname": "",
            "class": "wnp.CameraFeatures.AnimationCancelor",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp.CameraFeatures"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 278,
            "description": "*\n        Components management         *\n*",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 353,
            "description": "*\n        Collision detection           *\n*",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 409,
            "description": "*\n           Event handlers             *\n*",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 526,
            "description": "*\n      Lyfe cycle : State pattern      *\n*",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 31,
            "description": "The color added on the top of diffuse texture.",
            "itemtype": "property",
            "name": "addColor",
            "default": "null",
            "type": "{BABYLON.Color3}",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 39,
            "description": "Allow to the user to know if it is a default material or not.",
            "itemtype": "property",
            "name": "isDefault",
            "type": "{Boolean}",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 87,
            "description": "Test if the material need alpha blending (if the alpha property is inferior 1.).\nAlso a good function to know if a material is transparent of not.",
            "itemtype": "method",
            "name": "needAlphaBlending",
            "return": {
                "description": "True if need alpha blending.",
                "type": "Boolean"
            },
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 98,
            "itemtype": "method",
            "name": "needAlphaTesting",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "false.",
                "type": "Boolean"
            },
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 107,
            "description": "Allows to push custom define set in a custom shader.",
            "itemtype": "method",
            "name": "setCustomDefines",
            "params": [
                {
                    "name": "defines",
                    "description": "The custom defines of your shader.",
                    "type": "String[]"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 117,
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 119,
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 121,
            "description": "Compute mandatory values for this material.",
            "itemtype": "method",
            "name": "build",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 132,
            "description": "Pushes normals value from a mesh like an attribute variable.",
            "itemtype": "method",
            "name": "normal",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 143,
            "description": "Pushes uvs value from a mesh like an attribute variable.",
            "itemtype": "method",
            "name": "uv",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 154,
            "description": "Pushes diffuse informations and the diffuse texture like an uniform.\nAnd indicates that this material has a diffuse texture.",
            "itemtype": "method",
            "name": "diffuse",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 167,
            "description": "Pushes bump informations and the bump texture like an uniform.\nAnd indicates that this material has a bump texture.",
            "itemtype": "method",
            "name": "bump",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 180,
            "description": "Pushes the diffuse color like an uniform.",
            "itemtype": "method",
            "name": "color",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 191,
            "description": "Pushes the alpha value like an uniform.",
            "itemtype": "method",
            "name": "setAlpha",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 200,
            "description": "Pushes envirronement informations and the env texture like an uniform.\nAnd indicates that this material has a env texture.",
            "itemtype": "method",
            "name": "env",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 213,
            "description": "Set all the light informations (the phong informations and the shadow too).",
            "itemtype": "method",
            "name": "light",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 231,
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 233,
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 235,
            "description": "Check if the material is ready.\n(If all the texture and attribute are loaded correctly)",
            "itemtype": "method",
            "name": "_isReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "defines",
                    "description": "The basic defines of the shader.",
                    "type": "String[]"
                },
                {
                    "name": "optionalDefines",
                    "description": "The optional defines of your custom shader.",
                    "type": "String[]"
                },
                {
                    "name": "engine",
                    "description": "The engine of babylon.",
                    "type": "BABYLON.engine"
                },
                {
                    "name": "mesh",
                    "description": "The mesh where the material is set on.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 270,
            "description": "Check if the material is ready.\n(If all the texture and attribute are loaded correctly)",
            "itemtype": "method",
            "name": "isReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh where the material is set on.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 340,
            "description": "Check if the diffuse texture is ready.",
            "itemtype": "method",
            "name": "diffuseReadyChunk",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "defines",
                    "description": "The basic defines of the shader.",
                    "type": "String[]"
                },
                {
                    "name": "optionalDefines",
                    "description": "The optional defines of your custom shader.",
                    "type": "String[]"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 362,
            "description": "Check if the bump texture is ready.",
            "itemtype": "method",
            "name": "bumpReadyChunk",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "defines",
                    "description": "The basic defines of the shader.",
                    "type": "String[]"
                },
                {
                    "name": "optionalDefines",
                    "description": "The optional defines of your custom shader.",
                    "type": "String[]"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 382,
            "description": "Check if the env texture is ready.",
            "itemtype": "method",
            "name": "envReadyChunk",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "defines",
                    "description": "The basic defines of the shader.",
                    "type": "String[]"
                },
                {
                    "name": "optionalDefines",
                    "description": "The optional defines of your custom shader.",
                    "type": "String[]"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 401,
            "description": "Check if the uv buffer is ready.",
            "itemtype": "method",
            "name": "uvReadyChunk",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh where the material is set on.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "defines",
                    "description": "The basic defines of the shader.",
                    "type": "String[]"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 417,
            "description": "Check if the light is ready.",
            "itemtype": "method",
            "name": "envReadyChunk",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh where the material is set on.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "defines",
                    "description": "The basic defines of the shader.",
                    "type": "String[]"
                },
                {
                    "name": "optionalDefines",
                    "description": "The optional defines of your custom shader.",
                    "type": "String[]"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 498,
            "description": "Set the color of the material.",
            "itemtype": "method",
            "name": "setBaseColor",
            "params": [
                {
                    "name": "color",
                    "description": "The color.",
                    "type": "BABYLON.Color3"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 508,
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 510,
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 514,
            "itemtype": "method",
            "name": "_batchedBind",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 523,
            "description": "Bind the mandatory things.",
            "itemtype": "method",
            "name": "_mandatoryBind",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "world",
                    "description": "The world Matrix.",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "mesh",
                    "description": "The mesh.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 535,
            "description": "Bind the Important value of the material.\nSend the property of the material on the GPU for the shaders.",
            "itemtype": "method",
            "name": "bind",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "world",
                    "description": "The world Matrix.",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "mesh",
                    "description": "The mesh.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 553,
            "description": "Unbind the Important value of the material.",
            "itemtype": "method",
            "name": "unbind",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 566,
            "itemtype": "method",
            "name": "_preBind",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 582,
            "description": "Bind the camera informations to the GPU.",
            "itemtype": "method",
            "name": "bindView",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 595,
            "description": "Bind the diffuse color to the GPU.",
            "itemtype": "method",
            "name": "bindColor",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 605,
            "description": "Bind alpha transparency to the GPU.",
            "itemtype": "method",
            "name": "bindAlpha",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 615,
            "description": "Bind diffuse informations and texture to the GPU.",
            "itemtype": "method",
            "name": "bindDiffuse",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 630,
            "description": "Bind bump informations and texture to the GPU.",
            "itemtype": "method",
            "name": "bindBump",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 645,
            "description": "Bind envirronement informations and texture to the GPU.",
            "itemtype": "method",
            "name": "bindEnv",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 660,
            "description": "Bind lights informations to the GPU.",
            "itemtype": "method",
            "name": "bindLights",
            "access": "private",
            "tagname": "",
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 696,
            "description": "Bind shadows informations to the GPU.",
            "itemtype": "method",
            "name": "bindShadows",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "world",
                    "description": "The world Matrix.",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "mesh",
                    "description": "The mesh.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 733,
            "description": "Dispose the material.",
            "itemtype": "method",
            "name": "dispose",
            "params": [
                {
                    "name": "forceDisposeEffect",
                    "description": "Dispose the effect create on the material.",
                    "type": "Boolean"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 756,
            "description": "Clone the material.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the clone material.",
                    "type": "String"
                }
            ],
            "class": "StandardMaterial",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 15,
            "description": "Objet permettant de construire des materials.",
            "is_constructor": 1,
            "class": "Dummy",
            "module": "Wanaplan",
            "submodule": "Core"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 24,
            "description": "Réalise une fusion de paramètres entre 2 objets.",
            "itemtype": "method",
            "name": "mergeParams",
            "params": [
                {
                    "name": "Un",
                    "description": "objet avec des propriétés.",
                    "type": "Object"
                },
                {
                    "name": "Un",
                    "description": "objet autre avec des propriétés.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "params Un objet comportant toutes les propriétés des 2 objets passés en paramètre.",
                "type": "Object"
            },
            "class": "Dummy",
            "module": "Wanaplan",
            "submodule": "Core"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 42,
            "description": "Active la répétition de texture sur une texture.",
            "itemtype": "method",
            "name": "static repeatTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "La texture à utiliser.",
                    "type": "THREE.Texture"
                },
                {
                    "name": "x",
                    "description": "Le facteur X de répétion à utiliser.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Le facteur Y de répétion à utiliser.",
                    "type": "Number"
                }
            ],
            "class": "Dummy",
            "module": "Wanaplan",
            "submodule": "Core"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 4,
            "description": "The bounding box of the wall.",
            "itemtype": "property",
            "name": "boundingBox",
            "access": "private",
            "tagname": "",
            "type": "{BABYLON.boundingBox}",
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 13,
            "description": "Normal to the wall.",
            "itemtype": "property",
            "name": "normal",
            "type": "{BABYLON.vector2}",
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 21,
            "description": "Center of the wall.",
            "itemtype": "property",
            "name": "center",
            "type": "{BABYLON.vector2}",
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 29,
            "description": "Material of the wall.",
            "itemtype": "property",
            "name": "material",
            "type": "{BABYLON.Material}",
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 37,
            "description": "Custom data set on the wall.",
            "itemtype": "property",
            "name": "customData",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 47,
            "description": "Serializes the object (to JSON).",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized.",
                "type": "Object"
            },
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 62,
            "description": "Deserializes the object (from JSON).",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization.",
                "type": "Object"
            },
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 75,
            "description": "Deserializes the object (from JSON).",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization.",
                "type": "Object"
            },
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\MaterialInfo.js",
            "line": 89,
            "description": "Creates a material info from a wall pane and a material.",
            "static": 1,
            "itemtype": "method",
            "name": "MakeFromPane",
            "params": [
                {
                    "name": "pane",
                    "description": "The involved wall pane.",
                    "type": "WallPane3D"
                },
                {
                    "name": "material",
                    "description": "The involved material.",
                    "type": "BABYLON.Material"
                }
            ],
            "return": {
                "description": "The resulting material inf.",
                "type": "MaterialInfo"
            },
            "class": "Dummy",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Helpers\\GeometryHelper.js",
            "line": 534,
            "description": "prends une geometrie stratée et fermée et genere ses faces\ntop et bottom generent la face du dessus et du dessous si mis à true\nnbPoint est le nombre de point par strate",
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GeometryHelper.js",
            "line": 700,
            "description": "for a mesh with face aligned with x,y,z axis\ndefine and set the UV map",
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GeometryHelper.js",
            "line": 1101,
            "description": "Representation of the pillow like a cube but with 3*3*3 points\nTODO : uvs",
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 23,
            "description": "Gets supported GPU capabilities of the browser like the list of GL extensions and max texture size.",
            "itemtype": "method",
            "name": "getCapabilities",
            "static": 1,
            "return": {
                "description": "Return an object that contains GPU capabilities.",
                "type": "Object"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 76,
            "description": "Gets an object which contains the correct event names to use (touch, mouse or pointer).",
            "itemtype": "method",
            "name": "getWrappedMouseEventNames",
            "static": 1,
            "return": {
                "description": "Return a dictionary with correct event names \n        Result on Android:       { down: \"touchstart\", move: \"touchmove\", up: \"touchend\", cancel: \"touchcancel\" }\n        Result on WindowsPhone:  { down: \"pointerdown\", move: \"pointermove\", up: \"pointerup\", cancel: \"pointercancel\", out: \"pointerout\" }\n        Result on Desktop:       { down: \"mousedown\", move: \"mousemove\", up: \"mouseup\", cancel: \"mouseup\" }",
                "type": "Object"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 124,
            "description": "Indicates whether the browser has WebGL support.",
            "itemtype": "method",
            "name": "hasWebGL",
            "static": 1,
            "return": {
                "description": "Return true if WebGL is supported, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 134,
            "description": "Indicates whether the browser has Canvas 2D support.",
            "itemtype": "method",
            "name": "hasCanvas2D",
            "static": 1,
            "return": {
                "description": "Return true if the canvas 2D is supported, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 144,
            "description": "Indicates whether the user's keyboard has an AZERTY layout.",
            "itemtype": "method",
            "name": "hasAzertyKeyboard",
            "static": 1,
            "return": {
                "description": "Return true if the user's keyboard has an AZERTY layout, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 154,
            "description": "Indicates whether the user's device is a mobile device.",
            "itemtype": "method",
            "name": "isMobileDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a mobile device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 164,
            "description": "Indicates whether the user's device is an Android device.",
            "itemtype": "method",
            "name": "isAndroidDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is an Android device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 174,
            "description": "Indicates whether the user's device is an Apple device.",
            "itemtype": "method",
            "name": "isAppleDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is an Apple device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 188,
            "description": "Indicates whether the user's device is a Windows Mobile device.",
            "itemtype": "method",
            "name": "isWindowsDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a Windows Mobile device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 202,
            "description": "Indicates whether the user's browser is Internet Explorer and return its version if it is.",
            "itemtype": "method",
            "name": "isIE",
            "static": 1,
            "return": {
                "description": "Return the version of Internet Explorer if it is, otherwise return -1.",
                "type": "Number"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 213,
            "description": "Indicates if the user's browser is Internet Explorer 9.",
            "itemtype": "method",
            "name": "isIE9",
            "static": 1,
            "return": {
                "description": "Return true if the user's browser is Internet Explorer 9, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 223,
            "description": "Indicates if the user's browser is Internet Explorer 10.",
            "itemtype": "method",
            "name": "isIE9",
            "static": 1,
            "return": {
                "description": "Return true if the user's browser is Internet Explorer 10, otherwise return false.",
                "type": "Boolean"
            },
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 233,
            "description": "Create a screenshot of the 3D scene.",
            "itemtype": "method",
            "name": "createScreenshot3D",
            "static": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "The 3D engine.",
                    "type": "BABYLON.Engine"
                },
                {
                    "name": "size",
                    "description": "(optional) An object that contains the size of the screenshot.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "(optional) A function called when the screenshot generation is done.",
                    "type": "Function"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 287,
            "description": "Force the device mode.",
            "itemtype": "method",
            "name": "__forceMobileDevice",
            "params": [
                {
                    "name": "value",
                    "description": "Set to true to force the mobile detection or false for desktop.",
                    "type": "Boolean"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 15,
            "description": "Insert an HTML file into the specified node.",
            "itemtype": "method",
            "name": "insertHTML",
            "params": [
                {
                    "name": "htmlPath",
                    "description": "The URL of the HTML file to load.",
                    "type": "String"
                },
                {
                    "name": "domNode",
                    "description": "The element's ID or the element itself.",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the HTML file is insered.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 43,
            "description": "Insert a script to the page.",
            "itemtype": "method",
            "name": "addScript",
            "params": [
                {
                    "name": "scriptUrl",
                    "description": "The URL of the script to load.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the script is ready.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 70,
            "description": "Load a collection of scripts. Here are two methods to load scripts.\n1. A simple array with urls [ \"script.js\", \"script2.js\" ] \n2. An array of dictionary [ { MyObject: \"myObjectScript.js\" } ]. In this case the function will test if the script is already loaded \n   by using the key of the dictionary as object name.",
            "itemtype": "method",
            "name": "addScripts",
            "params": [
                {
                    "name": "scripts",
                    "description": "An array that contains all url to load or an array of.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "(Optional) A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "(Optional) A function called when the script is ready.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "(Optional) A function called if the process fail.",
                    "type": "Function"
                },
                {
                    "name": "interval",
                    "description": "(Optional) The value of check interval.",
                    "type": "Number"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 131,
            "description": "Add a CSS file to the page.",
            "itemtype": "method",
            "name": "addStylesheet",
            "static": 1,
            "params": [
                {
                    "name": "stylesheet",
                    "description": "The URL of the file to load.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A dictionary of parameters (ex. { \"media\": \"print\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the file is insered.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 170,
            "description": "This method simulate a key event. It's used for testing purpose.",
            "itemtype": "method",
            "name": "simulateKey",
            "static": 1,
            "params": [
                {
                    "name": "keyCode",
                    "description": "The Key Code of the key to simulate.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The type of event: down, up or press.",
                    "type": "String"
                },
                {
                    "name": "modifiers",
                    "description": "A dictionary of modifier keys (ex. { \"ctrl\": \"true\" }).",
                    "type": "Object"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 190,
            "description": "This method simulate a mouse event. It's used for testing purpose.",
            "itemtype": "method",
            "name": "simulateClick",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "An element which will trigger the mouse event.",
                    "type": "HTMLElement"
                },
                {
                    "name": "x",
                    "description": "(optional) The horizontal coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "(optional) The vertical coordinate.",
                    "type": "Number"
                },
                {
                    "name": "(optional)",
                    "description": "type The type of mouse event: down, up, move.",
                    "type": "String"
                },
                {
                    "name": "(optional)",
                    "description": "button The button index (ex. 0 for the left button).",
                    "type": "Number"
                },
                {
                    "name": "(optional)",
                    "description": "wheel The wheel value.",
                    "type": "Number"
                }
            ],
            "class": "GlobalHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 15,
            "description": "return the rotation quaternion of the object relatively to the world",
            "class": "ObjectHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 39,
            "description": "return the oriented bounding box relatively to the world\nwhere position is the center of the box and dimension the dimension of the box",
            "class": "ObjectHelper",
            "module": "Wanaplan",
            "submodule": "Helpers"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 150,
            "description": "set the AABB in order to define the minimal volume that wrap the OyBB given in argument\n/!\\ the resulting AABB may not fit exactly the OyBB volume due to rotation limitation",
            "itemtype": "method",
            "name": "copyFromOyBB",
            "params": [
                {
                    "name": "OyBB",
                    "description": "the Oriented along y axis Bounding Box",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 161,
            "description": "set the AABB in order to define the minimal volume that wrap the OBB given in argument\n/!\\ the resulting AABB may not fit exactly the OBB volume due to rotation limitation",
            "itemtype": "method",
            "name": "copyFromOBB",
            "params": [
                {
                    "name": "OBB",
                    "description": "the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 240,
            "description": "set the OBB in order to define the same volume as the AABB given in argument\nthe resulting OBB fit exactly the volume",
            "itemtype": "method",
            "name": "copyFromAABB",
            "params": [
                {
                    "name": "AABB",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.OBB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 297,
            "description": "set the OBB in order to define the same volume as the OBB given in argument\nthe resulting OBB fit exactly the volume",
            "itemtype": "method",
            "name": "copyFromOyBB",
            "params": [
                {
                    "name": "OyBB",
                    "description": "the Oriented along y axis Bounding Box",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "ObjectHelper.OBB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 476,
            "description": "test collision is one dimension between two intervals [a1,b1] , [a2,b2]\n\na1------b1\n       a2------------b2\n\n without numeric inprecision is a2 < b1 == a1 < b2",
            "itemtype": "method",
            "name": "interval",
            "params": [
                {
                    "name": "a1",
                    "description": "the min of the 1 interval",
                    "type": "Number"
                },
                {
                    "name": "b1",
                    "description": "the max of the 1 interval",
                    "type": "Number"
                },
                {
                    "name": "a2",
                    "description": "the min of the 2 interval",
                    "type": "Number"
                },
                {
                    "name": "b2",
                    "description": "the max of the 2 interval",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 501,
            "description": "test collision between a ray and an Axis Aligned Bounding Box",
            "itemtype": "method",
            "name": "rayToAABB",
            "params": [
                {
                    "name": "o",
                    "description": "the origin of the ray",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "v",
                    "description": "the direction of the ray",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, else return a number t such as o+v*t is the point where the ray first collide the box,\n /!\\ t can be 0 if the is a collision ( beware of untyped test )"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 557,
            "description": "test collision between two Axis Aligned Bounding Boxes",
            "itemtype": "method",
            "name": "AABBtoAABB",
            "params": [
                {
                    "name": "box",
                    "description": "one of the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "one of the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 573,
            "description": "test collision between an Axis Aligned Bounding Boxes and an Oriented Bounding Box",
            "itemtype": "method",
            "name": "AABBtoOBB",
            "params": [
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 697,
            "description": "test collision between an Axis Aligned Bounding Boxes and an Oriented along y axis Bounding Box",
            "itemtype": "method",
            "name": "AABBtoOyBB",
            "params": [
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "the Oriented along Y axis Bounding Box",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 763,
            "description": "test collision between two Oriented Bounding Boxes",
            "itemtype": "method",
            "name": "OBBtoOBB",
            "params": [
                {
                    "name": "box",
                    "description": "one of the Oriented Bounding Box",
                    "type": "OBB"
                },
                {
                    "name": "box",
                    "description": "one of the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 837,
            "description": "test collision between a triangle and an Axis Aligned Bounding Box",
            "itemtype": "method",
            "name": "triangleToAABB",
            "params": [
                {
                    "name": "trianglesPoints",
                    "description": "three points which are the vertex of the triangles",
                    "type": "Array of BABYLON.Vector3"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 961,
            "description": "test collision between a mesh and an Axis Aligned Bounding Box\n/!\\ this method has hight impact on performance, use with caution",
            "itemtype": "method",
            "name": "MeshToAABB",
            "params": [
                {
                    "name": "worldMatrix",
                    "description": "the transformation matrix of the mesh",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "positions",
                    "description": "positions of the vertices, as returned by babylon.Mesh.getVertexBuffer ( ie vertex coordonate are concatened in a array )",
                    "type": "Array of number"
                },
                {
                    "name": "indices",
                    "description": "indices of the face vertices, as returned by babylon.Mesh.getVertexBuffer ( ie face index are concatened in a array )",
                    "type": "Array of number"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "ObjectHelper.collision",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "ObjectHelper"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 28,
            "description": "Draw a simple point.",
            "itemtype": "method",
            "name": "drawPoint",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 45,
            "description": "Draw an hovered point.",
            "itemtype": "method",
            "name": "drawPointHover",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "(optionnal) The zoom level.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 69,
            "description": "Draw an angle.",
            "itemtype": "method",
            "name": "drawAngle",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "(optionnal) The zoom level.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 111,
            "description": "Draw a segment with its points.",
            "itemtype": "method",
            "name": "drawSegment",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 142,
            "description": "Draw an arc with its points and its control points.",
            "itemtype": "method",
            "name": "drawArc",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "cp",
                    "description": "Position of the control point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 176,
            "description": "Draw a grip.",
            "itemtype": "method",
            "name": "drawGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 210,
            "description": "Draw a grip with a check icon at the end.",
            "itemtype": "method",
            "name": "drawCheckGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 252,
            "description": "Draw a grip with a cancel icon at the end.",
            "itemtype": "method",
            "name": "drawCancelGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 294,
            "description": "Draw a segment with grips.",
            "itemtype": "method",
            "name": "drawGripSegment",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw for the first grip [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw for the second grip [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 331,
            "description": "Draw arrows of grips.",
            "itemtype": "method",
            "name": "drawArrows",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "distance",
                    "description": "Distance des flèches par rapport au centre définit par `pos`.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 371,
            "description": "Draw a measure.",
            "itemtype": "method",
            "name": "drawMeasure",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "Measure's text.",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "(Optionnal) Mesure's color.",
                    "type": "String"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 438,
            "description": "Draw a check icon near the given position.",
            "itemtype": "method",
            "name": "drawCursorCheck",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 477,
            "description": "Debug function to draw all symbols",
            "itemtype": "method",
            "name": "_drawAllSymbols",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\uuid.js",
            "line": 19,
            "description": "V4 UUID generator\n\nhttp://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript",
            "itemtype": "method",
            "name": "uuid4",
            "static": 1,
            "return": {
                "description": "Generated UUID",
                "type": "String"
            },
            "class": "wnp.uuid",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Logger.js",
            "line": 13,
            "description": "Display a standard message in the browser's console. (alias to console.log).",
            "itemtype": "method",
            "name": "message",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 25,
            "description": "Display a warning message in the browser's console. (alias to console.warn).",
            "itemtype": "method",
            "name": "warning",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 37,
            "description": "Display an error message in the browser's console. (alias to console.error).",
            "itemtype": "method",
            "name": "error",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 49,
            "description": "Display a message in the HTML debug console.",
            "itemtype": "method",
            "name": "out",
            "static": 1,
            "params": [
                {
                    "name": "messageText",
                    "description": "A message to show.",
                    "type": "String"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 62,
            "description": "Clear the HTML debug console.",
            "itemtype": "method",
            "name": "clear",
            "static": 1,
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 74,
            "description": "Enable or disable the debugger.",
            "itemtype": "method",
            "name": "setDebugMode",
            "params": [
                {
                    "name": "enabled",
                    "description": "Set to ’true’ to enable or ’false’ to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 18,
            "description": "Start the timer.",
            "itemtype": "method",
            "name": "start",
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 26,
            "description": "Update delta time.",
            "itemtype": "method",
            "name": "update",
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 36,
            "description": "Gets elapsedTime since the start.",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "elapsedTime Returns the elpased time since the last update.",
                "type": "Number"
            },
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 45,
            "description": "Gets the delta time since the last update.",
            "itemtype": "method",
            "name": "getDeltaTime",
            "return": {
                "description": "deltaTime Returns the delta time since the last update.",
                "type": "Number"
            },
            "class": "wnp.LoopTimer",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 27,
            "description": "Load all test files and add tests to the stack to be executed.",
            "itemtype": "method",
            "name": "registerTests",
            "params": [
                {
                    "name": "readyCB",
                    "description": "a callback called when all test files are fully loaded and redy to execute.",
                    "type": "Function"
                }
            ],
            "class": "TestManager",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 72,
            "description": "Add a test case to the stack of tests.",
            "itemtype": "method",
            "name": "addTest",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the test.",
                    "type": "String"
                },
                {
                    "name": "testFunc",
                    "description": "The function that will be called.\n\t \t\t\t\t\t Note: The test function MUST have two arguments \n\t \t\t\t\t\t \t   The first is a success callback and the last is an error callback.",
                    "type": "Function"
                }
            ],
            "class": "TestManager",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 144,
            "description": "Start the test process. All tests are loaded then executed in the order of the requiredTestFiles array.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "delay",
                    "description": "The delay to wait before starting (ex. wait that the dom is ultra ready!).",
                    "type": "Number"
                }
            ],
            "class": "TestManager",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 1,
            "description": "Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 13,
            "description": "## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 20,
            "description": "Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 25,
            "description": "Create the Jasmine environment. This is used to run all specs in a project.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 30,
            "description": "## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 77,
            "description": "Add all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 86,
            "description": "Expose the interface for adding custom equality testers.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 93,
            "description": "Expose the interface for adding custom expectation matchers",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 100,
            "description": "Expose the mock interface for the JavaScript timeout functions",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 107,
            "description": "## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 120,
            "description": "## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 133,
            "description": "The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 139,
            "description": "Filter which specs will be run by matching the start of the full name against the `spec` query param.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 150,
            "description": "Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 158,
            "description": "## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 173,
            "description": "Helper function for readability above.",
            "class": "",
            "module": "Wanaplan"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:1"
        },
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:1"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Floor\\FloorController.js:480"
        },
        {
            "message": "unknown tag: onfloorready",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:56"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:72"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperStructure.js:7"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:58"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:86"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:100"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:162"
        },
        {
            "message": "unknown tag: methode",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:385"
        },
        {
            "message": "param name missing: {Object3d}",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:479"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Room\\RoomComponent3D.js:231"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:7"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:73"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:83"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:96"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:133"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:147"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:168"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent3D.js:129"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent3D.js:139"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent3D.js:156"
        },
        {
            "message": "unknown tag: cameraid",
            "line": " js\\Core\\Api\\Api.js:181"
        },
        {
            "message": "param name missing: {wnp.floorStructure}",
            "line": " js\\Core\\Api\\Api.js:841"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Core\\Api\\Api.js:995"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Core\\Api\\Api.js:1006"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:1"
        },
        {
            "message": "Missing item type\nstart displaying the handles at every camera move",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:57"
        },
        {
            "message": "Missing item type\nstop displaying the handles",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:73"
        },
        {
            "message": "Missing item type\ndispose handle specified by the name, or all the handles if name is omitted",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:206"
        },
        {
            "message": "Missing item type\nfill the _availableHandlesobject with true for one handle if the object can be edited along this axis, flase else\nis based in the getPropertyName",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:277"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js:1"
        },
        {
            "message": "Missing item type\nlisten masterReshaper",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:1"
        },
        {
            "message": "Missing item type\ndisplay the handle when the object is resized, when false the handle will be hided",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:104"
        },
        {
            "message": "Missing item type\ndisplay the handle when the object is resized, when false the handle will be hided",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:109"
        },
        {
            "message": "Missing item type\nanimate the handle when the cursor is hover a face",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:114"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the new position of the dragged face",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:119"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the face when the cursor is over it",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:124"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the old face when it is dragged",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:129"
        },
        {
            "message": "Missing item type\nround the object dimension",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:134"
        },
        {
            "message": "Missing item type\ndebug option",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:139"
        },
        {
            "message": "Missing item type\nreturn the true bounding box, where position is the center of the box and dimension the dimension of the box",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:194"
        },
        {
            "message": "Missing item type\nis responsive of notify UI event to reshaper children\nregister a unique reshaper with a askhand / releasehand mecanism\n\nanswer event thrown by ConfiguratorModComponent",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:1"
        },
        {
            "message": "Missing item type\nlaunchs the animation to focus the camera on the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:106"
        },
        {
            "message": "Missing item type\ncancel the animation, leave the camera where it is",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:186"
        },
        {
            "message": "Missing item type\ngo back to primar camera state",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:195"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js:349"
        },
        {
            "message": "Missing item type\n/!\\ does not support multimaterial yet",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:1"
        },
        {
            "message": "Missing item type\napply transparency on walls when they are between the target and the camera",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:68"
        },
        {
            "message": "Missing item type\napply transparency on all the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:73"
        },
        {
            "message": "Missing item type\napply transparency on all the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:78"
        },
        {
            "message": "Missing item type\nWhen the floor is ready, the room can be carved.",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:56"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:208"
        },
        {
            "message": "Missing item type\noptions\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:214"
        },
        {
            "message": "Missing item type\noptions\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:259"
        },
        {
            "message": "Missing item type\nAdds several properties mandatory to the object3D.",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:385"
        },
        {
            "message": "Missing item type\ncas d'un rechargement à chaud depuis clic sur etage ou passage 2D 3D\n=> on repositionne les objets groupés dans leur reperes de floor pour eviter que ca pete",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:415"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Point\\Path.js:15"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Point\\Path.js:17"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent2D.js:71"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent2D.js:73"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent3D.js:56"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent3D.js:58"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js:1"
        },
        {
            "message": "Missing item type\ntranslation hack\n_(\"Capture\") _(\"New\") _(\"Save\") _(\"Options\") _(\"Change language\") _(\"Full Screen\")",
            "line": " js\\Components\\MenuComponents\\TopMenuComponent.js:2"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\OctreeComponent\\OctreePartitionerFactory.js:1"
        },
        {
            "message": "Missing item type\n// empiric proof\nvar dimension = new Point( Math.random() , Math.random() , Math.random() )\ndimension.normalize()\nvar s = computePropPath( 1000 , dimension )\nvar prob = new Point(\n    ( s.split('x').length-1 )/1000,\n    ( s.split('y').length-1 )/1000,\n    ( s.split('z').length-1 )/1000\n)\nprob.normalize()\nconsole.log( dimension )\nconsole.log( prob )",
            "line": " js\\Components\\OctreeComponent\\OctreePartitionerFactory.js:544"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\GeneralOptionComponent2D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:51"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:53"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:350"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:352"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:406"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:408"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:518"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:520"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:606"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:608"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:663"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:665"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:685"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:687"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:740"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:742"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:917"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:919"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:46"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:48"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:58"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:60"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:16"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:18"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:30"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:32"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:38"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:40"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:53"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:55"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:37"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:39"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:48"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:50"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Box3.js:3"
        },
        {
            "message": "Missing item type\n*\n        Components management         *\n*",
            "line": " js\\Core\\Engine3D.js:278"
        },
        {
            "message": "Missing item type\n*\n        Collision detection           *\n*",
            "line": " js\\Core\\Engine3D.js:353"
        },
        {
            "message": "Missing item type\n*\n           Event handlers             *\n*",
            "line": " js\\Core\\Engine3D.js:409"
        },
        {
            "message": "Missing item type\n*\n      Lyfe cycle : State pattern      *\n*",
            "line": " js\\Core\\Engine3D.js:526"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:117"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:119"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:231"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:233"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:508"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:510"
        },
        {
            "message": "Missing item type\nObjet permettant de construire des materials.",
            "line": " js\\Core\\MaterialFactory.js:15"
        },
        {
            "message": "Missing item type\nprends une geometrie stratée et fermée et genere ses faces\ntop et bottom generent la face du dessus et du dessous si mis à true\nnbPoint est le nombre de point par strate",
            "line": " js\\Helpers\\GeometryHelper.js:534"
        },
        {
            "message": "Missing item type\nfor a mesh with face aligned with x,y,z axis\ndefine and set the UV map",
            "line": " js\\Helpers\\GeometryHelper.js:700"
        },
        {
            "message": "Missing item type\nRepresentation of the pillow like a cube but with 3*3*3 points\nTODO : uvs",
            "line": " js\\Helpers\\GeometryHelper.js:1101"
        },
        {
            "message": "Missing item type\nreturn the rotation quaternion of the object relatively to the world",
            "line": " js\\Helpers\\ObjectHelper.js:15"
        },
        {
            "message": "Missing item type\nreturn the oriented bounding box relatively to the world\nwhere position is the center of the box and dimension the dimension of the box",
            "line": " js\\Helpers\\ObjectHelper.js:39"
        },
        {
            "message": "Missing item type\nStarting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:1"
        },
        {
            "message": "Missing item type\n## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:13"
        },
        {
            "message": "Missing item type\nSince this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:20"
        },
        {
            "message": "Missing item type\nCreate the Jasmine environment. This is used to run all specs in a project.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:25"
        },
        {
            "message": "Missing item type\n## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:30"
        },
        {
            "message": "Missing item type\nAdd all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:77"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom equality testers.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:86"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom expectation matchers",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:93"
        },
        {
            "message": "Missing item type\nExpose the mock interface for the JavaScript timeout functions",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:100"
        },
        {
            "message": "Missing item type\n## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:107"
        },
        {
            "message": "Missing item type\n## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:120"
        },
        {
            "message": "Missing item type\nThe `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:133"
        },
        {
            "message": "Missing item type\nFilter which specs will be run by matching the start of the full name against the `spec` query param.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:139"
        },
        {
            "message": "Missing item type\nSetting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:150"
        },
        {
            "message": "Missing item type\n## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:158"
        },
        {
            "message": "Missing item type\nHelper function for readability above.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:173"
        }
    ]
}