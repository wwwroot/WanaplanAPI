{
    "project": {
        "name": "WanaPlan",
        "description": "",
        "version": "0.0.1",
        "url": "http://wanadev.fr/"
    },
    "files": {
        "injection\\photonui.js": {
            "name": "injection\\photonui.js",
            "modules": {
                "PhotonUI": 1,
                "Helpers": 1,
                "Misc": 1
            },
            "classes": {
                "photonui.Helpers": 1,
                "photonui.Base": 1,
                "photonui.Widget": 1,
                "photonui.FileManager": 1
            },
            "fors": {},
            "namespaces": {
                "photonui": 1
            }
        },
        "js\\Components\\AvatarComponent\\AvatarComponent3D.js": {
            "name": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "modules": {
                "Component": 1
            },
            "classes": {
                "AvatarComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CameraComponent\\CameraComponent.js": {
            "name": "js\\Components\\CameraComponent\\CameraComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js": {
            "name": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "modules": {},
            "classes": {
                "FloorComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorController.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "modules": {},
            "classes": {
                "FloorController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Floor\\FloorStructure.js": {
            "name": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "modules": {},
            "classes": {
                "FloorStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "modules": {},
            "classes": {
                "HopperComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "modules": {},
            "classes": {
                "HopperComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js": {
            "name": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "modules": {},
            "classes": {
                "HopperStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Door.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Door.js",
            "modules": {
                "Programmable": 1
            },
            "classes": {
                "wnp.Door": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Garage.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Garage.js",
            "modules": {},
            "classes": {
                "wnp.Garage": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Velux.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Velux.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Window.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Window.js",
            "modules": {},
            "classes": {
                "wnp.Window": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cube.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cube.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cylinder.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cylinder.js",
            "modules": {},
            "classes": {
                "wnp.cylinder": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Plane.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Plane.js",
            "modules": {},
            "classes": {
                "wnp.plane": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\RoundedCube.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\RoundedCube.js",
            "modules": {},
            "classes": {
                "wnp.cube": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Angle.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Angle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Asymetric.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Asymetric.js",
            "modules": {},
            "classes": {
                "wnp.Asymetric": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\IlotCarmel.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\IlotCarmel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\IlotStori.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\IlotStori.js",
            "modules": {},
            "classes": {
                "wnp.Ilot": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Ovoide.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Ovoide.js",
            "modules": {},
            "classes": {
                "wnp.Ovoide": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Symetric.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Symetric.js",
            "modules": {},
            "classes": {
                "wnp.Symetric": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Dressing\\BaseBox.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Dressing\\BaseBox.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Angle.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Angle.js",
            "modules": {},
            "classes": {
                "wnp.Angle": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Base.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Base.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Corner.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Corner.js",
            "modules": {},
            "classes": {
                "wnp.Corner": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Dishwasher.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Dishwasher.js",
            "modules": {},
            "classes": {
                "wnp.Dishwasher": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Dressing.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Dressing.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Hob.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Hob.js",
            "modules": {},
            "classes": {
                "wnp.Hob": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\IntegratedOven.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\IntegratedOven.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Oven.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Oven.js",
            "modules": {},
            "classes": {
                "wnp.Oven": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Sink.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Sink.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\SinkBathroom.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\SinkBathroom.js",
            "modules": {},
            "classes": {
                "wnp.Sink": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen\\BaseBox.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen\\BaseBox.js",
            "modules": {},
            "classes": {
                "wnp.BaseBox": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen\\SinkBox.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen\\SinkBox.js",
            "modules": {},
            "classes": {
                "wnp.SinkBox": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Shower\\Square.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Shower\\Square.js",
            "modules": {},
            "classes": {
                "wnp.Square": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa\\Advanced.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa\\Advanced.js",
            "modules": {},
            "classes": {
                "wnp.Advanced": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa\\Base.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa\\Base.js",
            "modules": {},
            "classes": {
                "wnp.Base": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs\\Spiral.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs\\Spiral.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture.js",
            "modules": {},
            "classes": {
                "wnp.Overture": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\BABYLONImporter.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\BABYLONImporter.js",
            "modules": {},
            "classes": {
                "wnp.BabylonImporter": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\BabyBed.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\BabyBed.js",
            "modules": {},
            "classes": {
                "wnp.BabyBed": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bar.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bar.js",
            "modules": {},
            "classes": {
                "wnp.Bar": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Basic.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic.js",
            "modules": {},
            "classes": {
                "wnp.Basic": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bath.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath.js",
            "modules": {},
            "classes": {
                "wnp.Bath": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\BathTub.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\BathTub.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Bed.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Bed.js",
            "modules": {},
            "classes": {
                "wnp.Bed": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\BedStora.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\BedStora.js",
            "modules": {},
            "classes": {
                "wnp.bedstora": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\BenchIkea.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\BenchIkea.js",
            "modules": {},
            "classes": {
                "wnp.BenchIkea": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\BetsideTable.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\BetsideTable.js",
            "modules": {},
            "classes": {
                "wnp.BetsideTable": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\BureauTestLarge.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\BureauTestLarge.js",
            "modules": {},
            "classes": {
                "wnp.BureauTestLarge": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Chair.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Chair.js",
            "modules": {},
            "classes": {
                "wnp.Chair": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\ChairGeneric.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairGeneric.js",
            "modules": {},
            "classes": {
                "wnp.chair": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\ChairHenriksdal.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairHenriksdal.js",
            "modules": {},
            "classes": {
                "wnp.ChairHenriksdal": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\ChairIvar.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairIvar.js",
            "modules": {},
            "classes": {
                "wnp.chairiva": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\ChairKritter.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairKritter.js",
            "modules": {},
            "classes": {
                "wnp.ChairKritter": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\CheneStoique.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\CheneStoique.js",
            "modules": {},
            "classes": {
                "wnp.CheneStoique": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\CoffeeTableIkea.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\CoffeeTableIkea.js",
            "modules": {},
            "classes": {
                "wnp.CoffeeTableIkea": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Curtains.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Curtains.js",
            "modules": {},
            "classes": {
                "wnp.Curtains": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Cushion.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Cushion.js",
            "modules": {},
            "classes": {
                "wnp.Cushion": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Dishes.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Dishes.js",
            "modules": {},
            "classes": {
                "wnp.Dishes": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Dressing.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Dressing.js",
            "modules": {},
            "classes": {
                "wnp.Dressing": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Fence.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Fence.js",
            "modules": {},
            "classes": {
                "wnp.Fence": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\FirePlace.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\FirePlace.js",
            "modules": {},
            "classes": {
                "wnp.FirePlace": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture.js",
            "modules": {},
            "classes": {
                "wnp.Furniture": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\GenericTub.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\GenericTub.js",
            "modules": {},
            "classes": {
                "wnp.BathTub": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Hood.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Hood.js",
            "modules": {},
            "classes": {
                "wnp.hood": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen.js",
            "modules": {},
            "classes": {
                "wnp.Kitchen": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Light.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Light.js",
            "modules": {},
            "classes": {
                "wnp.Light": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\MetalConsole.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\MetalConsole.js",
            "modules": {},
            "classes": {
                "wnp.MetalConsole": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\OBJImporter.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\OBJImporter.js",
            "modules": {},
            "classes": {
                "wnp.OBJImporter": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\PhotoFrame.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\PhotoFrame.js",
            "modules": {},
            "classes": {
                "wnp.PhotoFrame": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "modules": {},
            "classes": {
                "wnp.Programmable": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedTable.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedTable.js",
            "modules": {},
            "classes": {
                "wnp.RoundedTable": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedTableFourFoot.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedTableFourFoot.js",
            "modules": {},
            "classes": {
                "wnp.RoundedTableFourFoot": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Shelves.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Shelves.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Shower.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Shower.js",
            "modules": {},
            "classes": {
                "wnp.Shower": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa.js",
            "modules": {},
            "classes": {
                "wnp.Sofa": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\SofaCromwell.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\SofaCromwell.js",
            "modules": {},
            "classes": {
                "wnp.sofacromwell": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\SpiralStairs.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\SpiralStairs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\SpotLamp.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\SpotLamp.js",
            "modules": {},
            "classes": {
                "wnp.SpotLamp": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\SpotMultiple.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\SpotMultiple.js",
            "modules": {},
            "classes": {
                "wnp.spotMultiple": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs.js",
            "modules": {},
            "classes": {
                "wnp.Stairs": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Table.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Table.js",
            "modules": {},
            "classes": {
                "wnp.Table": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\TableBoconcept.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\TableBoconcept.js",
            "modules": {},
            "classes": {
                "wnp.TableBoconcept": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\TableGeneric.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\TableGeneric.js",
            "modules": {},
            "classes": {
                "wnp.TableGeneric": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\TableModer.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\TableModer.js",
            "modules": {},
            "classes": {
                "wnp.TableModer": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\TableOvale.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\TableOvale.js",
            "modules": {},
            "classes": {
                "wnp.TableOvale": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\TableUtby.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\TableUtby.js",
            "modules": {},
            "classes": {
                "wnp.BureauTest": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\TowelDry.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\TowelDry.js",
            "modules": {},
            "classes": {
                "wnp.TowelDry": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\Programmable\\Tv.js": {
            "name": "js\\Components\\CoreComponents\\Object\\Programmable\\Tv.js",
            "modules": {},
            "classes": {
                "wnp.Tv": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "modules": {},
            "classes": {
                "DecorationComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\DragComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "modules": {},
            "classes": {
                "DragComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "modules": {},
            "classes": {
                "EditionComponent3D": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\EphemeralInfoComponent.js": {
            "name": "js\\Components\\CoreComponents\\Object\\EphemeralInfoComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "modules": {},
            "classes": {
                "ObjectComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\ObjectStructure.js": {
            "name": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "modules": {},
            "classes": {
                "Object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "modules": {},
            "classes": {
                "wnp.overtureComponent2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "modules": {},
            "classes": {
                "wnp.overtureComponent3D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js": {
            "name": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "modules": {},
            "classes": {
                "wnp.OvertureStructure": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Point\\Graph.js": {
            "name": "js\\Components\\CoreComponents\\Point\\Graph.js",
            "modules": {},
            "classes": {
                "Graph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\Path.js": {
            "name": "js\\Components\\CoreComponents\\Point\\Path.js",
            "modules": {},
            "classes": {
                "Path": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\PointComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "modules": {},
            "classes": {
                "PointComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Point\\PointStructure.js": {
            "name": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "modules": {},
            "classes": {
                "PointStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "modules": {},
            "classes": {
                "RoomComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "modules": {},
            "classes": {
                "RoomComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js",
            "modules": {},
            "classes": {
                "RoomHierarchy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Room\\RoomStructure.js": {
            "name": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "modules": {},
            "classes": {
                "RoomStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "modules": {},
            "classes": {
                "wnp.spiralStairwayStructure": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "modules": {},
            "classes": {
                "StairwayComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "modules": {},
            "classes": {
                "wnp.stairwayComponent3D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "modules": {},
            "classes": {
                "wnp.stairwayStructure": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js": {
            "name": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "modules": {},
            "classes": {
                "wnp.straightStairwayStructure": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "modules": {},
            "classes": {
                "subSlopeComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "modules": {},
            "classes": {
                "subSlopeComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "modules": {},
            "classes": {
                "wnp.subSlopeOvertureComponent2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "modules": {},
            "classes": {
                "wnp.SubSlopeOvertureStructure": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js": {
            "name": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "modules": {},
            "classes": {
                "wnp.subSlopeStructure": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\CoreComponents\\Wall\\CurvedWall.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\CurvedWall.js",
            "modules": {},
            "classes": {
                "CurvedWall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\PolygonWall.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "modules": {},
            "classes": {
                "PolygonWall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "modules": {},
            "classes": {
                "WallComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "modules": {},
            "classes": {
                "WallComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallPane3D.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\CoreComponents\\Wall\\WallStructure.js": {
            "name": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "modules": {},
            "classes": {
                "WallStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\DebugComponent\\DebugComponent2D.js": {
            "name": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\DebugComponent\\DebugComponent3D.js": {
            "name": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GridComponent\\GridComponent2D.js": {
            "name": "js\\Components\\GridComponent\\GridComponent2D.js",
            "modules": {},
            "classes": {
                "wnp.GridComponent2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\GridComponent\\GridComponent3D.js": {
            "name": "js\\Components\\GridComponent\\GridComponent3D.js",
            "modules": {},
            "classes": {
                "wnp.GridComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GridComponent\\GridStructure.js": {
            "name": "js\\Components\\GridComponent\\GridStructure.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js": {
            "name": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorPanelComponent3D.js": {
            "name": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorPanelComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\HistoryComponent\\HistoryComponent.js": {
            "name": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "modules": {},
            "classes": {
                "HistoryComponent": 1,
                "wnp.Action": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\HistoryComponent\\HistoryEditionComponent.js": {
            "name": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "modules": {},
            "classes": {
                "wnp.HistoryEditionComponent": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js": {
            "name": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "modules": {},
            "classes": {
                "BaseTopMenuComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\ExitComponent.js": {
            "name": "js\\Components\\InternalComponents\\ExitComponent.js",
            "modules": {},
            "classes": {
                "ExitComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\FullscreenComponent.js": {
            "name": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "modules": {},
            "classes": {
                "FullscreenComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\NewComponent.js": {
            "name": "js\\Components\\InternalComponents\\NewComponent.js",
            "modules": {},
            "classes": {
                "NewComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\OptionsComponent.js": {
            "name": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "modules": {},
            "classes": {
                "OptionsComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\SaveComponent.js": {
            "name": "js\\Components\\InternalComponents\\SaveComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js": {
            "name": "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js",
            "modules": {},
            "classes": {
                "ScreenshotMenuComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\LockComponent\\LockComponent.js": {
            "name": "js\\Components\\LockComponent\\LockComponent.js",
            "modules": {},
            "classes": {
                "LockComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js": {
            "name": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "modules": {},
            "classes": {
                "wnp.MagnetismComponent2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js": {
            "name": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "modules": {},
            "classes": {
                "MagnetismComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MeasureComponent\\MeasureComponent.js": {
            "name": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "modules": {},
            "classes": {
                "MeasureComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MenuComponents\\TopMenuComponent.js": {
            "name": "js\\Components\\MenuComponents\\TopMenuComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MobileComponent\\MobileComponent.js": {
            "name": "js\\Components\\MobileComponent\\MobileComponent.js",
            "modules": {},
            "classes": {
                "MobileComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\MobileComponent\\MobileInputComponent.js": {
            "name": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "modules": {},
            "classes": {
                "MobileInputComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\OctreeComponent\\LargeHolyCollider.js": {
            "name": "js\\Components\\OctreeComponent\\LargeHolyCollider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js": {
            "name": "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js": {
            "name": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PedagoComponent\\PedagoComponent.js": {
            "name": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "modules": {},
            "classes": {
                "PedagoComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js": {
            "name": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "modules": {},
            "classes": {
                "HardwareScalingComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js": {
            "name": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PrintComponent\\PrintComponent2D.js": {
            "name": "js\\Components\\PrintComponent\\PrintComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\PrintComponent\\PrintComponent3D.js": {
            "name": "js\\Components\\PrintComponent\\PrintComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\RemoteControlComponent\\RemoteControlComponent3D.js": {
            "name": "js\\Components\\RemoteControlComponent\\RemoteControlComponent3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseComponent2D.js": {
            "name": "js\\Components\\BaseComponent2D.js",
            "modules": {},
            "classes": {
                "BaseComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseComponent3D.js": {
            "name": "js\\Components\\BaseComponent3D.js",
            "modules": {},
            "classes": {
                "BaseComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseEditionComponent.js": {
            "name": "js\\Components\\BaseEditionComponent.js",
            "modules": {},
            "classes": {
                "BaseEditionComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\BaseStructure.js": {
            "name": "js\\Components\\BaseStructure.js",
            "modules": {},
            "classes": {
                "BaseStructure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Components\\GeneralOptionComponent2D.js": {
            "name": "js\\Components\\GeneralOptionComponent2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Floor\\2D.js": {
            "name": "js\\Core\\Api\\Floor\\2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js": {
            "name": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "modules": {},
            "classes": {
                "GraphComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js": {
            "name": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "modules": {},
            "classes": {
                "GraphComponent3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\examples\\Room\\RoomExampleComponent.js": {
            "name": "js\\Core\\Api\\examples\\Room\\RoomExampleComponent.js",
            "modules": {},
            "classes": {
                "RoomExampleComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Api.js": {
            "name": "js\\Core\\Api\\Api.js",
            "modules": {},
            "classes": {
                "API": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\ApiFriendlyComponent.js": {
            "name": "js\\Core\\Api\\ApiFriendlyComponent.js",
            "modules": {},
            "classes": {
                "PerformanceComponent2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\ApiHistoryComponent.js": {
            "name": "js\\Core\\Api\\ApiHistoryComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\ApiOvertureComponent.js": {
            "name": "js\\Core\\Api\\ApiOvertureComponent.js",
            "modules": {},
            "classes": {
                "ApiOvertureComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\CraterComponent.js": {
            "name": "js\\Core\\Api\\CraterComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\CraterMenuComponent.js": {
            "name": "js\\Core\\Api\\CraterMenuComponent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\DataBundleComponent.js": {
            "name": "js\\Core\\Api\\DataBundleComponent.js",
            "modules": {},
            "classes": {
                "DataBundleComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\Menu.js": {
            "name": "js\\Core\\Api\\Menu.js",
            "modules": {},
            "classes": {
                "Menu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Api\\RoomEditorComponent.js": {
            "name": "js\\Core\\Api\\RoomEditorComponent.js",
            "modules": {},
            "classes": {
                "RoomEditorComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Cameras\\FirstPersonCamera.js": {
            "name": "js\\Core\\Cameras\\FirstPersonCamera.js",
            "modules": {},
            "classes": {
                "FirstPersonCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Cameras\\OrbitCamera.js": {
            "name": "js\\Core\\Cameras\\OrbitCamera.js",
            "modules": {},
            "classes": {
                "OrbitCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Input\\KeyboardManager.js": {
            "name": "js\\Core\\Input\\KeyboardManager.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "wnp.Keys": 1,
                "wnp.KeyboardManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Input\\PointerManager.js": {
            "name": "js\\Core\\Input\\PointerManager.js",
            "modules": {},
            "classes": {
                "wnp.PointerManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Input\\TouchManager.js": {
            "name": "js\\Core\\Input\\TouchManager.js",
            "modules": {},
            "classes": {
                "wnp.TouchManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials\\Glass.js": {
            "name": "js\\Core\\Materials\\Glass.js",
            "modules": {},
            "classes": {
                "wnp.GlassMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Leather.js": {
            "name": "js\\Core\\Materials\\Leather.js",
            "modules": {},
            "classes": {
                "wnp.LeatherMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Matt.js": {
            "name": "js\\Core\\Materials\\Matt.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Metal.js": {
            "name": "js\\Core\\Materials\\Metal.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Plastic.js": {
            "name": "js\\Core\\Materials\\Plastic.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Sample.js": {
            "name": "js\\Core\\Materials\\Sample.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Textured.js": {
            "name": "js\\Core\\Materials\\Textured.js",
            "modules": {},
            "classes": {
                "wnp.TexturedMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Tile.js": {
            "name": "js\\Core\\Materials\\Tile.js",
            "modules": {},
            "classes": {
                "wnp.TileMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\White.js": {
            "name": "js\\Core\\Materials\\White.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Materials\\Wood.js": {
            "name": "js\\Core\\Materials\\Wood.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\UI\\AboutWindow.js": {
            "name": "js\\Core\\UI\\AboutWindow.js",
            "modules": {
                "UI": 1
            },
            "classes": {
                "wnp.UI.AboutWindow": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\BackgroundPopup.js": {
            "name": "js\\Core\\UI\\BackgroundPopup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\ColorPopup.js": {
            "name": "js\\Core\\UI\\ColorPopup.js",
            "modules": {},
            "classes": {
                "wnp.UI.Popup": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\ContextMenu.js": {
            "name": "js\\Core\\UI\\ContextMenu.js",
            "modules": {},
            "classes": {
                "wnp.UI.ContextMenu": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\FormBuilder.js": {
            "name": "js\\Core\\UI\\FormBuilder.js",
            "modules": {},
            "classes": {
                "wnp.UI.FormBuilder": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\Frame.js": {
            "name": "js\\Core\\UI\\Frame.js",
            "modules": {},
            "classes": {
                "wnp.UI.Frame": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\HelpBubble.js": {
            "name": "js\\Core\\UI\\HelpBubble.js",
            "modules": {},
            "classes": {
                "wnp.UI.HelpBubble": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\HelpBubbleManager.js": {
            "name": "js\\Core\\UI\\HelpBubbleManager.js",
            "modules": {},
            "classes": {
                "wnp.UI.HelpBubbleManager": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\IFrame.js": {
            "name": "js\\Core\\UI\\IFrame.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\UI\\LanguageSelector.js": {
            "name": "js\\Core\\UI\\LanguageSelector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\UI\\MessageBox.js": {
            "name": "js\\Core\\UI\\MessageBox.js",
            "modules": {},
            "classes": {
                "wnp.UI.MessageBox": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\ProductList.js": {
            "name": "js\\Core\\UI\\ProductList.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\RemoteController.js": {
            "name": "js\\Core\\UI\\RemoteController.js",
            "modules": {},
            "classes": {
                "wnp.UI.RemoteController": 1
            },
            "fors": {},
            "namespaces": {
                "wnp.UI": 1
            }
        },
        "js\\Core\\UI\\Window.js": {
            "name": "js\\Core\\UI\\Window.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Widgets\\Elevation.js": {
            "name": "js\\Core\\Widgets\\Elevation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp\nElevation widget for scene objects": 1
            }
        },
        "js\\Core\\Widgets\\Info.js": {
            "name": "js\\Core\\Widgets\\Info.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp\nInfo widget for scene objects": 1
            }
        },
        "js\\Core\\Widgets\\Rotator.js": {
            "name": "js\\Core\\Widgets\\Rotator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp\nRotator widget for scene objects": 1
            }
        },
        "js\\Core\\Assets.js": {
            "name": "js\\Core\\Assets.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "wnp.Assets": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Box3.js": {
            "name": "js\\Core\\Box3.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\CameraFeatures.js": {
            "name": "js\\Core\\CameraFeatures.js",
            "modules": {},
            "classes": {
                "CameraFeatures": 1,
                "AnimationCancelor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\ComponentCollection.js": {
            "name": "js\\Core\\ComponentCollection.js",
            "modules": {},
            "classes": {
                "wnp.ComponentCollection": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Configuration.js": {
            "name": "js\\Core\\Configuration.js",
            "modules": {},
            "classes": {
                "wnp.Configuration": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Constants.js": {
            "name": "js\\Core\\Constants.js",
            "modules": {},
            "classes": {
                "wnp.Constants": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Core.js": {
            "name": "js\\Core\\Core.js",
            "modules": {},
            "classes": {
                "wnp.Core": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\DragControls.js": {
            "name": "js\\Core\\DragControls.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\Engine2D.js": {
            "name": "js\\Core\\Engine2D.js",
            "modules": {},
            "classes": {
                "wnp.Engine2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Engine3D.js": {
            "name": "js\\Core\\Engine3D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Material.js": {
            "name": "js\\Core\\Material.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\Core\\MaterialFactory.js": {
            "name": "js\\Core\\MaterialFactory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Materials.js": {
            "name": "js\\Core\\Materials.js",
            "modules": {},
            "classes": {
                "wnp.MattMaterial": 1,
                "wnp.MetalMaterial": 1,
                "wnp.PlasticMaterial": 1,
                "wnp.WhiteMaterial": 1,
                "wnp.WoodMaterial": 1,
                "wnp.LuxensMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Core\\Structure.js": {
            "name": "js\\Core\\Structure.js",
            "modules": {},
            "classes": {
                "wnp.Structure": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\DummyHelper.js": {
            "name": "js\\Helpers\\DummyHelper.js",
            "modules": {
                "Wanaplan": 1
            },
            "classes": {
                "wnp.Engine3D": 1,
                "wnp.Dummy": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\GeometryHelper.js": {
            "name": "js\\Helpers\\GeometryHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\GlobalHelper.js": {
            "name": "js\\Helpers\\GlobalHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\HTMLHelper.js": {
            "name": "js\\Helpers\\HTMLHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\ObjectHelper.js": {
            "name": "js\\Helpers\\ObjectHelper.js",
            "modules": {},
            "classes": {
                "wnp.AABB": 1,
                "wnp.OBB": 1,
                "wnp.OyBB": 1,
                "wnp.Interval": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\Helpers\\Symbols2D.js": {
            "name": "js\\Helpers\\Symbols2D.js",
            "modules": {},
            "classes": {
                "wnp.Symbols2D": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Helpers\\uuid.js": {
            "name": "js\\Helpers\\uuid.js",
            "modules": {},
            "classes": {
                "wnp.uuid": 1
            },
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\Logger.js": {
            "name": "js\\Logger.js",
            "modules": {},
            "classes": {
                "Logger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\LoopTimer.js": {
            "name": "js\\LoopTimer.js",
            "modules": {},
            "classes": {
                "LoopTimer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\bootstrap.js": {
            "name": "js\\bootstrap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "wnp": 1
            }
        },
        "js\\extensions.js": {
            "name": "js\\extensions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tools\\tests\\functionals\\js\\TestManager.js": {
            "name": "tools\\tests\\functionals\\js\\TestManager.js",
            "modules": {},
            "classes": {
                "TestManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js": {
            "name": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "PhotonUI": {
            "name": "PhotonUI",
            "submodules": {
                "Misc": 1
            },
            "classes": {
                "photonui.Helpers": 1,
                "photonui.Base": 1,
                "photonui.Widget": 1,
                "photonui.FileManager": 1
            },
            "fors": {},
            "namespaces": {
                "photonui": 1
            },
            "tag": "main",
            "file": "injection\\photonui.js",
            "line": 1171,
            "description": "PhotonUI - Javascript Web User Interface.",
            "itemtype": "main"
        },
        "Helpers": {
            "name": "Helpers",
            "submodules": {},
            "classes": {
                "photonui.Helpers": 1,
                "wnp.Symbols2D": 1,
                "wnp.uuid": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "photonui": 1,
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Helpers\\uuid.js",
            "line": 11,
            "description": "PhotonUI - Javascript Web User Interface.",
            "tag": "main",
            "itemtype": "main"
        },
        "Misc": {
            "name": "Misc",
            "submodules": {},
            "classes": {
                "photonui.Widget": 1,
                "photonui.FileManager": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "photonui": 1
            },
            "module": "PhotonUI",
            "namespace": "",
            "file": "injection\\photonui.js",
            "line": 1171,
            "description": "PhotonUI - Javascript Web User Interface."
        },
        "Wanaplan": {
            "name": "Wanaplan",
            "submodules": {
                "Helpers": 1,
                "Component": 1,
                "Programmable": 1,
                "Input": 1,
                "UI": 1,
                "Core": 1
            },
            "classes": {
                "AvatarComponent3D": 1,
                "HistoryComponent": 1,
                "FloorComponent3D": 1,
                "FloorController": 1,
                "FloorStructure": 1,
                "HopperComponent2D": 1,
                "HopperComponent3D": 1,
                "HopperStructure": 1,
                "wnp.Door": 1,
                "wnp.Window": 1,
                "wnp.Garage": 1,
                "wnp.cube": 1,
                "wnp.cylinder": 1,
                "wnp.plane": 1,
                "wnp.Angle": 1,
                "wnp.Asymetric": 1,
                "wnp.Ilot": 1,
                "wnp.Ovoide": 1,
                "wnp.Symetric": 1,
                "wnp.BaseBox": 1,
                "wnp.Base": 1,
                "wnp.Corner": 1,
                "wnp.Dishwasher": 1,
                "wnp.Dressing": 1,
                "wnp.Hob": 1,
                "wnp.Oven": 1,
                "wnp.Sink": 1,
                "wnp.SinkBox": 1,
                "wnp.Square": 1,
                "wnp.Advanced": 1,
                "wnp.Overture": 1,
                "wnp.BabylonImporter": 1,
                "wnp.BabyBed": 1,
                "wnp.Bar": 1,
                "wnp.Basic": 1,
                "wnp.Bath": 1,
                "wnp.BathTub": 1,
                "wnp.Bed": 1,
                "wnp.bedstora": 1,
                "wnp.BenchIkea": 1,
                "wnp.BetsideTable": 1,
                "wnp.BureauTestLarge": 1,
                "wnp.Chair": 1,
                "wnp.chair": 1,
                "wnp.ChairHenriksdal": 1,
                "wnp.chairiva": 1,
                "wnp.ChairKritter": 1,
                "wnp.CheneStoique": 1,
                "wnp.CoffeeTableIkea": 1,
                "wnp.Curtains": 1,
                "wnp.Cushion": 1,
                "wnp.Dishes": 1,
                "wnp.Fence": 1,
                "wnp.FirePlace": 1,
                "wnp.Furniture": 1,
                "wnp.hood": 1,
                "wnp.Kitchen": 1,
                "wnp.Light": 1,
                "wnp.MetalConsole": 1,
                "wnp.OBJImporter": 1,
                "wnp.PhotoFrame": 1,
                "wnp.Programmable": 1,
                "wnp.RoundedTable": 1,
                "wnp.RoundedTableFourFoot": 1,
                "wnp.TableGeneric": 1,
                "wnp.Shower": 1,
                "wnp.Sofa": 1,
                "wnp.sofacromwell": 1,
                "wnp.Stairs": 1,
                "wnp.SpotLamp": 1,
                "wnp.spotMultiple": 1,
                "wnp.Table": 1,
                "wnp.TableBoconcept": 1,
                "wnp.TableModer": 1,
                "wnp.TableOvale": 1,
                "wnp.BureauTest": 1,
                "wnp.TowelDry": 1,
                "wnp.Tv": 1,
                "DecorationComponent": 1,
                "DragComponent3D": 1,
                "EditionComponent3D": 1,
                "ObjectComponent3D": 1,
                "Object": 1,
                "wnp.overtureComponent2D": 1,
                "wnp.overtureComponent3D": 1,
                "wnp.OvertureStructure": 1,
                "Graph": 1,
                "Path": 1,
                "PointComponent2D": 1,
                "PointStructure": 1,
                "RoomComponent2D": 1,
                "RoomComponent3D": 1,
                "RoomHierarchy": 1,
                "RoomStructure": 1,
                "wnp.spiralStairwayStructure": 1,
                "StairwayComponent2D": 1,
                "wnp.stairwayComponent3D": 1,
                "wnp.stairwayStructure": 1,
                "wnp.straightStairwayStructure": 1,
                "subSlopeComponent2D": 1,
                "subSlopeComponent3D": 1,
                "wnp.subSlopeOvertureComponent2D": 1,
                "wnp.SubSlopeOvertureStructure": 1,
                "wnp.subSlopeStructure": 1,
                "CurvedWall": 1,
                "PolygonWall": 1,
                "WallComponent2D": 1,
                "WallComponent3D": 1,
                "WallStructure": 1,
                "wnp.GridComponent2D": 1,
                "wnp.GridComponent3D": 1,
                "wnp.Action": 1,
                "wnp.HistoryEditionComponent": 1,
                "BaseTopMenuComponent2D": 1,
                "ExitComponent": 1,
                "FullscreenComponent": 1,
                "NewComponent": 1,
                "OptionsComponent": 1,
                "ScreenshotMenuComponent": 1,
                "LockComponent": 1,
                "wnp.MagnetismComponent2D": 1,
                "MagnetismComponent3D": 1,
                "MeasureComponent": 1,
                "MobileComponent": 1,
                "MobileInputComponent": 1,
                "PedagoComponent": 1,
                "HardwareScalingComponent3D": 1,
                "PerformanceComponent2D": 1,
                "BaseComponent2D": 1,
                "BaseComponent3D": 1,
                "BaseEditionComponent": 1,
                "BaseStructure": 1,
                "API": 1,
                "GraphComponent2D": 1,
                "GraphComponent3D": 1,
                "RoomExampleComponent": 1,
                "ApiOvertureComponent": 1,
                "DataBundleComponent": 1,
                "Menu": 1,
                "RoomEditorComponent": 1,
                "FirstPersonCamera": 1,
                "OrbitCamera": 1,
                "wnp.Keys": 1,
                "wnp.KeyboardManager": 1,
                "wnp.PointerManager": 1,
                "wnp.TouchManager": 1,
                "wnp.GlassMaterial": 1,
                "wnp.LeatherMaterial": 1,
                "wnp.MattMaterial": 1,
                "wnp.MetalMaterial": 1,
                "wnp.PlasticMaterial": 1,
                "wnp.TexturedMaterial": 1,
                "wnp.TileMaterial": 1,
                "wnp.WhiteMaterial": 1,
                "wnp.WoodMaterial": 1,
                "wnp.UI.AboutWindow": 1,
                "wnp.UI.Popup": 1,
                "wnp.UI.ContextMenu": 1,
                "wnp.UI.FormBuilder": 1,
                "wnp.UI.Frame": 1,
                "wnp.UI.HelpBubble": 1,
                "wnp.UI.HelpBubbleManager": 1,
                "wnp.UI.MessageBox": 1,
                "wnp.UI.RemoteController": 1,
                "wnp.Assets": 1,
                "CameraFeatures": 1,
                "AnimationCancelor": 1,
                "wnp.ComponentCollection": 1,
                "wnp.Configuration": 1,
                "wnp.Constants": 1,
                "wnp.Core": 1,
                "wnp.Engine2D": 1,
                "wnp.Engine3D": 1,
                "wnp.LuxensMaterial": 1,
                "wnp.Structure": 1,
                "wnp.Dummy": 1,
                "wnp.AABB": 1,
                "wnp.OBB": 1,
                "wnp.OyBB": 1,
                "wnp.Interval": 1,
                "wnp.Symbols2D": 1,
                "wnp.uuid": 1,
                "Logger": 1,
                "LoopTimer": 1,
                "TestManager": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "namespaces": {
                "wnp": 1,
                "wnp.UI": 1,
                "wnp\nElevation widget for scene objects": 1,
                "wnp\nInfo widget for scene objects": 1,
                "wnp\nRotator widget for scene objects": 1
            },
            "tag": "module",
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 5,
            "extends": "BaseComponent3D",
            "requires": [
                "LargeHolyCollider",
                "TransformComponent3D\n\nComponent which handle the dragging of object\n  * It expose methods to determine the point pointe by the cursor in the scene",
                "with different behaviors for each\n  * it listen to drag event",
                "determine the object collided",
                "determine the point pointed",
                "apply the position modification"
            ]
        },
        "Component": {
            "name": "Component",
            "submodules": {},
            "classes": {
                "AvatarComponent3D": 1,
                "FloorComponent3D": 1,
                "FloorStructure": 1,
                "HopperComponent2D": 1,
                "HopperComponent3D": 1,
                "HopperStructure": 1,
                "DecorationComponent": 1,
                "EditionComponent3D": 1,
                "ObjectComponent3D": 1,
                "Object": 1,
                "wnp.overtureComponent2D": 1,
                "wnp.overtureComponent3D": 1,
                "wnp.OvertureStructure": 1,
                "Graph": 1,
                "Path": 1,
                "PointComponent2D": 1,
                "PointStructure": 1,
                "RoomComponent2D": 1,
                "RoomComponent3D": 1,
                "RoomHierarchy": 1,
                "RoomStructure": 1,
                "wnp.spiralStairwayStructure": 1,
                "StairwayComponent2D": 1,
                "wnp.stairwayComponent3D": 1,
                "wnp.stairwayStructure": 1,
                "wnp.straightStairwayStructure": 1,
                "subSlopeComponent2D": 1,
                "subSlopeComponent3D": 1,
                "CurvedWall": 1,
                "PolygonWall": 1,
                "WallComponent2D": 1,
                "WallComponent3D": 1,
                "WallStructure": 1,
                "wnp.GridComponent2D": 1,
                "wnp.HistoryEditionComponent": 1,
                "BaseTopMenuComponent2D": 1,
                "ExitComponent": 1,
                "FullscreenComponent": 1,
                "NewComponent": 1,
                "OptionsComponent": 1,
                "ScreenshotMenuComponent": 1,
                "LockComponent": 1,
                "wnp.MagnetismComponent2D": 1,
                "MagnetismComponent3D": 1,
                "MeasureComponent": 1,
                "MobileComponent": 1,
                "MobileInputComponent": 1,
                "PedagoComponent": 1,
                "HardwareScalingComponent3D": 1,
                "PerformanceComponent2D": 1,
                "BaseComponent2D": 1,
                "BaseComponent3D": 1,
                "BaseEditionComponent": 1,
                "BaseStructure": 1,
                "RoomExampleComponent": 1,
                "ApiOvertureComponent": 1,
                "DataBundleComponent": 1,
                "RoomEditorComponent": 1,
                "CameraFeatures": 1,
                "AnimationCancelor": 1
            },
            "fors": {
                "EditionComponent3D": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 404,
            "description": "Composant d'édition de la scène et de ses objets\nIntercepte et peut modifier toutes les interactions avec la scène\nNécessaire dès que la scène est modifiable par l'utilisateur"
        },
        "Programmable": {
            "name": "Programmable",
            "submodules": {},
            "classes": {
                "wnp.Door": 1,
                "wnp.Window": 1,
                "wnp.Garage": 1,
                "wnp.cube": 1,
                "wnp.cylinder": 1,
                "wnp.plane": 1,
                "wnp.Angle": 1,
                "wnp.Asymetric": 1,
                "wnp.Ilot": 1,
                "wnp.Ovoide": 1,
                "wnp.Symetric": 1,
                "wnp.BaseBox": 1,
                "wnp.Base": 1,
                "wnp.Corner": 1,
                "wnp.Dishwasher": 1,
                "wnp.Dressing": 1,
                "wnp.Hob": 1,
                "wnp.Oven": 1,
                "wnp.Sink": 1,
                "wnp.SinkBox": 1,
                "wnp.Square": 1,
                "wnp.Advanced": 1,
                "wnp.Overture": 1,
                "wnp.BabylonImporter": 1,
                "wnp.BabyBed": 1,
                "wnp.Bar": 1,
                "wnp.Basic": 1,
                "wnp.Bath": 1,
                "wnp.BathTub": 1,
                "wnp.Bed": 1,
                "wnp.bedstora": 1,
                "wnp.BenchIkea": 1,
                "wnp.BetsideTable": 1,
                "wnp.BureauTestLarge": 1,
                "wnp.Chair": 1,
                "wnp.chair": 1,
                "wnp.ChairHenriksdal": 1,
                "wnp.chairiva": 1,
                "wnp.ChairKritter": 1,
                "wnp.CheneStoique": 1,
                "wnp.CoffeeTableIkea": 1,
                "wnp.Curtains": 1,
                "wnp.Cushion": 1,
                "wnp.Dishes": 1,
                "wnp.Fence": 1,
                "wnp.FirePlace": 1,
                "wnp.Furniture": 1,
                "wnp.hood": 1,
                "wnp.Kitchen": 1,
                "wnp.Light": 1,
                "wnp.MetalConsole": 1,
                "wnp.OBJImporter": 1,
                "wnp.PhotoFrame": 1,
                "wnp.Programmable": 1,
                "wnp.RoundedTable": 1,
                "wnp.RoundedTableFourFoot": 1,
                "wnp.TableGeneric": 1,
                "wnp.Shower": 1,
                "wnp.Sofa": 1,
                "wnp.sofacromwell": 1,
                "wnp.Stairs": 1,
                "wnp.SpotLamp": 1,
                "wnp.spotMultiple": 1,
                "wnp.Table": 1,
                "wnp.TableBoconcept": 1,
                "wnp.TableModer": 1,
                "wnp.TableOvale": 1,
                "wnp.BureauTest": 1,
                "wnp.TowelDry": 1,
                "wnp.Tv": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Tv.js",
            "line": 11,
            "note": "ce module est pret à être hérité en surchargeant juste des petits bouts :) c'est la base de l'héritage quoi...",
            "description": "Définit un objet 3D porte construit procéduralement."
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "classes": {
                "wnp.Keys": 1,
                "wnp.KeyboardManager": 1,
                "wnp.PointerManager": 1,
                "wnp.TouchManager": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 12,
            "description": "Gestion des entrées clavier.",
            "tag": "main",
            "itemtype": "main"
        },
        "UI": {
            "name": "UI",
            "submodules": {},
            "classes": {
                "wnp.UI.AboutWindow": 1,
                "wnp.UI.Popup": 1,
                "wnp.UI.ContextMenu": 1,
                "wnp.UI.FormBuilder": 1,
                "wnp.UI.Frame": 1,
                "wnp.UI.HelpBubble": 1,
                "wnp.UI.HelpBubbleManager": 1,
                "wnp.UI.MessageBox": 1,
                "wnp.UI.RemoteController": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp.UI": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\UI\\RemoteController.js",
            "line": 13,
            "description": "Création d'un menu contextuel."
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {
                "wnp.MattMaterial": 1,
                "wnp.MetalMaterial": 1,
                "wnp.PlasticMaterial": 1,
                "wnp.WhiteMaterial": 1,
                "wnp.WoodMaterial": 1,
                "wnp.Assets": 1,
                "wnp.Configuration": 1,
                "wnp.Constants": 1,
                "wnp.Core": 1,
                "wnp.Engine2D": 1,
                "wnp.LuxensMaterial": 1,
                "wnp.Structure": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "wnp": 1
            },
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Structure.js",
            "line": 12,
            "description": "Wanaplan Core.",
            "tag": "main",
            "itemtype": "main"
        }
    },
    "classes": {
        "photonui.Helpers": {
            "name": "photonui.Helpers",
            "shortname": "Helpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PhotonUI",
            "submodule": "Helpers",
            "namespace": "photonui",
            "file": "injection\\photonui.js",
            "line": 276,
            "description": "Helpers.",
            "is_constructor": 1
        },
        "photonui.Base": {
            "name": "photonui.Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PhotonUI",
            "namespace": "photonui",
            "file": "injection\\photonui.js",
            "line": 403,
            "description": "Base class for all PhotonUI Classes.\n\nwEvents:\n\n  * destroy:\n     - description: called before the widget was destroyed.\n     - callback:    function(widget)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "An object that can contain any property that will be set to the class (optional).",
                    "type": "Object"
                }
            ]
        },
        "photonui.Widget": {
            "name": "photonui.Widget",
            "shortname": "Widget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PhotonUI",
            "namespace": "photonui",
            "file": "injection\\photonui.js",
            "line": 730,
            "description": "Base class for all PhotonUI widgets.\n\nwEvents:\n\n  * show:\n     - description: called when the widget is displayed.\n     - callback:    function(widget)\n\n  * hidden:\n     - description: called when the widget is hidden.\n     - callback:    function(widget)",
            "is_constructor": 1,
            "extends": "photonui.Base",
            "params": [
                {
                    "name": "params",
                    "description": "An object that can contain any property of the widget (optional).",
                    "type": "Object"
                }
            ],
            "submodule": "Misc"
        },
        "photonui.FileManager": {
            "name": "photonui.FileManager",
            "shortname": "FileManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui",
            "file": "injection\\photonui.js",
            "line": 1171,
            "description": "Open files from the standard \"FileOpen\" dialog and drag & drop.\n\nwEvents:\n\n  * file-open:\n     - description: File selected or dropped.\n     - callback:    function(widget, fileBlob, x, y)  //(x=y=undefined if using a dialog)",
            "is_constructor": 1,
            "extends": "photonui.Base",
            "params": [
                {
                    "name": "params",
                    "description": "An object that can contain any property of the widget (optional).",
                    "type": "Object"
                }
            ]
        },
        "AvatarComponent3D": {
            "name": "AvatarComponent3D",
            "shortname": "AvatarComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 9,
            "description": "This component is responsible to add a 3D avatar on the scene.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "HistoryComponent": {
            "name": "HistoryComponent",
            "shortname": "HistoryComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 3,
            "description": "Component which handle the undo and redo of the user.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "FloorComponent3D": {
            "name": "FloorComponent3D",
            "shortname": "FloorComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 10,
            "description": "This component is responsive of building the Mesh of an entiere floor from the structure",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "FloorController": {
            "name": "FloorController",
            "shortname": "FloorController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 1,
            "description": "A remote control to interact with the stages composing the scene.",
            "is_constructor": 1
        },
        "FloorStructure": {
            "name": "FloorStructure",
            "shortname": "FloorStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 7,
            "description": "Floor.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "HopperComponent2D": {
            "name": "HopperComponent2D",
            "shortname": "HopperComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 9,
            "description": "Hopper 2D.\nComponant which handle \n- the actions performed in 2D relative to the hopper. Such as .. \n     - adding a hopper\n     - displaying the context menu the hopper\n     - translating the hopper\n     - modifying the shape of the hopper ( moving / adding / removing points )\n- the 2D rendering of the hopper",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "HopperComponent3D": {
            "name": "HopperComponent3D",
            "shortname": "HopperComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 10,
            "description": "Hopper 3D.\nComponant which handle \n- the 3D rendering of the hopper",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "HopperStructure": {
            "name": "HopperStructure",
            "shortname": "HopperStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 7,
            "description": "Hopper's structure.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "wnp.Door": {
            "name": "wnp.Door",
            "shortname": "Door",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Door.js",
            "line": 13,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Window": {
            "name": "wnp.Window",
            "shortname": "Window",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Window.js",
            "line": 14,
            "description": "Définit un objet 3D fenêtre construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Garage": {
            "name": "wnp.Garage",
            "shortname": "Garage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Garage.js",
            "line": 26,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.cube": {
            "name": "wnp.cube",
            "shortname": "cube",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\RoundedCube.js",
            "line": 14,
            "description": "Définit un cube arrondi porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.cylinder": {
            "name": "wnp.cylinder",
            "shortname": "cylinder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cylinder.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.plane": {
            "name": "wnp.plane",
            "shortname": "plane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Plane.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Angle": {
            "name": "wnp.Angle",
            "shortname": "Angle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Angle.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Asymetric": {
            "name": "wnp.Asymetric",
            "shortname": "Asymetric",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Asymetric.js",
            "line": 14,
            "description": "Définit une baignoire basique symetrique",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Ilot": {
            "name": "wnp.Ilot",
            "shortname": "Ilot",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\IlotStori.js",
            "line": 14,
            "description": "Définit une baignoire basique symetrique",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Ovoide": {
            "name": "wnp.Ovoide",
            "shortname": "Ovoide",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Ovoide.js",
            "line": 14,
            "description": "Définit une baignoire basique symetrique",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Symetric": {
            "name": "wnp.Symetric",
            "shortname": "Symetric",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath\\Symetric.js",
            "line": 14,
            "description": "Définit une baignoire basique symetrique",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BaseBox": {
            "name": "wnp.BaseBox",
            "shortname": "BaseBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen\\BaseBox.js",
            "line": 28,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Base": {
            "name": "wnp.Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa\\Base.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Corner": {
            "name": "wnp.Corner",
            "shortname": "Corner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Corner.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Dishwasher": {
            "name": "wnp.Dishwasher",
            "shortname": "Dishwasher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Dishwasher.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Dressing": {
            "name": "wnp.Dressing",
            "shortname": "Dressing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Dressing.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Hob": {
            "name": "wnp.Hob",
            "shortname": "Hob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Hob.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Oven": {
            "name": "wnp.Oven",
            "shortname": "Oven",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\Oven.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Sink": {
            "name": "wnp.Sink",
            "shortname": "Sink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture\\SinkBathroom.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.SinkBox": {
            "name": "wnp.SinkBox",
            "shortname": "SinkBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen\\SinkBox.js",
            "line": 42,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Square": {
            "name": "wnp.Square",
            "shortname": "Square",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Shower\\Square.js",
            "line": 14,
            "description": "Définit une baignoire basique symetrique",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Advanced": {
            "name": "wnp.Advanced",
            "shortname": "Advanced",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa\\Advanced.js",
            "line": 14,
            "description": "Définit un objet 3D porte construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Overture": {
            "name": "wnp.Overture",
            "shortname": "Overture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture.js",
            "line": 11,
            "description": "Définit un objet 3D ouverture construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BabylonImporter": {
            "name": "wnp.BabylonImporter",
            "shortname": "BabylonImporter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\BABYLONImporter.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BabyBed": {
            "name": "wnp.BabyBed",
            "shortname": "BabyBed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\BabyBed.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Bar": {
            "name": "wnp.Bar",
            "shortname": "Bar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Bar.js",
            "line": 24,
            "description": "Définit un objet 3D bar, construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Basic": {
            "name": "wnp.Basic",
            "shortname": "Basic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Bath": {
            "name": "wnp.Bath",
            "shortname": "Bath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Bath.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BathTub": {
            "name": "wnp.BathTub",
            "shortname": "BathTub",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\GenericTub.js",
            "line": 10,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Bed": {
            "name": "wnp.Bed",
            "shortname": "Bed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Bed.js",
            "line": 10,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.bedstora": {
            "name": "wnp.bedstora",
            "shortname": "bedstora",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\BedStora.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BenchIkea": {
            "name": "wnp.BenchIkea",
            "shortname": "BenchIkea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\BenchIkea.js",
            "line": 11,
            "description": "Définit un objet 3D banc construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur princsipal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BetsideTable": {
            "name": "wnp.BetsideTable",
            "shortname": "BetsideTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\BetsideTable.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BureauTestLarge": {
            "name": "wnp.BureauTestLarge",
            "shortname": "BureauTestLarge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\BureauTestLarge.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur princsipal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Chair": {
            "name": "wnp.Chair",
            "shortname": "Chair",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Chair.js",
            "line": 25,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.chair": {
            "name": "wnp.chair",
            "shortname": "chair",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairGeneric.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.ChairHenriksdal": {
            "name": "wnp.ChairHenriksdal",
            "shortname": "ChairHenriksdal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairHenriksdal.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.chairiva": {
            "name": "wnp.chairiva",
            "shortname": "chairiva",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairIvar.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "constructo": "",
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.ChairKritter": {
            "name": "wnp.ChairKritter",
            "shortname": "ChairKritter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\ChairKritter.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.CheneStoique": {
            "name": "wnp.CheneStoique",
            "shortname": "CheneStoique",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\CheneStoique.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.CoffeeTableIkea": {
            "name": "wnp.CoffeeTableIkea",
            "shortname": "CoffeeTableIkea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\CoffeeTableIkea.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Curtains": {
            "name": "wnp.Curtains",
            "shortname": "Curtains",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Curtains.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Cushion": {
            "name": "wnp.Cushion",
            "shortname": "Cushion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Cushion.js",
            "line": 14,
            "description": "Définit un coussin",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Dishes": {
            "name": "wnp.Dishes",
            "shortname": "Dishes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Dishes.js",
            "line": 25,
            "description": "Un set de Vaisselle",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Fence": {
            "name": "wnp.Fence",
            "shortname": "Fence",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Fence.js",
            "line": 11,
            "description": "Définit un objet barriere construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.FirePlace": {
            "name": "wnp.FirePlace",
            "shortname": "FirePlace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\FirePlace.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Furniture": {
            "name": "wnp.Furniture",
            "shortname": "Furniture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Furniture.js",
            "line": 12,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.hood": {
            "name": "wnp.hood",
            "shortname": "hood",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Hood.js",
            "line": 12,
            "description": "Définit un objet 3D lumière construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Kitchen": {
            "name": "wnp.Kitchen",
            "shortname": "Kitchen",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Kitchen.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Light": {
            "name": "wnp.Light",
            "shortname": "Light",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Light.js",
            "line": 12,
            "description": "Définit un objet 3D lumière construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.MetalConsole": {
            "name": "wnp.MetalConsole",
            "shortname": "MetalConsole",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\MetalConsole.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.OBJImporter": {
            "name": "wnp.OBJImporter",
            "shortname": "OBJImporter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\OBJImporter.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.PhotoFrame": {
            "name": "wnp.PhotoFrame",
            "shortname": "PhotoFrame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\PhotoFrame.js",
            "line": 10,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Programmable": {
            "name": "wnp.Programmable",
            "shortname": "Programmable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 11,
            "description": "Création d'un objet 3D programmable procédural.",
            "is_constructor": 1
        },
        "wnp.RoundedTable": {
            "name": "wnp.RoundedTable",
            "shortname": "RoundedTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedTable.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.RoundedTableFourFoot": {
            "name": "wnp.RoundedTableFourFoot",
            "shortname": "RoundedTableFourFoot",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\RoundedTableFourFoot.js",
            "line": 25,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.TableGeneric": {
            "name": "wnp.TableGeneric",
            "shortname": "TableGeneric",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\TableGeneric.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Shower": {
            "name": "wnp.Shower",
            "shortname": "Shower",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Shower.js",
            "line": 13,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Sofa": {
            "name": "wnp.Sofa",
            "shortname": "Sofa",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Sofa.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.sofacromwell": {
            "name": "wnp.sofacromwell",
            "shortname": "sofacromwell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\SofaCromwell.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Stairs": {
            "name": "wnp.Stairs",
            "shortname": "Stairs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Stairs.js",
            "line": 11,
            "description": "Définit un objet 3D escalier construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.SpotLamp": {
            "name": "wnp.SpotLamp",
            "shortname": "SpotLamp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\SpotLamp.js",
            "line": 25,
            "description": "Définit un spot programmable à base d'un modèle DAE",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.spotMultiple": {
            "name": "wnp.spotMultiple",
            "shortname": "spotMultiple",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\SpotMultiple.js",
            "line": 11,
            "description": "Définit un spot à multiples spots.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Table": {
            "name": "wnp.Table",
            "shortname": "Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Table.js",
            "line": 25,
            "description": "Définit un objet 3D table construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.TableBoconcept": {
            "name": "wnp.TableBoconcept",
            "shortname": "TableBoconcept",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\TableBoconcept.js",
            "line": 11,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.TableModer": {
            "name": "wnp.TableModer",
            "shortname": "TableModer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\TableModer.js",
            "line": 12,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramétres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.TableOvale": {
            "name": "wnp.TableOvale",
            "shortname": "TableOvale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\TableOvale.js",
            "line": 23,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.BureauTest": {
            "name": "wnp.BureauTest",
            "shortname": "BureauTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\TableUtby.js",
            "line": 25,
            "description": "Définit un objet 3D chaise construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.TowelDry": {
            "name": "wnp.TowelDry",
            "shortname": "TowelDry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\TowelDry.js",
            "line": 12,
            "description": "Définit un objet 3D lumière construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Tv": {
            "name": "wnp.Tv",
            "shortname": "Tv",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Tv.js",
            "line": 11,
            "description": "Définit un objet 3D basique (cube sphere etc) construit procéduralement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Le",
                    "description": "moteur principal.",
                    "type": "wnp.Core"
                },
                {
                    "name": "Des",
                    "description": "paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "DecorationComponent": {
            "name": "DecorationComponent",
            "shortname": "DecorationComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 25,
            "description": "This component manage the decoration of all the object on the scene.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The 3D motor.",
                    "type": "wnp.Core"
                }
            ]
        },
        "DragComponent3D": {
            "name": "DragComponent3D",
            "shortname": "DragComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D"
        },
        "EditionComponent3D": {
            "name": "EditionComponent3D",
            "shortname": "EditionComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 29,
            "description": "Composant chargé de l'édition des objets 3D sur la scène.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Le moteur principal.",
                    "type": "wnp.Core"
                }
            ]
        },
        "ObjectComponent3D": {
            "name": "ObjectComponent3D",
            "shortname": "ObjectComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 18,
            "description": "Composant chargé de gérer l'ajout d'objet 3D sur la scène.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Le moteur principal.",
                    "type": "wnp.Core"
                }
            ]
        },
        "Object": {
            "name": "Object",
            "shortname": "Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 9,
            "description": "Structure d'un objet utilisé sur la scène.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Un",
                    "description": "objet de paramètres de configuration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.overtureComponent2D": {
            "name": "wnp.overtureComponent2D",
            "shortname": "overtureComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 8,
            "description": "Overture component 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "wnp.overtureComponent3D": {
            "name": "wnp.overtureComponent3D",
            "shortname": "overtureComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 11,
            "description": "Ouverture Component 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "wnp.OvertureStructure": {
            "name": "wnp.OvertureStructure",
            "shortname": "OvertureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 8,
            "description": "Ouverture structure.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "Graph": {
            "name": "Graph",
            "shortname": "Graph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\Graph.js",
            "line": 7,
            "description": "Graphes binaires",
            "is_constructor": 1
        },
        "Path": {
            "name": "Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\Path.js",
            "line": 7,
            "description": "Chemins de points",
            "is_constructor": 1,
            "deprecated": true
        },
        "PointComponent2D": {
            "name": "PointComponent2D",
            "shortname": "PointComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 7,
            "description": "Point 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "PointStructure": {
            "name": "PointStructure",
            "shortname": "PointStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 7,
            "description": "Point.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "RoomComponent2D": {
            "name": "RoomComponent2D",
            "shortname": "RoomComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 7,
            "description": "Rooms in 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "RoomComponent3D": {
            "name": "RoomComponent3D",
            "shortname": "RoomComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 6,
            "description": "This component handles rooms in the 3D context.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "RoomHierarchy": {
            "name": "RoomHierarchy",
            "shortname": "RoomHierarchy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomHierarchy.js",
            "line": 7,
            "description": "Room Hierarchy tree.",
            "is_constructor": 1
        },
        "RoomStructure": {
            "name": "RoomStructure",
            "shortname": "RoomStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 9,
            "description": "A room object.\nMore info can be found in the ![Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Rooms).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "wnp.spiralStairwayStructure": {
            "name": "wnp.spiralStairwayStructure",
            "shortname": "spiralStairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 10,
            "description": "Stairway structure for the spiral stairway.",
            "is_constructor": 1,
            "extends": "wnp.stairwayStructure"
        },
        "StairwayComponent2D": {
            "name": "StairwayComponent2D",
            "shortname": "StairwayComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 12,
            "description": "Stairway Component 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "wnp.stairwayComponent3D": {
            "name": "wnp.stairwayComponent3D",
            "shortname": "stairwayComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 11,
            "description": "Stairway component 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "wnp.stairwayStructure": {
            "name": "wnp.stairwayStructure",
            "shortname": "stairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 11,
            "description": "The structure of a stairway.",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "wnp.straightStairwayStructure": {
            "name": "wnp.straightStairwayStructure",
            "shortname": "straightStairwayStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 9,
            "description": "Stairway structure for the straight stairway.",
            "is_constructor": 1,
            "extends": "wnp.stairwayStructure"
        },
        "subSlopeComponent2D": {
            "name": "subSlopeComponent2D",
            "shortname": "subSlopeComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 9,
            "description": "Creates and draws subslopes in 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D\n{wnp.subSlopeStructure} subSlopes Array of subslopes structure."
        },
        "subSlopeComponent3D": {
            "name": "subSlopeComponent3D",
            "shortname": "subSlopeComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 10,
            "description": "Creates and draws subslopes in 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "wnp.subSlopeOvertureComponent2D": {
            "name": "wnp.subSlopeOvertureComponent2D",
            "shortname": "subSlopeOvertureComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 8,
            "description": "SubSlopeOuverture 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "wnp.SubSlopeOvertureStructure": {
            "name": "wnp.SubSlopeOvertureStructure",
            "shortname": "SubSlopeOvertureStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 10,
            "description": "The structure of the subslope overture.",
            "is_constructor": 1,
            "extends": "BaseStructure\n{String} type The type of the subslope.\n{Number} width The width of the subslope.\n{Number} height The height of the overture.\n{Number} thickness The thickness of the overture.\n{Number} nbCasement The number of the casement in the overture.\n{boolean} sliding The sliding or not on the overture.\n{} dormerRoof The roof of the dormer.\n{Number} wallThickness The thickness of the wall.\n{} parent The parent of the subslope overture.\n{BABYLON.Vector2} position The position of the overture.\n{} polygon The polygon of the overture."
        },
        "wnp.subSlopeStructure": {
            "name": "wnp.subSlopeStructure",
            "shortname": "subSlopeStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 8,
            "description": "A subslope object.\nMore info can be found in the ![Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Subslopes).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "CurvedWall": {
            "name": "CurvedWall",
            "shortname": "CurvedWall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\CurvedWall.js",
            "line": 7,
            "description": "Mur.",
            "is_constructor": 1,
            "extends": "WallStructure\nCette classe représente les murs standards, formés par un polygone fermé de N points"
        },
        "PolygonWall": {
            "name": "PolygonWall",
            "shortname": "PolygonWall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 7,
            "description": "Mur.",
            "is_constructor": 1,
            "extends": "WallStructure\nCette classe représente les murs standards, formés par un polygone fermé de N points"
        },
        "WallComponent2D": {
            "name": "WallComponent2D",
            "shortname": "WallComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 7,
            "description": "Murs 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "WallComponent3D": {
            "name": "WallComponent3D",
            "shortname": "WallComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 7,
            "description": "Murs 3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "WallStructure": {
            "name": "WallStructure",
            "shortname": "WallStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 7,
            "description": "Base abstract class for walls.\nMore info can be found in the ![Wanaplan Wiki](https://github.com/wanadev/WanaplanAPI/wiki/Walls).",
            "is_constructor": 1,
            "extends": "BaseStructure"
        },
        "wnp.GridComponent2D": {
            "name": "wnp.GridComponent2D",
            "shortname": "GridComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\GridComponent\\GridComponent2D.js",
            "line": 12,
            "description": "Grille 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "wnp.GridComponent3D": {
            "name": "wnp.GridComponent3D",
            "shortname": "GridComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 4,
            "description": "Composant qui gère l'environement (sol et ciel).",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "engine",
                    "description": "L'instance du moteur 3D.",
                    "type": "Plan3D.Engine3D"
                }
            ]
        },
        "wnp.Action": {
            "name": "wnp.Action",
            "shortname": "Action",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 48,
            "description": "Action allow to the user to save in a compact structure the action done before.",
            "is_constructor": 1
        },
        "wnp.HistoryEditionComponent": {
            "name": "wnp.HistoryEditionComponent",
            "shortname": "HistoryEditionComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 10,
            "description": "Component of history for undo and redo function.",
            "is_constructor": 1,
            "extends": "BaseEditionComponent",
            "params": [
                {
                    "name": "core",
                    "description": "The core of Wanaplan.",
                    "type": "wnp.core"
                }
            ]
        },
        "BaseTopMenuComponent2D": {
            "name": "BaseTopMenuComponent2D",
            "shortname": "BaseTopMenuComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 6,
            "description": "A base component 2D to manage top and sub menus.",
            "is_constructor": 1,
            "extends": "{BaseComponent2D}",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "name",
                    "description": "The component's name.",
                    "type": "String"
                }
            ]
        },
        "ExitComponent": {
            "name": "ExitComponent",
            "shortname": "ExitComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 8,
            "description": "This component is responsible to quit the application and redirect the user to an external URL.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "FullscreenComponent": {
            "name": "FullscreenComponent",
            "shortname": "FullscreenComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 6,
            "description": "This component is responsible to add a button in the top menu to toggle fullscreen mode.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "NewComponent": {
            "name": "NewComponent",
            "shortname": "NewComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 8,
            "description": "This component is responsible to add the new plan feature on the application.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "OptionsComponent": {
            "name": "OptionsComponent",
            "shortname": "OptionsComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\OptionsComponent.js",
            "line": 6,
            "description": "This component is responsible to add options in the top menu.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "ScreenshotMenuComponent": {
            "name": "ScreenshotMenuComponent",
            "shortname": "ScreenshotMenuComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\InternalComponents\\ScreenshotMenuComponent.js",
            "line": 6,
            "description": "This component is responsible to add a button in the top menu to take a screenshot.",
            "is_constructor": 1,
            "extends": "BaseTopMenuComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "LockComponent": {
            "name": "LockComponent",
            "shortname": "LockComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 9,
            "description": "This component is responsible to add a lock icon action to lock or unlock draggable objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ],
            "extends": "BaseComponent3D"
        },
        "wnp.MagnetismComponent2D": {
            "name": "wnp.MagnetismComponent2D",
            "shortname": "MagnetismComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp",
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 8,
            "description": "Magnétisme 2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "MagnetismComponent3D": {
            "name": "MagnetismComponent3D",
            "shortname": "MagnetismComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 12,
            "description": "Composant chargé du magnétisme sur la scène 3D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Le moteur principal.",
                    "type": "wnp.Core"
                }
            ]
        },
        "MeasureComponent": {
            "name": "MeasureComponent",
            "shortname": "MeasureComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 7,
            "description": "Mesures en 2D.",
            "is_constructor": 1
        },
        "MobileComponent": {
            "name": "MobileComponent",
            "shortname": "MobileComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 7,
            "description": "This component is responsible to configure wanaplan for mobile device.\nIt adapt graphics, add a mobile stylesheet and remove some unecessary components.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "MobileInputComponent": {
            "name": "MobileInputComponent",
            "shortname": "MobileInputComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 11,
            "description": "This component is responsible to configure the correct input mode for mobile device.\nIt check the user's input method (touch or mouse). If mouse is detected nothing is done and the\ncomponent is removed. Otherwise, touch screen support is enabled.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "PedagoComponent": {
            "name": "PedagoComponent",
            "shortname": "PedagoComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 7,
            "description": "This component is responsible to detect browser capabilities and redirect the user to the adapted page.",
            "is_constructor": 1,
            "extends": "Core",
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "HardwareScalingComponent3D": {
            "name": "HardwareScalingComponent3D",
            "shortname": "HardwareScalingComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 6,
            "description": "This component is responsible to apply and manage hardware scaling on the render canvas.",
            "is_constructor": 1,
            "extends": "BaseComponent3D",
            "params": [
                {
                    "name": "core",
                    "description": "The engine.",
                    "type": "Core"
                }
            ]
        },
        "PerformanceComponent2D": {
            "name": "PerformanceComponent2D",
            "shortname": "PerformanceComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\Api\\ApiFriendlyComponent.js",
            "line": 12,
            "description": "ApiFriendlyComponent.",
            "is_constructor": 1,
            "extends": "BaseComponent2D",
            "params": [
                {
                    "name": "core",
                    "description": "The engine.",
                    "type": "Core"
                }
            ]
        },
        "BaseComponent2D": {
            "name": "BaseComponent2D",
            "shortname": "BaseComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 7,
            "description": "Base class for 2D components",
            "is_constructor": 1,
            "abstract": "",
            "params": [
                {
                    "name": "core",
                    "description": "Core instance",
                    "type": "wnp.Core"
                },
                {
                    "name": "name",
                    "description": "Component name",
                    "type": "String"
                }
            ]
        },
        "BaseComponent3D": {
            "name": "BaseComponent3D",
            "shortname": "BaseComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 7,
            "description": "Class de base pour l'ensemble des composants 3D.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "Instance du Core.",
                    "type": "wnp.Core"
                },
                {
                    "name": "name",
                    "description": "Nom du composant.",
                    "type": "String"
                }
            ]
        },
        "BaseEditionComponent": {
            "name": "BaseEditionComponent",
            "shortname": "BaseEditionComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseEditionComponent.js",
            "line": 7,
            "description": "Class de base pour l'ensemble des composants d'édition",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Nom du composant.",
                    "type": "String"
                }
            ]
        },
        "BaseStructure": {
            "name": "BaseStructure",
            "shortname": "BaseStructure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Components\\BaseStructure.js",
            "line": 9,
            "description": "Base Virtual Class for component's data",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "A generic name for the data type",
                    "type": "String"
                }
            ]
        },
        "API": {
            "name": "API",
            "shortname": "API",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Api\\Api.js",
            "line": 6,
            "description": "API wanaplan",
            "is_constructor": 1
        },
        "GraphComponent2D": {
            "name": "GraphComponent2D",
            "shortname": "GraphComponent2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "line": 5,
            "description": "Graph2D.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "GraphComponent3D": {
            "name": "GraphComponent3D",
            "shortname": "GraphComponent3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 4,
            "description": "Graph3D.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "RoomExampleComponent": {
            "name": "RoomExampleComponent",
            "shortname": "RoomExampleComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\Api\\examples\\Room\\RoomExampleComponent.js",
            "line": 12,
            "description": "This components highlights 3D room meshes in green when hovered.\nIf the user then clicks on a room, the camera zooms on it.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "ApiOvertureComponent": {
            "name": "ApiOvertureComponent",
            "shortname": "ApiOvertureComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\Api\\ApiOvertureComponent.js",
            "line": 8,
            "description": "ApiOvertureComponent.",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "DataBundleComponent": {
            "name": "DataBundleComponent",
            "shortname": "DataBundleComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\Api\\DataBundleComponent.js",
            "line": 10,
            "description": "DataBundleComponent.\nBuilds a bundle of useful technical and commercial data about the plan.\n\n> IMPORTANT : Though most length units are meters (m), vectors' x, y and z are provided in Wanaplan Units.\n> 1 Wanaplan Unit = 1 cm\n> So don't be afraid to see one BABYLON.Vector3 which value is (500, 250, 500)",
            "is_constructor": 1,
            "extends": "BaseComponent2D"
        },
        "Menu": {
            "name": "Menu",
            "shortname": "Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Api\\Menu.js",
            "line": 3,
            "description": "Menu wanaplan",
            "is_constructor": 1
        },
        "RoomEditorComponent": {
            "name": "RoomEditorComponent",
            "shortname": "RoomEditorComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\Api\\RoomEditorComponent.js",
            "line": 12,
            "description": "RoomEditorComponent.",
            "is_constructor": 1,
            "extends": "BaseComponent3D"
        },
        "FirstPersonCamera": {
            "name": "FirstPersonCamera",
            "shortname": "FirstPersonCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Cameras\\FirstPersonCamera.js",
            "line": 9,
            "description": "A first person camera controller which can be used with keyboard. See Babylon.js docs.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name for the camera.",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "The initial position.",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "scene",
                    "description": "The scene where the camera will be attached.",
                    "type": "BABYLON.Scene"
                }
            ]
        },
        "OrbitCamera": {
            "name": "OrbitCamera",
            "shortname": "OrbitCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 9,
            "description": "An orbit camera controller which can be used with mouse or touch. See Babylon.js docs.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name for the camera.",
                    "type": "String"
                },
                {
                    "name": "alpha",
                    "description": "Position on X/Z axis.",
                    "type": "Number"
                },
                {
                    "name": "beta",
                    "description": "Position on Y axis.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The radius of the sphere.",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "The target..",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "scene",
                    "description": "The scene where the camera will be attached.",
                    "type": "BABYLON.Scene"
                }
            ]
        },
        "wnp.Keys": {
            "name": "wnp.Keys",
            "shortname": "Keys",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp",
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 10,
            "description": "Keys constants to use instead of ’keyCode’.",
            "static": 1
        },
        "wnp.KeyboardManager": {
            "name": "wnp.KeyboardManager",
            "shortname": "KeyboardManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp",
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 42,
            "description": "The keyboard manager is responsible to update a dictionary of key states. \nIt can be easily used anywhere in the application",
            "is_constructor": 1
        },
        "wnp.PointerManager": {
            "name": "wnp.PointerManager",
            "shortname": "PointerManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp",
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 12,
            "description": "The pointer manager is an abstraction of `MouseEvent`, `TouchEvent` and `PointerEvent` and is responsible to manage\nall type of 'pointer' input in Wanaplan.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                },
                {
                    "name": "callback",
                    "description": "Function called when an event is intercepted (can be null).",
                    "type": "Function"
                },
                {
                    "name": "domElement",
                    "description": "The DOM element to use for listening events.",
                    "type": "HTMLElement"
                },
                {
                    "name": "param",
                    "description": "(optional) Additional parameters `{ offsets: BABYLON.Vector3(0,0), width: 0, height: 0 }`.",
                    "type": "Object"
                }
            ]
        },
        "wnp.TouchManager": {
            "name": "wnp.TouchManager",
            "shortname": "TouchManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp",
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 12,
            "description": "The touch manager work with touch events and pointer events on mobile devices and bring an event system\nwhich can be used as mouse event.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "domElement",
                    "description": "The targeted DOM element.",
                    "type": "HTMLElement"
                }
            ]
        },
        "wnp.GlassMaterial": {
            "name": "wnp.GlassMaterial",
            "shortname": "wnp.GlassMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Glass.js",
            "line": 5,
            "description": "A material for representing object made with glass.\n\nHave an env map",
            "is_constructor": 1,
            "extends": "wnp.MetalMaterial"
        },
        "wnp.LeatherMaterial": {
            "name": "wnp.LeatherMaterial",
            "shortname": "wnp.LeatherMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Leather.js",
            "line": 5,
            "description": "A material for representing object made with leather.",
            "is_constructor": 1,
            "extends": "wnp.StandardMaterial"
        },
        "wnp.MattMaterial": {
            "name": "wnp.MattMaterial",
            "shortname": "MattMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Materials.js",
            "line": 269,
            "description": "Material matt",
            "is_constructor": 1
        },
        "wnp.MetalMaterial": {
            "name": "wnp.MetalMaterial",
            "shortname": "MetalMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Materials.js",
            "line": 222,
            "description": "Material metal",
            "is_constructor": 1
        },
        "wnp.PlasticMaterial": {
            "name": "wnp.PlasticMaterial",
            "shortname": "PlasticMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Materials.js",
            "line": 167,
            "description": "Material plastique",
            "is_constructor": 1
        },
        "wnp.TexturedMaterial": {
            "name": "wnp.TexturedMaterial",
            "shortname": "wnp.TexturedMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 5,
            "description": "A material for representing object with a texture.",
            "is_constructor": 1,
            "extends": "wnp.StandardMaterial"
        },
        "wnp.TileMaterial": {
            "name": "wnp.TileMaterial",
            "shortname": "wnp.TileMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Core\\Materials\\Tile.js",
            "line": 5,
            "description": "A material for representing object with tiles",
            "is_constructor": 1,
            "extends": "wnp.TexturedMaterial"
        },
        "wnp.WhiteMaterial": {
            "name": "wnp.WhiteMaterial",
            "shortname": "WhiteMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Materials.js",
            "line": 356,
            "description": "Material white",
            "is_constructor": 1
        },
        "wnp.WoodMaterial": {
            "name": "wnp.WoodMaterial",
            "shortname": "WoodMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Materials.js",
            "line": 399,
            "description": "Material Wood",
            "is_constructor": 1
        },
        "wnp.UI.AboutWindow": {
            "name": "wnp.UI.AboutWindow",
            "shortname": "AboutWindow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\AboutWindow.js",
            "line": 15,
            "description": "Création d'un menu contextuel.",
            "is_constructor": 1,
            "extends": "wnp.UI.Frame"
        },
        "wnp.UI.Popup": {
            "name": "wnp.UI.Popup",
            "shortname": "Popup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\ColorPopup.js",
            "line": 19,
            "description": "Création d'un menu contextuel.",
            "is_constructor": 1
        },
        "wnp.UI.ContextMenu": {
            "name": "wnp.UI.ContextMenu",
            "shortname": "ContextMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 16,
            "description": "Création d'un menu contextuel.",
            "is_constructor": 1
        },
        "wnp.UI.FormBuilder": {
            "name": "wnp.UI.FormBuilder",
            "shortname": "FormBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 14,
            "description": "Une fabrique de widget.",
            "is_constructor": 1
        },
        "wnp.UI.Frame": {
            "name": "wnp.UI.Frame",
            "shortname": "Frame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\Frame.js",
            "line": 11,
            "description": "Création d'une nouvelle fenêtre de base.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "`config { autoSize, width, height, minWidth/Height, maxWidth/Height, layout, headerIcon }`",
                    "type": "Object"
                },
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "parentNode",
                    "description": ""
                }
            ]
        },
        "wnp.UI.HelpBubble": {
            "name": "wnp.UI.HelpBubble",
            "shortname": "HelpBubble",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\HelpBubble.js",
            "line": 11,
            "description": "Bulle d'aide.",
            "is_constructor": 1
        },
        "wnp.UI.HelpBubbleManager": {
            "name": "wnp.UI.HelpBubbleManager",
            "shortname": "HelpBubbleManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\HelpBubbleManager.js",
            "line": 11,
            "description": "Gestionnaire de bulle d'aide.",
            "is_constructor": 1
        },
        "wnp.UI.MessageBox": {
            "name": "wnp.UI.MessageBox",
            "shortname": "MessageBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\MessageBox.js",
            "line": 15,
            "description": "Une boite de dialogue permettant d'afficher des message et d'avoir des retours utilisateur.",
            "is_constructor": 1
        },
        "wnp.UI.RemoteController": {
            "name": "wnp.UI.RemoteController",
            "shortname": "RemoteController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI",
            "file": "js\\Core\\UI\\RemoteController.js",
            "line": 13,
            "description": "Une télécommande permettant d'interagir avec les caméras qui compose la scène.",
            "is_constructor": 1
        },
        "wnp.Assets": {
            "name": "wnp.Assets",
            "shortname": "Assets",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Assets.js",
            "line": 9,
            "description": "Collection des ressources utilisés sur le logiciel."
        },
        "CameraFeatures": {
            "name": "CameraFeatures",
            "shortname": "CameraFeatures",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 12,
            "description": "The Camera Features is responsible to add features for camera management.",
            "is_constructor": 1
        },
        "AnimationCancelor": {
            "name": "AnimationCancelor",
            "shortname": "AnimationCancelor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "",
            "file": "js\\Core\\CameraFeatures.js",
            "line": 404,
            "description": "FIXME",
            "is_constructor": 1,
            "params": [
                {
                    "name": "animations",
                    "description": "An array of ’BABYLON.Animation’.",
                    "type": "Array"
                },
                {
                    "name": "target",
                    "description": "The target of the animation.",
                    "type": "BABYLON.Mesh"
                }
            ]
        },
        "wnp.ComponentCollection": {
            "name": "wnp.ComponentCollection",
            "shortname": "ComponentCollection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Core\\ComponentCollection.js",
            "line": 9,
            "description": "An updatable and drawable collection of components. \nIt is usable as an Array because it's extends Array object.",
            "is_constructor": 1,
            "extends": "Array",
            "params": [
                {
                    "name": "core",
                    "description": "An instance of the engine.",
                    "type": "Core"
                }
            ]
        },
        "wnp.Configuration": {
            "name": "wnp.Configuration",
            "shortname": "Configuration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Configuration.js",
            "line": 14,
            "description": "The configuration manager is responsible to save and load user preferences (graphics and more).",
            "is_constructor": 1
        },
        "wnp.Constants": {
            "name": "wnp.Constants",
            "shortname": "Constants",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Constants.js",
            "line": 9,
            "description": "Collection des constantes utilisées sur le logiciel."
        },
        "wnp.Core": {
            "name": "wnp.Core",
            "shortname": "Core",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Core.js",
            "line": 36,
            "description": "The core is the main engine which is responsible to manage the 2D en 3D engine, screen resizing, context switching, etc.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "version",
                    "description": "The version of Wanaplan",
                    "type": "Number"
                },
                {
                    "name": "i18n",
                    "description": "An instance of `I18njs` which contains informations about localization.",
                    "type": "I18njs"
                },
                {
                    "name": "api",
                    "description": "An object which contains informations about the api integration.",
                    "type": "Object"
                }
            ]
        },
        "wnp.Engine2D": {
            "name": "wnp.Engine2D",
            "shortname": "Engine2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Engine2D.js",
            "line": 11,
            "description": "The Engine 2D is responsible to manage all 2D draws.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The DOM element that contain canvas.",
                    "type": "HTMLElement"
                },
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "wnp.Engine3D": {
            "name": "wnp.Engine3D",
            "shortname": "Engine3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Helpers\\DummyHelper.js",
            "line": 14,
            "description": "It's a dummy engine 3D that have the same main functions (addComponents, etc.) but it do nothing.\nIt's used for browser that doesn't support WebGL.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "The",
                    "description": "HTML node for the engine3D.",
                    "type": "HTMLElement"
                }
            ]
        },
        "wnp.LuxensMaterial": {
            "name": "wnp.LuxensMaterial",
            "shortname": "LuxensMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Materials.js",
            "line": 439,
            "description": "Material sans texture, et effet poli faible\nATTENTION: seul les paramètres de couleur comptent pour cette categorie de matériau, le rendu Phong est fixe",
            "is_constructor": 1
        },
        "wnp.Structure": {
            "name": "wnp.Structure",
            "shortname": "Structure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp",
            "file": "js\\Core\\Structure.js",
            "line": 12,
            "description": "Objet de gestion de l'ensemble des éléments de la scènes.",
            "is_constructor": 1
        },
        "wnp.Dummy": {
            "name": "wnp.Dummy",
            "shortname": "Dummy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Helpers\\DummyHelper.js",
            "line": 8,
            "description": "A class that contains dummy objects.",
            "static": 1
        },
        "wnp.AABB": {
            "name": "wnp.AABB",
            "shortname": "AABB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 107,
            "description": "Axis Aligned Bounding Box\n\nin order to keep thing simple and limit space complexity, this class hold minimal mandatory properties",
            "is_constructor": 1,
            "params": [
                {
                    "name": "max",
                    "description": "the point of the box which is the greatest ( in world reference )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "min",
                    "description": "the point of the box which is the smallest ( in world reference )",
                    "type": "BABYLON.Vector3"
                }
            ]
        },
        "wnp.OBB": {
            "name": "wnp.OBB",
            "shortname": "OBB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 212,
            "description": "Oriented Bounding Box\n\nin order to keep thing simple and limit space complexity, this class hold minimal mandatory properties",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dimension",
                    "description": "the vector from the origin to the top corner ( positive vector )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "matrix",
                    "description": "the transormation matrix of the box, should be a rotation combined with a translation",
                    "type": "BABYLON.Matrix"
                }
            ]
        },
        "wnp.OyBB": {
            "name": "wnp.OyBB",
            "shortname": "OyBB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 302,
            "description": "Oriented along Y axis Bounding Box\nsame as OBB but the rotation is only along the Y axis, which save some computations\n\nin order to keep thing simple and limit space complexity, this class hold minimal mandatory properties",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dimension",
                    "description": "the vector from the origin to the top corner ( positive vector )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "matrix",
                    "description": "the transormation matrix of the box, should be a rotationY combined with a translation",
                    "type": "BABYLON.Matrix"
                }
            ]
        },
        "wnp.Interval": {
            "name": "wnp.Interval",
            "shortname": "Interval",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "wnp",
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 1135,
            "description": "One Dimension Interval, can compute operations on intervals such as [ 1 , 2 ] U [ 3 ,4 ] ..",
            "is_constructor": 1
        },
        "wnp.Symbols2D": {
            "name": "wnp.Symbols2D",
            "shortname": "Symbols2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 11,
            "description": "Draw methods for standard 2D symbols",
            "is_constructor": 1,
            "params": [
                {
                    "name": "core",
                    "description": "The main engine.",
                    "type": "Core"
                }
            ]
        },
        "wnp.uuid": {
            "name": "wnp.uuid",
            "shortname": "uuid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp",
            "file": "js\\Helpers\\uuid.js",
            "line": 11,
            "description": "Méthodes de génération d'identifiants uniques conformes\nà la RFC4122 http://www.ietf.org/rfc/rfc4122.txt",
            "is_constructor": 1
        },
        "Logger": {
            "name": "Logger",
            "shortname": "Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\Logger.js",
            "line": 5,
            "description": "This class is dedicated to debugging by providing methods which are active only in debug mode.",
            "static": 1
        },
        "LoopTimer": {
            "name": "LoopTimer",
            "shortname": "LoopTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "js\\LoopTimer.js",
            "line": 8,
            "description": "A timer manager",
            "is_constructor": 1
        },
        "TestManager": {
            "name": "TestManager",
            "shortname": "TestManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Wanaplan",
            "namespace": "",
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 5,
            "description": "This component is responsible to load test case files and execute them.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "injection\\photonui.js",
            "line": 3,
            "description": "../lib/classy.js                                                          *",
            "class": "photonui.Helpers"
        },
        {
            "file": "injection\\photonui.js",
            "line": 7,
            "description": "Classy - classy classes for JavaScript\n\n:copyright: (c) 2011 by Armin Ronacher. \n:license: BSD.",
            "class": "photonui.Helpers"
        },
        {
            "file": "injection\\photonui.js",
            "line": 168,
            "description": "photonui.js                                                               *",
            "class": "photonui.Helpers"
        },
        {
            "file": "injection\\photonui.js",
            "line": 229,
            "description": "helpers.js                                                                *",
            "class": "photonui.Helpers",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 285,
            "description": "Escape HTML.",
            "itemtype": "method",
            "name": "escapeHtml",
            "static": 1,
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "photonui.Helpers",
            "module": "PhotonUI",
            "submodule": "Helpers",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 300,
            "description": "Generate an UUID version 4 (RFC 4122)\n\nFrom:\nhttp://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript",
            "itemtype": "method",
            "name": "uuid4",
            "static": 1,
            "return": {
                "description": "The generated UUID",
                "type": "String"
            },
            "class": "photonui.Helpers",
            "module": "PhotonUI",
            "submodule": "Helpers",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 317,
            "description": "Clean node (remove all children of the node).",
            "itemtype": "method",
            "name": "cleanNode",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "class": "photonui.Helpers",
            "module": "PhotonUI",
            "submodule": "Helpers",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 330,
            "description": "Get the absolute position of an HTML Element.",
            "itemtype": "method",
            "name": "getAbsolutePosition",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "`{x: <Number>, y: <Number>}",
                "type": "Object"
            },
            "class": "photonui.Helpers",
            "module": "PhotonUI",
            "submodule": "Helpers",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 358,
            "description": "base.js                                                                   *",
            "class": "photonui.Helpers",
            "module": "PhotonUI",
            "submodule": "Helpers",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 495,
            "description": "Object containing references javascript events binding (for widget\ninternal use).",
            "itemtype": "property",
            "name": "__events",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 505,
            "description": "Object containing references to registered callbacks.",
            "itemtype": "property",
            "name": "__callbacks",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 523,
            "description": "Destroy the class.",
            "itemtype": "method",
            "name": "destroy",
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 535,
            "description": "Register a callback for any PhotonUI/Widget event (called wEvent).\n\nCallback signature:\n\n    function(Object(Base/Widget) [, arg1 [, arg2 [, ...]]])",
            "itemtype": "method",
            "name": "registerCallback",
            "params": [
                {
                    "name": "id",
                    "description": "An unique id for the callback.",
                    "type": "String"
                },
                {
                    "name": "wEvent",
                    "description": "the PhotonUI/Widget event name.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The value of this (optionnal, default = current widget).",
                    "type": "Object"
                }
            ],
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 559,
            "description": "Remove a registered callback.",
            "itemtype": "method",
            "name": "removeCallback",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the callback.",
                    "type": "String"
                }
            ],
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 577,
            "description": "Force the update of the given properties.",
            "itemtype": "method",
            "name": "_updateProperties",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "properties",
                    "description": "The properties to update.",
                    "type": "Array"
                }
            ],
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 590,
            "description": "Javascript event binding (for internal use).",
            "itemtype": "method",
            "name": "_bindEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "An unique id for the event.",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "The element on which the event will be bind.",
                    "type": "DOMElement"
                },
                {
                    "name": "evName",
                    "description": "The event name (e.g. \"mousemove\", \"click\",...).",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function that will be called when the event occured.",
                    "type": "Function"
                }
            ],
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 613,
            "description": "Unbind javascript event.",
            "itemtype": "method",
            "name": "_unbindEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the event.",
                    "type": "String"
                }
            ],
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 629,
            "description": "Register available wEvent.",
            "itemtype": "method",
            "name": "_registerWEvents",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wEvents",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 645,
            "description": "Call all callbacks for the given wEvent.\n\nNOTE: the first argument passed to the callback is the current widget.\nNOTE²: if the thisArg of the callback is null, this will be binded to the current widget.",
            "itemtype": "method",
            "name": "_callCallbacks",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wEvent",
                    "description": "The widget event.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parametters that will be sent to the callbacks.",
                    "type": "Array"
                }
            ],
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 668,
            "description": "widget.js                                                                 *",
            "class": "photonui.Base",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 797,
            "description": "The unique name of the widget.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "\"widget-\" + photonui.Helpers.uuid4()",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 819,
            "description": "Is the widget visible or hidden.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "default": "true",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 847,
            "description": "Tooltip.",
            "itemtype": "property",
            "name": "tooltip",
            "type": "String",
            "default": "null",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 870,
            "description": "The name of the managed contextual menu (`photonui.PopupWindow().name`).",
            "itemtype": "property",
            "name": "contextMenuName",
            "type": "String",
            "default": "null (= no context menu)",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 887,
            "description": "The managed contextual menu.",
            "itemtype": "property",
            "name": "contextMenu",
            "type": "photonui.PopupWindow",
            "default": "null (= no context menu)",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 907,
            "description": "Layout options.",
            "itemtype": "property",
            "name": "layoutOptions",
            "type": "Object",
            "default": "{}",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 926,
            "description": "Html outer element of the widget (if any).",
            "itemtype": "property",
            "name": "html",
            "type": "HTMLElement",
            "default": "null",
            "readonly": "",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 939,
            "description": "Absolute position of the widget on the page.\n\n`{x: Number, y: Number}`",
            "itemtype": "property",
            "name": "absolutePosition",
            "type": "Object",
            "readonly": "",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 955,
            "description": "Widget width (outer HTML element).",
            "itemtype": "property",
            "name": "offsetWidth",
            "type": "Number",
            "readonly": "",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 969,
            "description": "Widget height (outer HTML element).",
            "itemtype": "property",
            "name": "offsetHeight",
            "type": "Number",
            "readonly": "",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 987,
            "description": "Object containing references to the widget HTML elements",
            "itemtype": "property",
            "name": "__html",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1005,
            "description": "Display the widget (equivalent to widget.visible = true).",
            "itemtype": "method",
            "name": "show",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1014,
            "description": "DHide the widget (equivalent to widget.visible = false).",
            "itemtype": "method",
            "name": "hide",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1023,
            "description": "Destroy the widget.",
            "itemtype": "method",
            "name": "destroy",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1036,
            "description": "Add a class to the outer HTML element of the widget.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "className",
                    "description": "The class to add.",
                    "type": "String"
                }
            ],
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1053,
            "description": "Remove a class from the outer HTML element of the widget.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "The class to remove.",
                    "type": "String"
                }
            ],
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1075,
            "description": "Build the widget HTML.",
            "itemtype": "method",
            "name": "_buildHtml",
            "access": "private",
            "tagname": "",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1091,
            "description": "Called when the context menu should be displayed.",
            "itemtype": "method",
            "name": "__onContextMenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1106,
            "description": "Called when the locale is changed.",
            "itemtype": "method",
            "name": "__onLocaleChanged",
            "access": "private",
            "tagname": "",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1125,
            "description": "misc/filemanager.js                                                       *",
            "class": "photonui.Widget",
            "module": "PhotonUI",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1213,
            "description": "List of the accepted mime types.",
            "itemtype": "property",
            "name": "acceptedMimes",
            "type": "Array",
            "default": "[]",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1231,
            "description": "List of the accepted file extentions.",
            "itemtype": "property",
            "name": "acceptedExts",
            "type": "Array",
            "default": "[]",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1249,
            "description": "Element that accepts file drop (`null` disable d&d support).",
            "itemtype": "property",
            "name": "dropZone",
            "type": "HTMLElement",
            "default": "null",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1286,
            "description": "Allow multiselect in FileOpen dialog.",
            "itemtype": "property",
            "name": "multiselect",
            "type": "Boolean",
            "default": "false",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1314,
            "description": "The file field for opening the file dialog.",
            "itemtype": "property",
            "name": "__fileField",
            "access": "private",
            "tagname": "",
            "type": "HTMLElement",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1332,
            "description": "Open the FileOpen dialog to allow user to browse its HDD for a file.",
            "itemtype": "method",
            "name": "open",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1344,
            "description": "Destroy the class.",
            "itemtype": "method",
            "name": "destroy",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1358,
            "description": "Update accepted mimes/extentions.",
            "itemtype": "method",
            "name": "_updateAccepted",
            "access": "private",
            "tagname": "",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1376,
            "description": "Check file and call callbacks.",
            "itemtype": "method",
            "name": "_openFile",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                },
                {
                    "name": "x",
                    "description": "The x postition of the mouse (d&d only).",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y postition of the mouse (d&d only).",
                    "type": "Number"
                }
            ],
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1418,
            "itemtype": "method",
            "name": "__onFileDropped",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1432,
            "itemtype": "method",
            "name": "__onFileSelected",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "injection\\photonui.js",
            "line": 1446,
            "description": "Called when the locale is changed.",
            "itemtype": "method",
            "name": "__onLocaleChanged",
            "access": "private",
            "tagname": "",
            "class": "photonui.FileManager",
            "module": "PhotonUI",
            "submodule": "Misc",
            "namespace": "photonui"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 58,
            "description": "Méthode callback appelée quand on selectionne un étage.",
            "itemtype": "method",
            "name": "onFloorSelected",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 73,
            "description": "Bind event listeners for updating position, click, etc.",
            "itemtype": "method",
            "name": "startListening",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 87,
            "description": "Unbind event listeners.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 95,
            "description": "Change Avatar's position when a new plan is created.",
            "itemtype": "method",
            "name": "onNewPlanReady",
            "params": [
                {
                    "name": "context",
                    "description": "The current graphics context (2D or 3D).",
                    "type": "String"
                }
            ],
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 107,
            "description": "Change Avatar's visibility.",
            "itemtype": "method",
            "name": "setVisibility",
            "params": [
                {
                    "name": "isVisible",
                    "description": "Use true to set visible and false to set invisible.",
                    "type": "Boolean"
                }
            ],
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\AvatarComponent\\AvatarComponent3D.js",
            "line": 237,
            "description": "Update Avatar's position on each frame.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elapsedTime",
                    "description": "Elapsed time since last update.",
                    "type": "Number"
                }
            ],
            "class": "AvatarComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 99,
            "description": "Enable or disable FXAA post process.",
            "itemtype": "method",
            "name": "toggleFXAA",
            "params": [
                {
                    "name": "cameraIndex",
                    "description": "(optional) The camera index to use. Scene.activeCamera is used by default.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Return true if the post process is enabled, otherwise return false.",
                "type": "Boolean"
            },
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 122,
            "description": "Enable or disable FSAA post process.",
            "itemtype": "method",
            "name": "toggleFSAA",
            "params": [
                {
                    "name": "cameraIndex",
                    "description": "(optional) The camera index to use. Scene.activeCamera is used by default.",
                    "type": "Number"
                },
                {
                    "name": "samplingMode",
                    "description": "(optional) The sampling mode to use (1, 2, 3) Nearest, Bilinear, Trilinear.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Return true if the post process is enabled, otherwise return false.",
                "type": "Boolean"
            },
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 148,
            "description": "Disable all active post process.",
            "itemtype": "method",
            "name": "disableAllPostProcess",
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 162,
            "description": "Méthode callback appelée quand on change de caméra.",
            "itemtype": "method",
            "name": "onCameraMove",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 172,
            "description": "Méthode callback appelée quand on change de caméra.",
            "itemtype": "method",
            "name": "onCameraMove",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 192,
            "description": "Méthode callback appelée quand on change de caméra.",
            "itemtype": "method",
            "name": "onCameraChanged",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CameraComponent\\CameraComponent.js",
            "line": 279,
            "description": "Returns the target object, which the camera is bound to look at",
            "itemtype": "method",
            "name": "getLookAt",
            "return": {
                "description": "A Mesh object the camera looks at.",
                "type": "BABYLON.Mesh"
            },
            "class": "HistoryComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 57,
            "description": "start displaying the handles at every camera move",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 73,
            "description": "stop displaying the handles",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 206,
            "description": "dispose handle specified by the name, or all the handles if name is omitted",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js",
            "line": 277,
            "description": "fill the _availableHandlesobject with true for one handle if the object can be edited along this axis, flase else\nis based in the getPropertyName",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "DimensionConfiguratorComponent3D"
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 1,
            "description": "listen masterReshaper",
            "extends": "BaseComponent3D",
            "requires": [
                "MasterReshaperComponent"
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 104,
            "description": "display the handle when the object is resized, when false the handle will be hided",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 109,
            "description": "display the handle when the object is resized, when false the handle will be hided",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 114,
            "description": "animate the handle when the cursor is hover a face",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 119,
            "description": "display a plan to figure the new position of the dragged face",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 124,
            "description": "display a plan to figure the face when the cursor is over it",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 129,
            "description": "display a plan to figure the old face when it is dragged",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 134,
            "description": "round the object dimension",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 139,
            "description": "debug option",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js",
            "line": 194,
            "description": "return the true bounding box, where position is the center of the box and dimension the dimension of the box",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 1,
            "description": "is responsive of notify UI event to reshaper children\nregister a unique reshaper with a askhand / releasehand mecanism\n\nanswer event thrown by ConfiguratorModComponent",
            "extends": "BaseComponent3D",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 103,
            "description": "a reshaper should call this before being actived,\nif requireHand return true, the reshaper is actived and can edit the object\nelse it can't\n\nthis prevent from having two active reshaper at the same time",
            "itemtype": "method",
            "name": "requireHand",
            "params": [
                {
                    "name": "configurator",
                    "description": "the reshaper which wants to be acived",
                    "type": "Component"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 140,
            "description": "a reshaper should call this for desactivation,",
            "itemtype": "method",
            "name": "releaseHand",
            "params": [
                {
                    "name": "configurator",
                    "description": "the reshaper which wants to be acived",
                    "type": "Component"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 159,
            "description": "start the reshaper master, and all the reshaper which depends on him",
            "itemtype": "method",
            "name": "start",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js",
            "line": 185,
            "description": "stop the reshaper master, and all the reshaper which depends on him",
            "itemtype": "method",
            "name": "stop",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 106,
            "description": "launchs the animation to focus the camera on the object",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 186,
            "description": "cancel the animation, leave the camera where it is",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js",
            "line": 195,
            "description": "go back to primar camera state",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 1,
            "description": "is responsive of holding the state of the configurator\nstate = idle | animationIn | ready | animationOut\n\nlisten to event that alter this state\nevent cycle follow this pattern : \n\n wnp.request.configurator.start\n           |\n wnp.engine3d.configurator.animationIn.begin\n           |\n wnp.engine3d.configurator.animationIn.end\n           |\n wnp.engine3d.configurator.start\n           |\n           |\n wnp.request.configurator.stop\n           |\n wnp.engine3d.configurator.stop\n           |\n wnp.engine3d.configurator.animationOut.begin\n           |\n wnp.engine3d.configurator.animationOut.end\n           |\n           v\n\n if the animation component is not present, this component simulate the animationIn|Out event to ensure consistency with others components\n\n\n is also responsive of inhibe actions that should not be performed in configurator mode",
            "extends": "BaseComponent3D",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 135,
            "description": "try to start the configurator,\nif the state is not suitable do nothing\n\nif the animationInOut component is loaded, start the animation, else simulate the animation envent cycle and start immediatly",
            "itemtype": "method",
            "name": "requestStart",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 162,
            "description": "try to stop the configurator,\nif the state is not suitable do nothing\n\nif the animationInOut component is loaded, start the animation, else simulate the animation envent cycle and start immediatly",
            "itemtype": "method",
            "name": "requestStop",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js",
            "line": 186,
            "description": "stop immediatly the configurator,\nstop the currently play animation immediatly is needed\nthe difference with requestStop is that if the configurator is in a animated state, it will cause to stop immediaty the animation",
            "itemtype": "method",
            "name": "cancel",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "line": 100,
            "description": "TODO",
            "itemtype": "method",
            "name": "openEditBox",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "line": 287,
            "description": "TODO",
            "itemtype": "method",
            "name": "getPositionAndRotationMenu",
            "params": [
                {
                    "name": "objectStructure",
                    "description": ""
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js",
            "line": 343,
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 1,
            "description": "/!\\ does not support multimaterial yet",
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 68,
            "description": "apply transparency on walls when they are between the target and the camera",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 73,
            "description": "apply transparency on all the object",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js",
            "line": 78,
            "description": "apply transparency on all the object",
            "class": "FloorComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 43,
            "description": "Called when the context have changed.\nWill trigger the createFloor method if needed",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "context",
                    "description": "\"2D\" or \"3D\".",
                    "type": "String"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 61,
            "description": "Called when the floor is selected (??).",
            "access": "private",
            "tagname": "",
            "itemtype": "event",
            "name": "event",
            "type": "Object",
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 78,
            "description": "Called when the floor need to be deleted.",
            "access": "private",
            "tagname": "",
            "itemtype": "event",
            "name": "event",
            "type": "Object",
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 89,
            "description": "Called when the plan is ready\nWill trash all the structure mesh ( ?? )",
            "access": "private",
            "tagname": "",
            "itemtype": "event",
            "name": "event",
            "type": "Object",
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 109,
            "description": "Delete a floor",
            "itemtype": "method",
            "name": "deleteFloor",
            "params": [
                {
                    "name": "floor",
                    "description": "the structure of the floor.",
                    "type": "Object"
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 126,
            "description": "get the mesh associated to the floor structure",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "floor",
                    "description": "the structure of the floor. If ommited, use the currently selected floor",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "the mesh associated to the floor structure",
                "type": "BABYLON.Mesh"
            },
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 145,
            "description": "Build the floors : \n  - retreive the currently selected floor\n  - delete the floors which are above the currently selected one\n  - rebuild all the floors which are between the start floor ( passed in params ) and the currently selected one",
            "itemtype": "method",
            "name": "createFloor",
            "params": [
                {
                    "name": "start",
                    "description": "The first floor to be built. If ommited, start from the first one ( 0 ).",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorComponent3D.js",
            "line": 189,
            "description": "Build the empty floor Mesh",
            "itemtype": "method",
            "name": "createFloorMesh",
            "params": [
                {
                    "name": "element",
                    "description": "The structure of the floor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the mesh built",
                "type": "BABYLON.Mesh"
            },
            "class": "FloorComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 20,
            "description": "Updates the current floor.",
            "itemtype": "method",
            "name": "update",
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 30,
            "description": "Initializes the controller.",
            "itemtype": "method",
            "name": "initialize",
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 62,
            "description": "Method call after each update of the member of the structure.",
            "itemtype": "method",
            "name": "updateHTML",
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 73,
            "description": "Remove the HTML code for the component.",
            "itemtype": "method",
            "name": "removeHTML",
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 85,
            "description": "Build the HTML code for the component.",
            "itemtype": "method",
            "name": "buildHTML",
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 173,
            "description": "Insert un étage avant un autre.",
            "itemtype": "method",
            "name": "insertFloorBefore",
            "params": [
                {
                    "name": "L'index",
                    "description": "du l'étage à déplacer.",
                    "type": "Number"
                },
                {
                    "name": "L'index",
                    "description": "de l'étage qui sera déplacé.",
                    "type": "Number"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 195,
            "description": "Click on a floor-item for selecting a stage.",
            "itemtype": "method",
            "name": "onItemClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associate to the event.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 207,
            "description": "Show the item of the menu.",
            "itemtype": "method",
            "name": "onItemClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associate to the event.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 231,
            "description": "When the property of a context menu change.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "target",
                    "description": "The object.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The property change.",
                    "type": "Property"
                },
                {
                    "name": "value",
                    "description": "The value of the change property.",
                    "type": "Float"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 259,
            "description": "Click on delete, and delete the stage.",
            "itemtype": "method",
            "name": "onItemDelete",
            "params": [
                {
                    "name": "event",
                    "description": "The associated event.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 295,
            "description": "click on add, begin to add the stage and clone the property selected.",
            "itemtype": "method",
            "name": "onAddItemClick",
            "params": [
                {
                    "name": "The",
                    "description": "object associated with the event.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 352,
            "description": "click on add, begin to add the stage.",
            "itemtype": "method",
            "name": "onAddItemConfirm",
            "params": [
                {
                    "name": "event",
                    "description": "The objet associated with the event.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "The different options set by the user.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 373,
            "description": "Duplicate the current structure with the duplication rules of the stage.\n\noptions[\"walls\"] = true => Keep the wall.\noptions[\"objects\"] = true => Keep the objects.\netc.",
            "itemtype": "method",
            "name": "duplicateForFloor",
            "params": [
                {
                    "name": "options",
                    "description": "The different options set by the user.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 453,
            "description": "Function call when a floor is selected.",
            "itemtype": "method",
            "name": "onSelectFloor",
            "params": [
                {
                    "name": "event",
                    "description": "The id of the selected structure.",
                    "type": "Object"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorController.js",
            "line": 465,
            "description": "Select a floor in the floor controller.",
            "itemtype": "method",
            "name": "selectFloor",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the selected stage.",
                    "type": "Int"
                }
            ],
            "class": "FloorController",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 18,
            "description": "Floor label, chosen by the user.",
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 26,
            "description": "Array of PointStructure referenced in this floor.",
            "itemtype": "property",
            "name": "points",
            "type": "{PointStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 34,
            "description": "Array of WallStructure referenced in this floor.",
            "itemtype": "property",
            "name": "walls",
            "type": "{WallStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 42,
            "description": "Array of OvertureStructure referenced in this floor.",
            "itemtype": "property",
            "name": "overtures",
            "type": "{OvertureStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 50,
            "description": "Array of RoomStructure referenced in this floor. These rooms are internal, see Wiki for more info",
            "itemtype": "property",
            "name": "internalRooms",
            "type": "{RoomStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 58,
            "description": "Array of RoomStructure referenced in this floor. These rooms are external, see Wiki for more info",
            "itemtype": "property",
            "name": "externalRooms",
            "type": "{RoomStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 66,
            "description": "Array of ObjectStrcture referenced in this floor.",
            "itemtype": "property",
            "name": "objects",
            "type": "{ObjectStrcture[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 74,
            "description": "Array of StairwayStructure referenced in this floor.",
            "itemtype": "property",
            "name": "stairways",
            "type": "{StairwayStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 82,
            "description": "Array of HopperStructure referenced in this floor.",
            "itemtype": "property",
            "name": "hoppers",
            "type": "{HopperStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 90,
            "description": "Array of SubSlopeStructure referenced in this floor.",
            "itemtype": "property",
            "name": "subslopes",
            "type": "{SubSlopeStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 98,
            "description": "Array of SubSlopeOvertureStructure referenced in this floor.",
            "itemtype": "property",
            "name": "subSlopeOverture",
            "type": "{SubSlopeOvertureStructure[]}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 106,
            "description": "Floor elevation. Represents the \"y\" coordinate of the bottom of the floor.",
            "itemtype": "property",
            "name": "elevation",
            "default": "0",
            "type": "{Number}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 115,
            "description": "Floor height. Represents the height difference between the top (ceiling) and the bottom of the floor.",
            "itemtype": "property",
            "name": "height",
            "default": "250",
            "type": "{Number}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 124,
            "description": "This flag signals if the geometry of the floor has been dirtied by some component.\nComponents should read this with ```isDirty()``` and update their logic if the floor is dirtied.",
            "itemtype": "property",
            "name": "dirtyGeometry",
            "type": "{Boolean}",
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 148,
            "description": "Serialize the object.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "String resulting of the serialization of the object.",
                "type": "String"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 177,
            "description": "Unserialization of the object.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "String made by the serialization.",
                    "type": "String"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 203,
            "description": "Update the wall parent after the serialization.",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure contain the instances.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 240,
            "description": "Insert an element into the structure.",
            "itemtype": "method",
            "name": "insertElement",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the object (ex: \"walls\", \"points\",...)",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element to insert.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 266,
            "description": "Return a category.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "category",
                    "description": "Category of an element (ex: \"walls\", \"points\",...)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of element of the category.",
                "type": "Array"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 282,
            "description": "Return an indexed element in the given category.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "id",
                    "description": "Id of the element.",
                    "type": "Int"
                },
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": ",optional",
                    "description": "identifier Id of the search (id, name, etc...).",
                    "type": "String"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 303,
            "description": "Delete an element in the structure.",
            "itemtype": "method",
            "name": "removeElement",
            "params": [
                {
                    "name": "category",
                    "description": "Category of the element (ex: \"walls\", \"points\",...).",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element to insert.",
                    "type": "BaseStructure"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 329,
            "description": "Replace all the element of a category.",
            "itemtype": "method",
            "name": "removeElements",
            "params": [
                {
                    "name": "category",
                    "description": "Catégorie de l'élement (ex: \"walls\", \"points\",...)",
                    "type": "String"
                },
                {
                    "name": "",
                    "description": "elements Array d'éléments à insérer.",
                    "type": "BaseStructure",
                    "optional": true
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 341,
            "description": "Clone the current object.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "FloorStructure"
            },
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Floor\\FloorStructure.js",
            "line": 359,
            "description": "Reindex a collection.",
            "itemtype": "method",
            "name": "reindexElements",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection.",
                    "type": "Collection"
                },
                {
                    "name": "start",
                    "description": "The start index.",
                    "type": "Int"
                }
            ],
            "class": "FloorStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 168,
            "description": "Compute all the structure's hoppers.",
            "itemtype": "method",
            "name": "compute",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 180,
            "description": "Compute one hopper. Check the hoppe consistency and delete it if the hopper is no longer valid.\n - merge together vertices which are close enought\n - remove the hopper if has less than 3 vertices ( invalid hopper )",
            "itemtype": "method",
            "name": "computeHopper",
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 339,
            "description": "Draw the hopper guide. Display visual information on the hopper, depending on the context\nBasically, it indicates whever the user is over a hopper element ( the whole hopper, a side , a point )",
            "itemtype": "method",
            "name": "drawTarget",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper's structure",
                    "type": "HopperStructure"
                },
                {
                    "name": "ctx",
                    "description": "The 2d context",
                    "type": "Context2D"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level of the canvas",
                    "type": "Number"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 359,
            "description": "Draw the hopper.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper's structure",
                    "type": "HopperStructure"
                },
                {
                    "name": "ctx",
                    "description": "The 2d context",
                    "type": "Context2D"
                },
                {
                    "name": "translation",
                    "description": "The translation  of the canvas",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level of the canvas",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "True is the hopper is curretly selected, false else",
                    "type": "Boolean"
                }
            ],
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 413,
            "description": "return the roomStructure of the room where the hopper is.\nWill try to rattach the hopper to a room if hopper.room is not defined.\n\nIf force flag is up, try to rattach the hopper even if it already have hopper.room set",
            "itemtype": "method",
            "name": "getRoom",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper's structure",
                    "type": "HopperStructure"
                },
                {
                    "name": "force",
                    "description": "If set to true, ignore the internal attribute and try to rattach to a room.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The room where the hopper is",
                "type": "RoomStructure"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 441,
            "description": "Test the collision with a point and all the hopper's sides.",
            "itemtype": "method",
            "name": "isPointInHopperSide",
            "params": [
                {
                    "name": "vector",
                    "description": "The point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "hopper",
                    "description": "The hopper's structure",
                    "type": "HopperStructure"
                }
            ],
            "return": {
                "description": "False if the point does not collide with any of the hopper's sides. The index of the side which collide else.",
                "type": "Number|boolean"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent2D.js",
            "line": 463,
            "description": "Test the collision with a point and area defined by the hopper.",
            "itemtype": "method",
            "name": "isPointInHopper",
            "params": [
                {
                    "name": "vector",
                    "description": "The point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "hopper",
                    "description": "The hopper's structure",
                    "type": "HopperStructure"
                }
            ],
            "return": {
                "description": "True if the point collide, false else",
                "type": "Boolean"
            },
            "class": "HopperComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 41,
            "description": "evenement renvoyé par le floorComponent3d une fois que l'object3d correspondant à l'étage est ajouté à la scene",
            "itemtype": "event",
            "name": ":",
            "type": "Scene : la scene demandée, structure: la structure en cours",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 55,
            "description": "Apply the texture to the pointed part of the object.\nFor the hopper the decorable part are the inner shape of the hole and the sticks ( rail-guards )\n\n/!\\ This function in meant to be use in the context of the BABYLON.Mesh and will be used in a strict flow.\nIt's not meant to be used outside this flow and is therefore taged as private.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "decorate",
            "warning": "Cette fonction doit être bindée avec un objet 3D",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 81,
            "description": "merge the composants of a rail-guard",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "mergeGeometries",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 119,
            "description": "Build the mesh that represent the sticks ( rail-guard ) of the hopper. Based on the hopper structure passed in argument.",
            "itemtype": "method",
            "name": "createHopperSticks",
            "params": [
                {
                    "name": "hopper",
                    "description": "The hopper structure on which the sticks building will be based.",
                    "type": "HopperStructure"
                },
                {
                    "name": "scene",
                    "description": "The scene ( mandatory to create a mesh )",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "The mesh which represents the sticks",
                "type": "BABYLON.Mesh"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 207,
            "itemtype": "method",
            "name": "getDefaultMaterials",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "scene",
                    "description": "The scene ( mandatory to create a material )",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "",
                "type": "Array of BABYLON.Material"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 225,
            "itemtype": "method",
            "name": "initMaterials",
            "access": "private",
            "tagname": "",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 240,
            "description": "Build the hopper.\nCarve the hopper into the room floor and add the sticks ( rail-guard )",
            "itemtype": "method",
            "name": "Build",
            "static": 1,
            "params": [
                {
                    "name": "room3d",
                    "description": "The room mesh where the hopper will be applied",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "hopper",
                    "description": "The hopper structure.",
                    "type": "HopperStructure"
                },
                {
                    "name": "height",
                    "description": "The height position from where the hopper will be applied, basically it's either 0 to carve the floor or the room height to carve the ceiling.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "heightM",
                    "description": "The maximal height position of the carving.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "100"
                }
            ],
            "return": {
                "description": "The room mesh with the hopper.",
                "type": "BABYLON.Mesh"
            },
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 289,
            "itemtype": "method",
            "name": "Debug",
            "access": "private",
            "tagname": "",
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js",
            "line": 363,
            "description": "Applique l'ombre à l'objet ainsi que tous ces enfants",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "applyShadow",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object3d"
                }
            ],
            "class": "HopperComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 33,
            "description": "The vertices of the hopper.\nBy default, the hopper is a 100cm large square.\nPoints can be moved, added ( a hopper can have more than 4 verices ), and removed ( while there is still at least 3 vertices )\n\nNote that when we refer to a side, the side k is the edge ( points[ i ] , points[ i+1 ] )",
            "itemtype": "attribute",
            "name": "points",
            "type": "Array of BABYLON.Vector2",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 46,
            "description": "Indicates whether this Widget\nhas been rendered...",
            "itemtype": "attribute",
            "name": "materials",
            "readonly": "",
            "default": "false",
            "type": "Array of ma",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 58,
            "description": "Indicates which side of the hopper should have a guard-rail.\nIs an object with a boolean for each side.\nexample : {\n   0 : false,   // the 0 side have no guard-rail\n   1 : true,    // whereas the 1 side have one\n   ...",
            "itemtype": "attribute",
            "name": "sticks",
            "default": "{ 0:false , 1:false , 2:false , 3:false } // a hopper without guard-rail",
            "type": "{Object}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 73,
            "description": "If the hopper is relative to a stairway, the stairway id ( null else )",
            "itemtype": "attribute",
            "name": "stairwayId",
            "default": "null",
            "type": "{String}",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 83,
            "description": "indicates if the hopper have been modified or if it's the default hopper.",
            "itemtype": "attribute",
            "name": "modified",
            "type": "{Boolean} false if the hopper shape is still the default one, true else",
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 115,
            "description": "Check the consistency of the hopper.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "false is the structure is corrupted, true else",
                "type": "Boolean"
            },
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 138,
            "description": "Remove the hopper.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "the structure from where the hopper must be removed",
                    "type": "FloorStructure"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 148,
            "description": "Insert un point à un emplacement donné.",
            "itemtype": "method",
            "name": "inserPointAt",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "L'emplacement",
                    "description": "dans le tableau où insérer le point.",
                    "type": "Number"
                },
                {
                    "name": "Le",
                    "description": "point à insérer.",
                    "type": "Object"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Hopper\\HopperStructure.js",
            "line": 160,
            "description": "Move the hopper by the translation vector passed in params ( relative move )",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "moveVector",
                    "description": "The translation vector by which the hopper will by moved.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "HopperStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "line": 818,
            "description": "Permet d importer l objet window sur le chien assis",
            "itemtype": "method",
            "name": "importWindow",
            "params": [
                {
                    "name": "object",
                    "description": "qui correspond au chien assis",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "width",
                    "description": "la largeur du chien assis",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "la hauteur du chien assis",
                    "type": "Float"
                },
                {
                    "name": "z",
                    "description": "les coordonnees en hauteur de la fenetre",
                    "type": "Float"
                }
            ],
            "class": "wnp.Window",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Dormer.js",
            "line": 870,
            "description": "Genere l objet 3D",
            "itemtype": "method",
            "name": "getObject3D",
            "params": [
                {
                    "name": "scene",
                    "description": "la scene 3D",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "L'objet 3D",
                "type": "BABYLON.Mesh"
            },
            "class": "wnp.Window",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Aperture\\Velux.js",
            "line": 227,
            "description": "Genere l objet 3D",
            "itemtype": "method",
            "name": "getObject3D",
            "params": [
                {
                    "name": "scene",
                    "description": "la scene 3D",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "L'objet 3D",
                "type": "BABYLON.Mesh"
            },
            "class": "wnp.Window",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cube.js",
            "line": 111,
            "description": "Fonction de décoration générique d'un programmable",
            "itemtype": "method",
            "name": "decorate",
            "warning": "Cette fonction doit être bindée avec un objet 3D",
            "class": "wnp.cube",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cylinder.js",
            "line": 106,
            "description": "Fonction de décoration générique d'un programmable",
            "itemtype": "method",
            "name": "decorate",
            "warning": "Cette fonction doit être bindée avec un objet 3D",
            "class": "wnp.cylinder",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 36,
            "description": "Fonction de décoration générique d'un programmable",
            "itemtype": "method",
            "name": "decorate",
            "warning": "Cette fonction doit être bindée avec un objet 3D",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 58,
            "description": "Fonction d'animation générique d'un programmable",
            "itemtype": "method",
            "name": "animate",
            "warning": "Cette fonction doit être bindée avec un programmable (what the fuck again)",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 68,
            "description": "Importe une mesh DAE dans un programmable",
            "itemtype": "method",
            "name": "importDAE",
            "params": [
                {
                    "name": "callback",
                    "description": "La fonction à appeler quand l'objet est chargé.",
                    "type": "Function"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 79,
            "description": "Importe un mesh au format Babylon dans un programmable. Le fichier babylon doit avoir l'extension .babylon. \nUn fichier .babylon.manifest est aussi requis pour que le chargement fonctionne.",
            "itemtype": "method",
            "name": "importBabylon",
            "params": [
                {
                    "name": "filePath",
                    "description": "Le chemin complet du fichier à charger.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Une fonction callback à appeler quand le chargement est terminée (le modèle est passé en paramètre à la fonction).",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Retourne un mesh contenant tous les meshes contenus dans le fichier chargé.",
                "type": "Babylon.Mesh"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 115,
            "description": "Importe une mesh OBJ dans un programmable",
            "itemtype": "method",
            "name": "importObj",
            "params": [
                {
                    "name": "callback",
                    "description": "La fonction à appeler quand l'objet est chargé.",
                    "type": "Function"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 126,
            "description": "Effectue une fusion de paramètre avec les paramètres par défaut.",
            "itemtype": "method",
            "name": "mergeParams",
            "params": [
                {
                    "name": "Les",
                    "description": "paramètres à fusionner avec l'instance en cours.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 138,
            "description": "Obtient les paramètres par défaut de l'objet.",
            "itemtype": "method",
            "name": "getDefaultParams",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 187,
            "description": "options\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 232,
            "description": "options\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 294,
            "description": "Préparation des materials.",
            "itemtype": "method",
            "name": "prepareMaterials",
            "params": [
                {
                    "name": "Un",
                    "description": "objet avec les paramètres par défaut du material.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 306,
            "description": "Applique les ombres sur l'objet passé en paramètre et à tous ses enfants.",
            "itemtype": "method",
            "name": "applyShadow",
            "params": [
                {
                    "name": "L'objet",
                    "description": "qui doit recevoir les ombres.",
                    "type": "THREE.Object3D"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 316,
            "description": "Création d'une instance d'un programmable avec préchargement automatique\nde toute les dépendances d'un objet.",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "Le",
                    "description": "nom du fichier à charger sous la forme Folder.Object.js.",
                    "type": "String"
                },
                {
                    "name": "Les",
                    "description": "paramètres à appliquer à la construction de l'objet.",
                    "type": "Object"
                },
                {
                    "name": "Une",
                    "description": "fonction de callback appelée lorsque le chargement est terminé.",
                    "type": "Function"
                },
                {
                    "name": "Un",
                    "description": "chemin alternatif pour charger un programmable.",
                    "type": "String"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 361,
            "description": "Serialise l'objet.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "Une chaine resultant de la sérialisation de l'objet.",
                "type": "String"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 376,
            "description": "Désérialise l'objet.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "Un objet issu d'une sérialisation.",
                    "type": "String"
                }
            ],
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js",
            "line": 399,
            "description": "Construction de la structure d'un objet.",
            "itemtype": "method",
            "name": "buildStructureObject",
            "return": {
                "description": "object Un objet de structure.",
                "type": "ObjectStructure"
            },
            "class": "wnp.Programmable",
            "module": "Wanaplan",
            "submodule": "Programmable",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 128,
            "description": "Call when the context change",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "context",
                    "description": "The current context : 2D or 3D.",
                    "type": "String"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 157,
            "description": "Method callback call to peint an object with a color.",
            "itemtype": "method",
            "name": "onPaintHandler",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 177,
            "description": "Update the item of the menu with the last color",
            "itemtype": "method",
            "name": "updateLastItemMenu",
            "params": [
                {
                    "name": "item",
                    "description": "The last item.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 201,
            "description": "Method callback call when on a click event to change the material of an object.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "The object associated to the event.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 242,
            "description": "Put a new material on an object.",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "object",
                    "description": "Instance of an object3D BABYLON.Mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "material",
                    "description": "Instance of a material to use on an object.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collisionInfo",
                    "description": "Informations on the collision between the rayon send on a click and the object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 255,
            "description": "Apply a new Material on an object.",
            "itemtype": "method",
            "name": "applyMaterial",
            "params": [
                {
                    "name": "object",
                    "description": "Instance of an object3D BABYLON.Mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "material",
                    "description": "Instance of a material to use on an object.",
                    "type": "BABYLON.Material"
                },
                {
                    "name": "collided",
                    "description": "The collision informations",
                    "type": "Boolean"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 269,
            "description": "Get a material with the good parameter.",
            "itemtype": "method",
            "name": "getMaterial",
            "return": {
                "description": "Return a material Info",
                "type": "MaterialInfo"
            },
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 279,
            "description": "Stop the paint mode by putting all the parameter at null.",
            "itemtype": "method",
            "name": "stopPainMode",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 301,
            "description": "Add an history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 316,
            "description": "Undo the paint by calling the undoFunction of the type action when the ctrl-z is push.",
            "itemtype": "method",
            "name": "undoPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo or redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 327,
            "description": "Redo the paint by calling the undoFunction of the type action when the ctrl-z is push.",
            "itemtype": "method",
            "name": "undoPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo or redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 338,
            "description": "Function call when the undo or redo is done.",
            "itemtype": "method",
            "name": "historyPaint",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the undo or redo.",
                    "type": "Target"
                },
                {
                    "name": "params",
                    "description": "params of the paint.",
                    "type": "Object"
                },
                {
                    "name": "modifiedMaterial",
                    "description": "The material modified.",
                    "type": "wnp.material"
                }
            ],
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DecorationComponent3D.js",
            "line": 352,
            "description": "Create the history for the paint action",
            "itemtype": "method",
            "name": "setupHistory",
            "class": "DecorationComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 15,
            "itemtype": "event",
            "name": "wnp.request.disable-orbit-camera\n\n [out]\n legacy stuff, the orbit camera need to be locked\n\n throw when \n    * an object start to be dragged",
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 26,
            "itemtype": "event",
            "name": "wnp.request.enable-orbit-camera\n \n [out]\n legacy stuff, the orbit camera need to be unlocked\n\n throw when \n    * an object is no longer dragged",
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 37,
            "itemtype": "event",
            "name": "wnp.engine3D.drag-start\n\n [in]\n the user start dragging it's cursor, /!\\ it's just about the cursor, it's not necessary an object which dragged\n\n when capted do\n     * test is an object is below the cursor, if so start moving it",
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 48,
            "itemtype": "event",
            "name": "wnp.engine3D.dragging\n\n [in]\n the user is dragging it's cursor, /!\\ it's just about the cursor, it's not necessary an object which dragged\n\n when capted do\n     * if an object was below the cursor when the user start dragging, determine the new position of the object and apply it with transformComponent3D",
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 59,
            "itemtype": "event",
            "name": "wnp.engine3D.drag-end\n\n [in]\n the user stop dragging it's cursor\n\n when capted do\n     * if an object was dragged, stop to drag it, notify that the transformation is over",
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 137,
            "description": "giving a ray, and some params about the object, determine the point pointed by the ray in the scene, considering the first object that the ray collide\n \n use the lhc to determine the first object on the path",
            "itemtype": "method",
            "name": "resolveProjectionConstraint",
            "params": [
                {
                    "name": "objectBox",
                    "description": "the object, as a Oriented along y axis Bounding Box",
                    "type": "OyBB"
                },
                {
                    "name": "ray_",
                    "description": "the ray which will determine the new position of the object box",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "flyY",
                    "description": "if false, the object is not flying, else the elevation where the object is flying",
                    "type": "Boolean or Number"
                },
                {
                    "name": "grab",
                    "description": "the vetor which comes from the center of the box to the point where it is grabbed",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "floorY",
                    "description": "elevation of the floor",
                    "type": "Number"
                },
                {
                    "name": "climbable",
                    "description": "[optional] a function which returns true if the object passed in params is climbable, false else, if omitted all objects are considered climbable. The object box can not be placed on a non climbable object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the point pointed by the ray with this resolution",
                "type": "BABYLON.Vector3"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 230,
            "description": "giving a ray, and some params about the object, determine the point pointed by the ray in the scene, considering the projection on the y axis",
            "itemtype": "method",
            "name": "resolveAxisConstraint",
            "params": [
                {
                    "name": "objectBox",
                    "description": "the object, as a Oriented along y axis Bounding Box",
                    "type": "OyBB"
                },
                {
                    "name": "ray_",
                    "description": "the ray which will determine the new position of the object box",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "grab",
                    "description": "the vetor which comes from the center of the box to the point where it is grabbed",
                    "type": "BABYLON.Vector3"
                }
            ],
            "return": {
                "description": "the point pointed by the ray with this resolution",
                "type": "BABYLON.Vector3"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 297,
            "description": "giving a ray, and some params about the object, determine the point pointed by the ray in the scene, considering the projection on the floor ( without considering walls or object that may be on the path )",
            "itemtype": "method",
            "name": "resolvePlaneConstraint",
            "params": [
                {
                    "name": "objectBox",
                    "description": "the object, as a Oriented along y axis Bounding Box",
                    "type": "OyBB"
                },
                {
                    "name": "ray_",
                    "description": "the ray which will determine the new position of the object box",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "flyY",
                    "description": "if false, the object is not flying, else the elevation where the object is flying",
                    "type": "Boolean or Number"
                },
                {
                    "name": "grab",
                    "description": "the vetor which comes from the center of the box to the point where it is grabbed",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "floorY",
                    "description": "elevation of the floor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the point pointed by the ray with this resolution",
                "type": "BABYLON.Vector3"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 341,
            "description": "giving a ray, determine the first object collided, or null if the obejct is not draggable",
            "itemtype": "method",
            "name": "grabDraggableAt",
            "params": [
                {
                    "name": "ray",
                    "description": "the ray which will determine the first collided object",
                    "type": "BABYLON.Ray"
                }
            ],
            "return": {
                "description": "the object draggable pointed, or null if there is none",
                "type": "BABYLON.Mesh"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 385,
            "description": "return the last fictive the box, the one computed before applying the magnetism",
            "itemtype": "method",
            "name": "getLastFictiveBox",
            "return": {
                "description": "the box",
                "type": "OyBB"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\DragComponent3D.js",
            "line": 398,
            "description": "return the object currently dragged, or null",
            "itemtype": "method",
            "name": "getDraggedObject",
            "return": {
                "description": "the object",
                "type": "BABYLON.Mesh"
            },
            "class": "DragComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 212,
            "description": "Callback - Appelée lorsqu'un bouton de la souris est appuyé.",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 224,
            "description": "Callback - Appelée lorsqu'un bouton de la souris est relâché.",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 234,
            "description": "Callback - Appelée lorsque la souris est déplacée.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 244,
            "description": "Callback - Action réalisée au clic",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'évenement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 300,
            "description": "Méthode callback appelée lors d'un double clic de souris afin d'animer un objet.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 313,
            "description": "TODO",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 330,
            "description": "TODO",
            "itemtype": "method",
            "name": "onRemoveObject",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 340,
            "description": "Méthode callback appelée lors de la creation d'un nouveau plan",
            "itemtype": "method",
            "name": "onNewPlan",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 350,
            "description": "Appelé lorsqu'une mesh est ajoutée sur la scène",
            "itemtype": "method",
            "name": "onCreateObject",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 385,
            "description": "Appelé lorsqu'un object est rafraichi",
            "itemtype": "method",
            "name": "onRefreshObject",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 396,
            "description": "Callback - Appelé lorsqu'une mesh est supprimée de la mémoire",
            "itemtype": "method",
            "name": "onDispose",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 539,
            "description": "TODO",
            "itemtype": "method",
            "name": "addToGroup",
            "params": [
                {
                    "name": "object",
                    "description": "| a group or an object"
                },
                {
                    "name": "group",
                    "description": "| a group, an object or null\nmay instanciate _currentVirtualGroup is needed"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 638,
            "description": "TODO",
            "itemtype": "method",
            "name": "centerGroup",
            "params": [
                {
                    "name": "group",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 670,
            "description": "TODO",
            "itemtype": "method",
            "name": "refreshObject",
            "params": [
                {
                    "name": "object3d",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 694,
            "description": "TODO",
            "itemtype": "method",
            "name": "setGroupId",
            "params": [
                {
                    "name": "object",
                    "description": "Group or Selectable object"
                },
                {
                    "name": "groupId",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 714,
            "description": "TODO",
            "itemtype": "method",
            "name": "setGroupId",
            "params": [
                {
                    "name": "object",
                    "description": "Group or Selectable object"
                },
                {
                    "name": "groupId",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 734,
            "description": "TODO",
            "itemtype": "method",
            "name": "virtualToRealGroup",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 801,
            "description": "Effectue un clonage de l'objet 3D actuellement séléctionné.",
            "itemtype": "method",
            "name": "onCloneObject",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 870,
            "description": "TODO",
            "itemtype": "method",
            "name": "onAddToProducts",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 941,
            "description": "Mise à jour de la logique du composant",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "Le temps écoulé en millisecondes depuis la dernière mise à jour.",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1045,
            "description": "Mettre en place un historique des actions pour annulation",
            "itemtype": "method",
            "name": "setupHistory",
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1105,
            "description": "lock some actions. Register a key so that the action can only be re-able with the same key.\nactions to lock must be passed as an addition of their corresponding flag\nsupport multi-lock :\n\n  A lock the action ------------------------------------------------------------------- A unlock the action\n                      B lock the same action ----------------- B unlock the action\n\n  <-------------------------------action is locked ------------------------------------------------------->\n\n\n  --------time--------->",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "locker",
                    "description": "can be anything, is register as key for the lock, the action will be unlock only with the same key",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "[ optional ] actions to lock, CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8;",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\EditionComponent3D.js",
            "line": 1156,
            "description": "unlock actions",
            "itemtype": "method",
            "name": "unlock",
            "params": [
                {
                    "name": "locker",
                    "description": "can be anything, is register as key for the lock, the action will be unlock only with the same key",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "[ optional ] actions to lock, CAMERALOCK = 1; DRAGLOCK = 2; KEYBOARDLOCK = 4; CAMERATRANSLATIONLOCK = 8;",
                    "type": "Number"
                }
            ],
            "class": "EditionComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 53,
            "description": "Evenement renvoyé par le floorComponent3d une fois que l'object3d correspondant à l'étage est ajouté à la scene",
            "itemtype": "event",
            "name": ":",
            "type": "Floor : la floor demandée, structure: la structure en cours",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 72,
            "description": "Charge un fichier d'un objet programmable",
            "itemtype": "method",
            "name": "loadProgrammableFile",
            "params": [
                {
                    "name": "Le",
                    "description": "type de l'objet.",
                    "type": "String"
                },
                {
                    "name": "Le",
                    "description": "nom du fichier.",
                    "type": "String"
                },
                {
                    "name": "Une",
                    "description": "fonction de callback appelée lorsque le fichier est chargé.",
                    "type": "Function"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 145,
            "description": "cette methode est appelée depuis un clic sur le menu et va construire un structure object à rajouter dans la structure\npas de notion d'object3d",
            "itemtype": "method",
            "name": "onAddObject",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 298,
            "description": "Cette methode prend un structureObject, construit l'objet3d correspondant et lance l'ajout à la scene",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 357,
            "description": "Prépare l'object3d en fonction de son objetStructure pour être ajouté à la scene\n le type peut etre dae / programmable / ou nimporte quoi d'autre",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 387,
            "description": "cas d'un rechargement à chaud depuis clic sur etage ou passage 2D 3D\n=> on repositionne les objets groupés dans leur reperes de floor pour eviter que ca pete",
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 423,
            "description": "Obtient une valeur à partir d'un paramètre, si ce dernier est undefined c'est la valeur par défaut qui est renvoyée.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "targetValue",
                    "description": "Paramètre à tester pour récupérer sa valeur.",
                    "type": "Object"
                },
                {
                    "name": "defaultValue",
                    "description": "Valeur par défaut à utiliser si la valeur de targetValue est undefined.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "La valeur du paramètre si il est défini, sinon retourn la valeur par défaut.",
                "type": "Object"
            },
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 435,
            "description": "Obtient un objet de type Vector3 à partir d'un objet littéral JavaScript avec 3 composantes x, y et z.",
            "itemtype": "method",
            "name": "getVector3",
            "params": [
                {
                    "name": "pVector",
                    "description": "Un objet littéral avec 3 composantes x, y et z.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Une instance de BABYLON.Vector3 avec les 3 composantes du vecteur passé en paramètre.\n                           Si le vecteur passé en paramètre est déjà une instance de BABYLON.Vector3 il est automatiquement retourné.",
                "type": "BABYLON.Vector3"
            },
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js",
            "line": 447,
            "description": "Applique l'ombre à l'objet ainsi que tous ces enfants",
            "itemtype": "method",
            "name": "applyShadow",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object3d"
                }
            ],
            "class": "ObjectComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 104,
            "description": "Clone l'objet courant.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "offset",
                    "description": "Un offset à appliquer sur l'axe Z afin de décaler l'objet.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Retourne une nouvelle instance similaire à cet objet",
                "type": "Object"
            },
            "class": "Object",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 117,
            "description": "Obtient les propriétés de l'objet.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "Un tableau contenant les différentes propriétés de l'objet.",
                "type": "Array"
            },
            "class": "Object",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 132,
            "description": "Détermine si l'objet peut subir des collisions",
            "itemtype": "method",
            "name": "getMagnetismCollider",
            "return": {
                "description": "Un tableau contenant les différentes propriétés de l'objet.",
                "type": "Array"
            },
            "class": "Object",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\ObjectStructure.js",
            "line": 142,
            "description": "Anime un objet animable.",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "mesh",
                    "description": "L'objet à animer.",
                    "type": "Object"
                },
                {
                    "name": "mesh",
                    "description": "L'object targeté.",
                    "type": "Target"
                }
            ],
            "class": "Object",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 15,
            "description": "The object in params will be transformed a lot ( well at least that the spirit )",
            "itemtype": "event",
            "name": "wnp.engine3D.object.start-transform",
            "params": [
                {
                    "name": "object",
                    "description": "the object \n\n throw when \n    * beginTransformObject is callled",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 26,
            "description": "The object in params will not longer be transformed a lot ( well at least that the spirit )",
            "itemtype": "event",
            "name": "wnp.engine3D.object.end-transform",
            "params": [
                {
                    "name": "object",
                    "description": "the object\n\n throw when \n    * endTransformObject is callled\n\n if the object have been transformed since the last beginTransform, wnp.engine3D.object.translate and wnp.engine3D.object.translate can be thown too",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 39,
            "description": "The object in params have been translated",
            "itemtype": "event",
            "name": "wnp.engine3D.object.translate",
            "params": [
                {
                    "name": "object",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "true if the object is in a begin - end period\n\n throw when \n    * moveObject is callled\n    * endTransformObject is called, and a translation have been performed since the last beginTransform",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 52,
            "description": "The object in params have been rotated",
            "itemtype": "event",
            "name": "wnp.engine3D.object.rotate",
            "params": [
                {
                    "name": "object",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "pending",
                    "description": "true if the object is in a begin - end period\n\n throw when \n    * moveObject is called, if the magnetism have decided that it should be rotated\n    * rotateObject is called\n    * endTransformObject is called, and a rotation have been performed since the last beginTransform",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 87,
            "description": "notify that the object will be transformed a lot, and it's begin now\nthe transformation apply after will be notifyed with the flag pending and will not trigger the history, this behavior stop when calling endTransformObject",
            "itemtype": "method",
            "name": "beginTransformObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object, can be a group",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "silent",
                            "description": "if true, will not trigger the event",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 110,
            "description": "notify that the object will not longer be transformed a lot\nthe transformation which occured since the last beginTransformObject will be merge, notifyed and historized",
            "itemtype": "method",
            "name": "endTransformObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object, can be a group",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "silent",
                            "description": "if true, will not trigger the event",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 145,
            "description": "move the object on the scene",
            "itemtype": "method",
            "name": "moveObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object, can be a group",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newPosition",
                    "description": "the new position",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "noMagnetism",
                            "description": "if true, the magnetism will not be applied, if \"xz\" the xz magnetism will not be applied, same thing for \"y\"",
                            "type": "Boolean|string"
                        },
                        {
                            "name": "noHistory",
                            "description": "if true, the transformation will not be historized",
                            "type": "Boolean"
                        },
                        {
                            "name": "silent",
                            "description": "if true, the transformation will not trigger the event",
                            "type": "Boolean"
                        },
                        {
                            "name": "relative",
                            "description": "if true, the newPosition will be added to the current position",
                            "type": "Boolean"
                        },
                        {
                            "name": "enableGravity",
                            "description": "if true, the object bottom have to touch another object along the y axis",
                            "type": "Boolean"
                        },
                        {
                            "name": "old",
                            "description": "the old position, if omited take the current position",
                            "type": "BABYLON.Vector3"
                        }
                    ]
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Object\\TransformComponent3D.js",
            "line": 250,
            "description": "rotate the object on the scene",
            "itemtype": "method",
            "name": "moveObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "newRotation",
                    "description": "the new rotation",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "options",
                    "description": "[optional] set of options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "noMagnetism",
                            "description": "if true, the magnetism will not be applied",
                            "type": "Boolean"
                        },
                        {
                            "name": "noHistory",
                            "description": "if true, the transformation will not be historized",
                            "type": "Boolean"
                        },
                        {
                            "name": "silent",
                            "description": "if true, the transformation will not trigger the event",
                            "type": "Boolean"
                        },
                        {
                            "name": "relative",
                            "description": "if true, the newPosition will be added to the current rotation",
                            "type": "Boolean"
                        },
                        {
                            "name": "old",
                            "description": "the old rotation, if omited take the current rotation",
                            "type": "BABYLON.Vector3"
                        }
                    ]
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 63,
            "description": "Initialize the component for the menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 134,
            "description": "Test if the cursor is on on of the element and return it.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector representing the coord of the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The target or null if nothing is under the cursor.",
                "type": "Object"
            },
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 178,
            "description": "Draw an overture.",
            "itemtype": "method",
            "name": "_drawOverture",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 298,
            "description": "Compute the overture on the wall.",
            "itemtype": "method",
            "name": "compute",
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 318,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 336,
            "description": "Handle the movement and reshape of the overture.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 368,
            "description": "When the dragging start for the move of the cursor.",
            "itemtype": "method",
            "name": "onDraggingMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 394,
            "description": "When the dragging start for resize.",
            "itemtype": "method",
            "name": "onDraggingResize",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 417,
            "description": "When the dragging end.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 438,
            "description": "When the overture is hovered by the mouse.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 453,
            "description": "When the overture is leaved by the mouse.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 467,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onSelectionDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 496,
            "description": "Add an overture.",
            "itemtype": "method",
            "name": "onAddOverture",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive with the basics data.",
                    "type": "Event"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 531,
            "description": "When add an overture and the cursor drag it.",
            "itemtype": "method",
            "name": "onAddOvertureDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 549,
            "description": "When add an overture and update it.",
            "itemtype": "method",
            "name": "onAddOvertureUpdate",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 568,
            "description": "When the action to add an overture is done.",
            "itemtype": "method",
            "name": "onAddOvertureEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The overture structure dragged.",
                    "type": "BABYLON.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 598,
            "description": "When the action to add an overture is done and the cursor leave the zone, we unregister the event.",
            "itemtype": "method",
            "name": "onAddOvertureLeaveZone",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 629,
            "description": "Handle all the item of the context menu.",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 770,
            "description": "When a value is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 807,
            "description": "When the user remove the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "wnp.overtureStructure"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent2D.js",
            "line": 818,
            "description": "Duplicate the overture on the double click.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture selected.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "mstate",
                    "description": "l etat de la souris.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data.",
                    "type": "Object"
                }
            ],
            "class": "wnp.overtureComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 40,
            "description": "Create the 3D meshes of the overture.",
            "itemtype": "method",
            "name": "onWallsReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive, it contain the wall mesh, the floor mesh and the structure of the floor.",
                    "type": "Event"
                }
            ],
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 47,
            "description": "Fired this event when the wall is ready to be dig.",
            "itemtype": "event",
            "name": "wnp.engine3d.overturesReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the wall.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 81,
            "description": "Create the 3D meshes of the subslope overture.",
            "itemtype": "method",
            "name": "onSubslopesReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive, it contain the wall mesh, the floor mesh and the structure of the floor.",
                    "type": "Event"
                }
            ],
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 88,
            "description": "Fired this event when the subslop of the wall are ready and can be dig.",
            "itemtype": "event",
            "name": "wnp.engine3d.subslopeOverturesReady",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "floor",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "The current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The mesh of the wall.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 122,
            "description": "Create the overture mesh.",
            "itemtype": "method",
            "name": "createOverture",
            "params": [
                {
                    "name": "overture",
                    "description": "The structure of the overture.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "structure",
                    "description": "The structure of the current stage.",
                    "type": "wnp.floorComponent3D"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3D.",
                    "type": "wnp.floorStructure"
                }
            ],
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 220,
            "description": "Create a box with the CSG mesh.",
            "itemtype": "method",
            "name": "overtureBox",
            "params": [
                {
                    "name": "ov",
                    "description": "The structure of the overture.",
                    "type": "wnp.overtureStructure"
                },
                {
                    "name": "The",
                    "description": "structure of the current stage.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3D.",
                    "type": "wnp.floorComponent3D"
                }
            ],
            "return": {
                "description": "The cube use to dig in CSG format.",
                "type": "BABYLON.CSG"
            },
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 264,
            "description": "Dig an overture in the wall.",
            "itemtype": "method",
            "name": "carveWithOvertureMeshes",
            "params": [
                {
                    "name": "ov",
                    "description": "The CSG mesh of the cube.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "wallCSG",
                    "description": "The wall in CSG mesh.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "wall3D",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3D.",
                    "type": "wnp.floorComponent3D"
                }
            ],
            "return": {
                "description": "New wall create after dig the wall.",
                "type": "BABYLON.Mesh"
            },
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureComponent3D.js",
            "line": 293,
            "description": "Dig an overture in the subslope.",
            "itemtype": "method",
            "name": "carveWithOvertureMeshes",
            "params": [
                {
                    "name": "subslope",
                    "description": "The subslope of the overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "ov",
                    "description": "The structure of the overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "structure",
                    "description": "The structure of the current floor.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "floor",
                    "description": "The floor component 3Ds.",
                    "type": "wnp.floorComponent3D"
                }
            ],
            "return": {
                "description": "New wall create after dig the wall.",
                "type": "BABYLON.Mesh"
            },
            "class": "wnp.overtureComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 19,
            "description": "Type of the overture.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 26,
            "description": "Position of the overture.",
            "itemtype": "attribute",
            "name": "position",
            "type": "BABYLON.Vector2",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 33,
            "description": "Width of the overture.",
            "itemtype": "attribute",
            "name": "width",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 40,
            "description": "Height of the structure.",
            "itemtype": "attribute",
            "name": "height",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 47,
            "description": "Thickness of the overture.",
            "itemtype": "attribute",
            "name": "thickness",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 54,
            "description": "Elevation of the overture.",
            "itemtype": "attribute",
            "name": "elevation",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 61,
            "description": "The number of hinge (0 = right, 1 = left).",
            "itemtype": "attribute",
            "name": "hinge",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 68,
            "description": "The side of the hinge (Face of the wall (1, -1)).",
            "itemtype": "attribute",
            "name": "side",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 75,
            "description": "The number of the casement (0, 1, 2, 3).",
            "itemtype": "attribute",
            "name": "nbCasement",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 82,
            "description": "The parent wall.",
            "itemtype": "attribute",
            "name": "parentWall",
            "type": "wnp.wallPane",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 89,
            "description": "The minimum size of the overture.",
            "itemtype": "attribute",
            "name": "minsize",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 96,
            "description": "If the overture is sliding or not.",
            "itemtype": "attribute",
            "name": "sliding",
            "type": "Boolean",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 103,
            "itemtype": "attribute",
            "name": "galandage",
            "type": "Boolean",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 109,
            "description": "The Thickness of the structure.",
            "itemtype": "attribute",
            "name": "batiThickness",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 116,
            "description": "The instance of the programmable.",
            "itemtype": "attribute",
            "name": "programmableInstance",
            "type": "BABYLON.Mesh",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 123,
            "description": "The plinte of the overture structure.",
            "itemtype": "attribute",
            "name": "plinte",
            "type": "Number",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 133,
            "description": "Serialize the object.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "A string resulting of the serialization.",
                "type": "String"
            },
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 147,
            "description": "Deserialize an overture.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The object serialized.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A structure overture serialized.",
                "type": "wnp.overtureStructure"
            },
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 161,
            "description": "Check the coherence of all the parameters.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "structure",
                    "description": "The overture structure.",
                    "type": "wnp.overtureStructure"
                }
            ],
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 181,
            "description": "Get the wall of the overture.",
            "itemtype": "method",
            "name": "getParentWall",
            "return": {
                "description": "The parent of the overture.",
                "type": "wnp.wallPane"
            },
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 192,
            "description": "Set the wall of the overture.",
            "itemtype": "method",
            "name": "getParentWall",
            "params": [
                {
                    "name": "wall",
                    "description": "The futur parent of the overture.",
                    "type": "wnp.wallPane"
                }
            ],
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 222,
            "description": "Compute the position of the overture on the new wall when we change the overture on a new wall.",
            "itemtype": "method",
            "name": "computePositionOnWallChange",
            "params": [
                {
                    "name": "newWall",
                    "description": "The new wall of the overture.",
                    "type": "wnp.wallPane"
                }
            ],
            "return": {
                "description": "The new position.",
                "type": "BABYLON.Vector2"
            },
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 243,
            "description": "Project on the wall the position of the overture.",
            "itemtype": "method",
            "name": "projectOnWall",
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 266,
            "description": "Return a couple: the position giving the center of the overture and the unit vector of the parent wall.",
            "itemtype": "method",
            "name": "getAbsolutePos",
            "return": {
                "description": "position: BABYLON.Vector3, vector: BABYLON.Vector3 The position and the unit vector.",
                "type": "Object"
            },
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 279,
            "description": "Return the angle of the overture.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "The angle.",
                "type": "Number"
            },
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 290,
            "description": "Return the polygon describing the overture.",
            "itemtype": "method",
            "name": "getPolygon",
            "return": {
                "description": "The array of the points of the polygon.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 309,
            "description": "Resize the overture in function of the parent wall.",
            "itemtype": "method",
            "name": "clampSize",
            "params": [
                {
                    "name": "allowDelete",
                    "description": "Specify if we allow the deletion or not if the size of the wall is to small.",
                    "type": "Boolean"
                },
                {
                    "name": "structure",
                    "description": "The current floor structure. Must be specify if allowDelete == true.",
                    "type": "wnp.floorStructure"
                }
            ],
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Overture\\OvertureStructure.js",
            "line": 331,
            "description": "Delete the overture.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure where the engine have to remove the overture.",
                    "type": "wnp.floorStructure"
                }
            ],
            "class": "wnp.OvertureStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\Path.js",
            "line": 15,
            "class": "Path",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\Path.js",
            "line": 17,
            "class": "Path",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 35,
            "description": "Détermine si le curseur se trouve au dessus de l'un des éléments\ngérés par le composant et le retourne.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "Vecteur représentant les coordonées du curseur.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "L'élément ciblé par le curseur ou null si rien ne\n                 se trouve sous le curseur.",
                "type": "Object"
            },
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 70,
            "description": "Mise à jour de tous les points",
            "itemtype": "method",
            "name": "update",
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 79,
            "description": "Parcourt tous les points d'une structure et tente de les attacher à un mur",
            "itemtype": "method",
            "name": "tryAttachAll",
            "params": [
                {
                    "name": "force",
                    "description": "Ignore le flag needsUpdate et update tous les points"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointComponent2D.js",
            "line": 100,
            "description": "Dessine l'angle entre 2 murs",
            "itemtype": "method",
            "name": "drawAngle",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Contexte 2D du canvas.",
                    "type": "Object"
                },
                {
                    "name": "la",
                    "description": "translation",
                    "type": "Translation"
                },
                {
                    "name": "le",
                    "description": "zoom",
                    "type": "Zoom"
                }
            ],
            "class": "PointComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 87,
            "description": "Moves the point by a given vector",
            "params": [
                {
                    "name": "vector",
                    "description": "Offset vector",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 96,
            "description": "Removes the point from the floor structure",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure referencing this point",
                    "type": "FloorStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 111,
            "description": "Replaces a parent wall with another parent wall\n\nNB: The order of the parents list can change",
            "itemtype": "method",
            "name": "replaceParent",
            "params": [
                {
                    "name": "oldWall",
                    "description": "The old parent",
                    "type": "WallStructure"
                },
                {
                    "name": "newWall",
                    "description": "The new parent, can be undefined if you just want to delete a parent",
                    "type": "WallStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 126,
            "description": "Tries to merge the point with the other surrounding points, if such a thing is possible.",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure containing this point",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "The merged point. Returns this point if nothing has been merged.",
                "type": "PointStructure"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 177,
            "description": "Forces merging with another point",
            "itemtype": "method",
            "name": "forceMerge",
            "params": [
                {
                    "name": "point",
                    "description": "Other point to merge with. It will be deleted from the floor structure",
                    "type": "PointStructure"
                },
                {
                    "name": "fs",
                    "description": "The floor structure containing this point",
                    "type": "FloorStructure"
                }
            ],
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 207,
            "description": "Tries to attach the point on the surrounding walls, if such a thing is possible.",
            "itemtype": "method",
            "name": "tryAttach",
            "params": [
                {
                    "name": "fs",
                    "description": "The floor structure containing this point",
                    "type": "FloorStructure"
                },
                {
                    "name": "blacklist",
                    "description": "Wall to ignore while searching for candidates",
                    "type": "WallStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "False if nothing has been attached",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 280,
            "description": "Returns the current attached status",
            "itemtype": "method",
            "name": "isAttached",
            "return": {
                "description": "True if the point is attached.",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 291,
            "description": "Returns the wall onto the point is attached",
            "itemtype": "method",
            "name": "wallAttached",
            "return": {
                "description": "A wall, or undefined/null if the point is not attached.",
                "type": "WallStructure"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Point\\PointStructure.js",
            "line": 302,
            "description": "Removes the attach of a point",
            "itemtype": "method",
            "name": "unAttach",
            "return": {
                "description": "False if the point wasn't previously attached",
                "type": "Boolean"
            },
            "class": "PointStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 19,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "9",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 29,
            "description": "Temporary storage of the 2D computed rooms",
            "itemtype": "property",
            "name": "rooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 38,
            "description": "Temporary storage of the 2D internal rooms.",
            "itemtype": "property",
            "name": "internalRooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 47,
            "description": "Temporary storage of the 2D external rooms.",
            "itemtype": "property",
            "name": "externalRooms",
            "access": "private",
            "tagname": "",
            "type": "{RoomStructure[]}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 56,
            "description": "Flag signaling if we can use the previously computed rooms stored in the cache.\nSpeed up purposes",
            "itemtype": "property",
            "name": "useCache",
            "access": "private",
            "tagname": "",
            "type": "{Boolean}",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 67,
            "description": "Flag to display/hide room names.",
            "itemtype": "property",
            "name": "displayRoomName",
            "type": "{Boolean}",
            "default": "true",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 98,
            "description": "Returns a subslope list based on the rooms\nWarning : the subslopes returned are not usable as is, they must be processed by \"getSubSlope\" from subSlopeComponent2D !",
            "itemtype": "method",
            "name": "getAllSubSlopes",
            "params": [
                {
                    "name": "structure",
                    "description": "The related floor. If not specified, the current active floor will be used.",
                    "type": "FloorStructure"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 160,
            "description": "Returns the current computed internal rooms.",
            "itemtype": "method",
            "name": "getInternalRooms",
            "return": {
                "description": "The current internal rooms.",
                "type": "RoomStructure[]"
            },
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 171,
            "description": "Returns the current computed external rooms.",
            "itemtype": "method",
            "name": "getInternalRooms",
            "return": {
                "description": "The current external rooms.",
                "type": "RoomStructure[]"
            },
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 183,
            "description": "Matches two sets of RoomStructure to pair those which look alike the most.\nThis uses a custom (yet perfectible) matching algorithm based on overlapping areas.",
            "itemtype": "method",
            "name": "identifyRooms",
            "params": [
                {
                    "name": "rooms0",
                    "description": "Set 0",
                    "type": "RoomStructure[]"
                },
                {
                    "name": "rooms1",
                    "description": "Set 1",
                    "type": "RoomStructure[]"
                }
            ],
            "return": {
                "description": "An array T such as T[i] = roomj implies :\nThe room i in the smaller set is the most alike to the roomj in the bigger set.\nT length is : ```min(rooms0.length, rooms1.length)```\nExample case :\nrooms0.length is smaller than rooms1.length : if T[i] = roomj, then the image of rooms0[i] is roomj, and roomj is taken from rooms1.",
                "type": "Array"
            },
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 233,
            "description": "Copies the properties of a former room collection with a new generated room collection",
            "itemtype": "method",
            "name": "dispatchRooms",
            "params": [
                {
                    "name": "collection",
                    "description": "Can be either \"internalRooms\", either \"externalRooms\".",
                    "type": "String"
                },
                {
                    "name": "structure",
                    "description": "The related floor.",
                    "type": "FloorStructure"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 260,
            "description": "Computes the rooms from the 2D geometry of the house.\nBased on the ```polygonMerger``` method.",
            "itemtype": "method",
            "name": "computeRooms",
            "params": [
                {
                    "name": "structure",
                    "description": "The related floor. If not specified, the current active floor will be used.",
                    "type": "FloorStructure"
                },
                {
                    "name": "cycles",
                    "description": "Optionnal parameter to specify pre-computed cycles (usually from the cache), in order to speed up the process.",
                    "type": "Cycles",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 432,
            "description": "Draws all rooms for the current active floor.",
            "itemtype": "method",
            "name": "drawRooms",
            "params": [
                {
                    "name": "ctx",
                    "description": "Canvas 2D context",
                    "type": "Object"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 449,
            "description": "Determines if a point is inside the polygon of one of the current displayed rooms.",
            "itemtype": "method",
            "name": "isPointInRooms",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The room in which the point stands, or null if it is outside every room.",
                "type": "RoomStructure"
            },
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent2D.js",
            "line": 466,
            "description": "Draws a room",
            "itemtype": "method",
            "name": "drawRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to draw",
                    "type": "RoomStructure"
                },
                {
                    "name": "ctx",
                    "description": "Canvas 2D context",
                    "type": "Object"
                },
                {
                    "name": "translation",
                    "description": "Canvas 2D translation",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "Canvas 2D zoom",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "RoomComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 19,
            "description": "Default textures",
            "itemtype": "property",
            "name": "_defaultRoomTextures",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 31,
            "description": "Default Material for the floor",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{wnp.Material}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 42,
            "description": "Default Material for the ceiling",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{wnp.Material}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 51,
            "description": "Default Material for carving floors & ceilings",
            "itemtype": "property",
            "name": "_defaultMaterial",
            "access": "private",
            "tagname": "",
            "type": "{wnp.Material[]}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 60,
            "description": "Material offset for batching of the rooms into 1 single mesh.",
            "itemtype": "property",
            "name": "_materialOffset",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 73,
            "description": "Returns the common material displayed on the side of the floor when it is carved by hoppers.",
            "itemtype": "method",
            "name": "getSideMaterial",
            "return": {
                "description": "The side Material.",
                "type": "wnp.Material"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 83,
            "description": "Sets the common material displayed on the side of the floor when it is carved by hoppers.",
            "itemtype": "method",
            "name": "setSideMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The side Material.",
                    "type": "wnp.Material"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 93,
            "description": "Returns the common ceiling material.",
            "itemtype": "method",
            "name": "getCeilingMaterial",
            "return": {
                "description": "The ceiling Material.",
                "type": "wnp.Material"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 103,
            "description": "Sets the common ceiling material.",
            "itemtype": "method",
            "name": "setCeilingMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The ceiling Material.",
                    "type": "wnp.Material"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 128,
            "description": "Callback called when the floor mesh is ready.",
            "itemtype": "method",
            "name": "onFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "The \"floor-ready\" event.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 179,
            "description": "Builds the 3D floor-wide room mesh and adds it to the scene.",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "rooms",
                    "description": "The rooms to build.",
                    "type": "RoomStructure[]"
                },
                {
                    "name": "hoppers",
                    "description": "Polygonal holes in the floor.",
                    "type": "HopperStructure[]"
                },
                {
                    "name": "floor",
                    "description": "Related floor.",
                    "type": "FloorStructure"
                },
                {
                    "name": "hoppers",
                    "description": "Polygonal holes in the ceiling.",
                    "type": "HopperStructure[]"
                }
            ],
            "return": {
                "description": "globalMesh Floor-wide mesh for the rooms & ceilings.",
                "type": "BABYLON.Mesh"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 231,
            "description": "Removes the 3D floor added by the doors to make the junction.",
            "itemtype": "method",
            "name": "normalizePolygon",
            "params": [
                {
                    "name": "points",
                    "description": "Room 2D points.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "} New list of points.",
                "type": "BABYLON.Vector2{]"
            },
            "access": "private",
            "tagname": "",
            "warning": "This method is a ugly hack and should not be used by anyone. Even the wanaplan team. Just sayin'.",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 250,
            "description": "Builds a single 3D room with its hoppers.",
            "itemtype": "method",
            "name": "createRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to build.",
                    "type": "RoomStructure"
                },
                {
                    "name": "height",
                    "description": "The height of the room.",
                    "type": "Number"
                }
            ],
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 313,
            "description": "Carves a hole in the room.",
            "itemtype": "method",
            "name": "carveHole",
            "params": [
                {
                    "name": "room3D",
                    "description": "Floor-wide mesh of the rooms.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "hole",
                    "description": "Polygonal 2D hole (flat).",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "height",
                    "description": "The height of the hole, amount of the 3D extrusion of the 2D polygon.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "finalRoom Room after carving.",
                "type": "BABYLON.Mesh"
            },
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 344,
            "description": "Replaces the former 3D room mesh with a new 3D mesh, keeping the custom property of a 3D room-mesh like \"boundingBoxes\" or \"objectInstances\".",
            "itemtype": "method",
            "name": "replaceRoom",
            "params": [
                {
                    "name": "oldRoom",
                    "description": "Old room.",
                    "type": "OldRoom"
                },
                {
                    "name": "newRoom",
                    "description": "New room.",
                    "type": "NewRoom"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomComponent3D.js",
            "line": 369,
            "description": "Creates the object instances and bounding boxes from merged subMeshes.",
            "itemtype": "method",
            "name": "createInstances",
            "params": [
                {
                    "name": "roomMesh",
                    "description": "3D room mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 24,
            "description": "2D vectors building the room's flat polygon.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 32,
            "description": "Potential holes in the room's polygon.\nArray of 2D vectors array describing the holes.",
            "itemtype": "property",
            "name": "holes",
            "type": "{BABYLON.Vector2[][]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 41,
            "description": "Walls that surround the room",
            "itemtype": "property",
            "name": "walls",
            "type": "{WallStructure[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 49,
            "description": "Array of normal vectors to walls referenced in the \"walls\" property.\nThese vectors are normal to the walls, and point towards the room polygon.\nIndex sync : given i an index, parentWallSides[i] is normal to walls[i].",
            "itemtype": "property",
            "name": "parentWallSides",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 59,
            "description": "Array of wall panes. See the wanaplan wiki for more info about wall panes.",
            "itemtype": "property",
            "name": "panes",
            "type": "{WallPanes3D[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 67,
            "description": "Cycle used to build the room, private property.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "cycle",
            "type": "{BABYLON.Vector2[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 76,
            "description": "Room's inner id, can't be modified by the user.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 85,
            "description": "Room label, can be modified by the user.",
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 93,
            "description": "Room's hexa color.",
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 101,
            "description": "Room's area (2D).",
            "itemtype": "property",
            "name": "area",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 109,
            "description": "Indicates if the room is external (see Wiki for more info about internal and external rooms)",
            "itemtype": "property",
            "name": "isExternal",
            "type": "{Boolean}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 117,
            "description": "Where to display the room's area label on the screen (2D).",
            "itemtype": "property",
            "name": "areaPosition",
            "type": "{BABYLON.Vector2}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 125,
            "description": "Text style",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "textWidth",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 134,
            "description": "Text style",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "textHeight",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 143,
            "description": "Room's materials.\nContains two fields : materials['ceiling'] and materials['floor'].",
            "itemtype": "property",
            "name": "materials",
            "type": "{Object}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 152,
            "description": "Room's panes materials.\nFor serialization purposes, has to be modified in the future",
            "access": "private",
            "tagname": "",
            "todo": [
                ""
            ],
            "itemtype": "property",
            "name": "panesMaterials",
            "type": "{BABYLON.Material[]}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 163,
            "description": "Room elevation.",
            "itemtype": "property",
            "name": "elevation",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 171,
            "description": "Room height (distance between the floor and the ceiling).",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 179,
            "description": "Thickness of the floor (3D)",
            "itemtype": "property",
            "name": "thickness",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 187,
            "description": "Ceiling flag\n0 means no ceiling\n1 means ceiling\n2 means \"let the algorithm choose\".",
            "itemtype": "property",
            "name": "ceiling",
            "type": "{Number}",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 201,
            "description": "Deserializes the object (from JSON)",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "RoomStructure"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 223,
            "description": "Serializes the object (to JSON)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized",
                "type": "Object"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 250,
            "description": "Deserializes the object",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "An object issued from a serialization",
                    "type": "String"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 280,
            "description": "Get the floor referencing this object",
            "itemtype": "method",
            "name": "getFloor",
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection.",
                "type": "FloorStructure"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 296,
            "description": "Returns the center of a room",
            "itemtype": "method",
            "name": "getCenter",
            "return": {
                "description": "The 2D center of gravity of the room's polygon",
                "type": "BABYLON.Vector2"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 307,
            "description": "Sets the color of a room",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "The",
                    "description": "hexa representation of the color",
                    "type": "String"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 317,
            "description": "Get the Wall Panes (see Wanaplan API wiki for more info)",
            "itemtype": "method",
            "name": "getWallPanes",
            "return": {
                "description": "The Wall Panes of the room.",
                "type": "WallPane3D[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 327,
            "description": "Updates a wallPane with a new material and refreshes its center and normal\nThis function must be called after dispatchMaterials, if there have been a 2D -> 3D switch",
            "itemtype": "method",
            "name": "updatePaneMaterial",
            "params": [
                {
                    "name": "pane",
                    "description": "The pane to be updated",
                    "type": "WallPane3D"
                },
                {
                    "name": "material",
                    "description": "The new material",
                    "type": "BABYLON.Material"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 342,
            "description": "Copies a room from mandatory params\n\nWARNING: Beware of shared materials !",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "room",
                    "description": "The room to copy",
                    "type": "RoomStructure"
                }
            ],
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 375,
            "description": "Creates a room from a closed cycle of points",
            "itemtype": "method",
            "name": "createFromCycle",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "cycle",
                    "description": "The cycle of points",
                    "type": "Object[][]"
                }
            ],
            "return": {
                "description": "The resulting room",
                "type": "RoomStructure"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 417,
            "description": "Creates the wall panes for the room\nBasically, one side of the room's polygon = 1 wall pane.",
            "itemtype": "method",
            "name": "createWallPanes",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The wall panes",
                "type": "WallPane3D[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 441,
            "description": "Dispatches the materials onto the wall panes\nTakes the panesMaterials list, and finds on which pane, which material is most likely to be.\nThe likelihood score is determined by the center and normal of the wallPane",
            "itemtype": "method",
            "name": "dispatchMaterials",
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 491,
            "description": "Adds floor on doors, or overtures that hit the ground, so there is no hole in the connection between 2 rooms",
            "itemtype": "method",
            "name": "addFloorOnOvertures",
            "access": "private",
            "tagname": "",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 597,
            "description": "Equal operator for 2 rooms\nCompares the points of 2 rooms",
            "itemtype": "method",
            "name": "eql",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "True if this room points are inside the parametered room points.",
                "type": "Boolean"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 617,
            "description": "Determines if a point is in the room",
            "itemtype": "method",
            "name": "isPointIn",
            "params": [
                {
                    "name": "vector",
                    "description": "The point in plan coordinates",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "True if the point is in the room",
                "type": "Boolean"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 635,
            "description": "Returns the area of the room",
            "itemtype": "method",
            "name": "getRoomArea",
            "params": [
                {
                    "name": "force",
                    "description": "Forces a recomputing of the room area",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The room area",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 673,
            "description": "Returns the oriented area of the room",
            "itemtype": "method",
            "name": "orientedArea",
            "return": {
                "description": "The room area, negative if the room is counterclockwise",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 686,
            "description": "Flips a room. If it was counterclockwise, it becomes clockwise",
            "itemtype": "method",
            "name": "reversePath",
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 696,
            "description": "Returns a BABYLON.Vector2 Array of the room points.",
            "itemtype": "method",
            "name": "toVec2Array",
            "return": {
                "description": "The array of points",
                "type": "BABYLON.Vector2[]"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 711,
            "description": "Determines the overlapping area of 2 rooms boundingBoxes.",
            "itemtype": "method",
            "name": "getOverlappingRectArea",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "The overlapping area of boundingBoxes",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 734,
            "description": "Gives a score of likelihood between 2 rooms",
            "itemtype": "method",
            "name": "getLikelihood",
            "params": [
                {
                    "name": "room",
                    "description": "The other room to compare with",
                    "type": "RoomStructure"
                }
            ],
            "return": {
                "description": "An arbitrary number, usually less than 10. The higher, the more alike the rooms look.",
                "type": "Number"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Room\\RoomStructure.js",
            "line": 761,
            "description": "Returns the 2D not oriented Bounding Box",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "The Bounding Box",
                "type": "BABYLON.BoundingBox"
            },
            "class": "RoomStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 26,
            "description": "Serialize the object.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "A string resulting of the serialization.",
                "type": "String"
            },
            "class": "wnp.spiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 62,
            "description": "Deserialize a stairway.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The object serialized.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A structure stairway serialized.",
                "type": "wnp.stairwayStructure"
            },
            "class": "wnp.spiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 95,
            "description": "Compute the point of a spiral stairway.",
            "itemtype": "method",
            "name": "computeSpiralPoints",
            "class": "wnp.spiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 110,
            "description": "Check if the stair is the target.",
            "itemtype": "method",
            "name": "computeSpiralPoints",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector create by the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.spiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 141,
            "description": "Get the point of the hopper create by the stairway.",
            "itemtype": "method",
            "name": "getHopperPoints",
            "return": {
                "description": "The points of the hopper.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "wnp.spiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\SpiralStairwayStructure.js",
            "line": 163,
            "description": "Draw a the spiral stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "_temp",
                    "description": "The temporary position of the stairway.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.spiralStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 60,
            "description": "When the structure is load, we check the coherenct of the structure.",
            "itemtype": "method",
            "name": "onStructureLoaded",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 78,
            "description": "When the user add a stage, the engine look for the stairway in stage below and compute the hopper.",
            "itemtype": "method",
            "name": "onStructureLoaded",
            "params": [
                {
                    "name": "event",
                    "description": "The associated event.",
                    "type": "Event"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 101,
            "description": "When the user leave the stairway.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure leaved.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 117,
            "description": "When the user hover the stairway.",
            "itemtype": "method",
            "name": "onHoverStair",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 133,
            "description": "When the user hover the stairway with the cursor.",
            "itemtype": "method",
            "name": "onHoverStairMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure hovered.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 149,
            "description": "When hover.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure hovered.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 167,
            "description": "When the user finish to drag the stairway.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 206,
            "description": "Draw the stair when the user drag the stairway.",
            "itemtype": "method",
            "name": "onDrawDragging",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 220,
            "description": "Method call only on the drag start when the user draw, it allow to simulate a pen to draw the stairway.",
            "itemtype": "method",
            "name": "onDrawDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 237,
            "description": "When the user start to drag the stair.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure leaved.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 251,
            "description": "When the user drag a spiral stair.",
            "itemtype": "method",
            "name": "onDragStairSpiral",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The spiral stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 292,
            "description": "When the user drag a spiral stair.",
            "itemtype": "method",
            "name": "onDragStair",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The spiral stairway structure dragged.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 338,
            "description": "Get the stairway and return it.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 364,
            "description": "Initialize the component for the menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 414,
            "description": "Add a stairway.",
            "itemtype": "method",
            "name": "onAddStairway",
            "params": [
                {
                    "name": "event",
                    "description": "The event receive with the basics data.",
                    "type": "Event"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 437,
            "description": "When the user double click on the stairway, add a new point.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 454,
            "description": "Finalize to build the stairway, and create the hopper.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 489,
            "description": "When the user add a point on the stairway with a simple click.",
            "itemtype": "method",
            "name": "onAddStairwayClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 528,
            "description": "On the mousemove, in draw state, we create the temporary point (perpendicular to the last segment).",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw.",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 571,
            "description": "Add the magnetism on the stairway.",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "origin",
                    "description": "The origin of the point.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 599,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 632,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 670,
            "description": "Handle all the item of the context menu.",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure.",
                    "type": "BABYLON.stairwayStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 822,
            "description": "When a value is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The stairway structure changed value.",
                    "type": "wnp.stairwayStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 835,
            "description": "When the user remove the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "wnp.stairwayStructure"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 853,
            "description": "Draw a stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "wnp.stairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "tmpPoint",
                    "description": "The tamporary point.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 874,
            "description": "Draw a spiral stairway.",
            "itemtype": "method",
            "name": "drawTargetSpiral",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "wnp.stairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent2D.js",
            "line": 898,
            "description": "Draw a stairway.",
            "itemtype": "method",
            "name": "drawTargetSpiral",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stairway",
                    "description": "The stairway structure.",
                    "type": "wnp.stairwayStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "StairwayComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 40,
            "description": "When the floor is ready, we can create all the floor of the stage.",
            "itemtype": "method",
            "name": "onFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "The event with the important informations (The scene and the current structure).",
                    "type": "Event"
                }
            ],
            "class": "wnp.stairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 54,
            "description": "Create the stairway of all the scene.",
            "itemtype": "method",
            "name": "createScene",
            "class": "wnp.stairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 76,
            "description": "Put the material on the good mesh.",
            "itemtype": "method",
            "name": "initMaterials",
            "params": [
                {
                    "name": "object3d",
                    "description": "The mesh of the stairway.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materials",
                    "description": "The materials of the stairway.",
                    "type": "wnp.standardMaterial[]"
                }
            ],
            "class": "wnp.stairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 93,
            "description": "Create the mesh of the stairway.",
            "itemtype": "method",
            "name": "createStairway",
            "params": [
                {
                    "name": "stairway",
                    "description": "The structure of the stairway.",
                    "type": "wnp.stairwayStructure"
                },
                {
                    "name": "sceneF",
                    "description": "The mesh of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "scene",
                    "description": "The global scene.",
                    "type": "BABYLON.scene"
                }
            ],
            "class": "wnp.stairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayComponent3D.js",
            "line": 139,
            "description": "Apply the shadow of all the mesh.",
            "itemtype": "method",
            "name": "applyShadow",
            "params": [
                {
                    "name": "Object3d",
                    "description": "The 3D object.",
                    "type": "BABYLON.mesh"
                }
            ],
            "class": "wnp.stairwayComponent3D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 23,
            "description": "The points defining the path of the subslope.",
            "itemtype": "attribute",
            "name": "points",
            "type": "BABYLON.Vector3[]",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 30,
            "description": "Type of the subslope (straight of spiral).",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 37,
            "description": "Width of the stairway.",
            "itemtype": "attribute",
            "name": "width",
            "type": "Number",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 44,
            "description": "Height of the stairway.",
            "itemtype": "attribute",
            "name": "height",
            "type": "Number",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 51,
            "description": "The stair height.",
            "itemtype": "attribute",
            "name": "stair_height",
            "type": "Number",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 58,
            "description": "The stair thickness.",
            "type": "Number",
            "itemtype": "attribute",
            "name": "stair_thickness",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 65,
            "description": "The stair width.",
            "type": "Number",
            "itemtype": "attribute",
            "name": "stair_width",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 72,
            "description": "Have or not rails.",
            "type": "Boolean",
            "itemtype": "attribute",
            "name": "rail_a",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 79,
            "description": "Have or not rails.",
            "type": "Boolean",
            "itemtype": "attribute",
            "name": "rail_b",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 86,
            "description": "Have or not limon.",
            "type": "Number",
            "itemtype": "attribute",
            "name": "limon",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 93,
            "description": "The stick spacement.",
            "type": "Number",
            "itemtype": "attribute",
            "name": "stick_spacement",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 100,
            "description": "Have or not contremarche.",
            "type": "Boolean",
            "itemtype": "attribute",
            "name": "have_contremarche",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 107,
            "description": "The elevation of the stairway.",
            "type": "Number",
            "itemtype": "attribute",
            "name": "elevation",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 114,
            "description": "The diameter of the middle of the stairway.",
            "type": "Number",
            "itemtype": "attribute",
            "name": "diameter",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 121,
            "description": "Have or not bearing.",
            "type": "Boolean",
            "itemtype": "attribute",
            "name": "bearing",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 128,
            "description": "The stair offset.",
            "type": "Number",
            "itemtype": "attribute",
            "name": "stair_offset",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 135,
            "description": "The materials of the stairway.",
            "type": "wnp.StandardMaterial",
            "itemtype": "attribute",
            "name": "materials",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 142,
            "description": "The room.",
            "type": "wnp.roomStructure",
            "itemtype": "attribute",
            "name": "room",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 149,
            "description": "The orientation of the sta",
            "type": "Boolean",
            "itemtype": "attribute",
            "name": "orientation",
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 193,
            "description": "Serialise the object.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The string resulting of the serialization.",
                "type": "String"
            },
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 225,
            "description": "Deserialize the object.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "Object of the serialization.",
                    "type": "String"
                }
            ],
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 258,
            "description": "Get the hopper point create by the stairway.",
            "itemtype": "method",
            "name": "getHopperPoints",
            "return": {
                "description": "The four point of the hopper.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 293,
            "description": "Return the point of the step.",
            "itemtype": "method",
            "name": "getStepBoundPoints",
            "params": [
                {
                    "name": "bottomIndex",
                    "description": "The index of the bottom point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The four point of a step.",
                "type": "BABYLON.Vector3[]"
            },
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 322,
            "description": "Get the normal from the index point.",
            "itemtype": "method",
            "name": "getNormalAtPoint",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The normal at the point.",
                "type": "BABYLON.Vector3"
            },
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 339,
            "description": "Delete the strairway.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure of the floor.",
                    "type": "wnp.floorStructure"
                }
            ],
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 350,
            "description": "Add a material.",
            "itemtype": "method",
            "name": "addMaterial",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "parent",
                    "description": "The parent of the mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "mesh",
                    "description": "The stairway mesh.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "materialItem",
                    "description": "The item material.",
                    "type": "wnp.StandardMaterial"
                }
            ],
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StairwayStructure.js",
            "line": 368,
            "description": "Get the property of the object.",
            "itemtype": "method",
            "name": "getAvailableProperties",
            "return": {
                "description": "An array contain the different property of the object.",
                "type": "Object[]"
            },
            "class": "wnp.stairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 27,
            "description": "Check if the stair is valid and have enough point to create the 3D mesh.",
            "itemtype": "method",
            "name": "isValid",
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 40,
            "description": "Check if the stair is the target.",
            "itemtype": "method",
            "name": "computeSpiralPoints",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector create by the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 70,
            "description": "Draw a the spiral stairway.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "tmpPoint",
                    "description": "The temporary position of the stairway.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 92,
            "description": "Serialize the object.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "A string resulting of the serialization.",
                "type": "String"
            },
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 129,
            "description": "Deserialize a stairway.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The object serialized.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A structure stairway serialized.",
                "type": "wnp.stairwayStructure"
            },
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 164,
            "description": "Compute the point of the step of a straight stairway.",
            "itemtype": "method",
            "name": "computeSteps",
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 256,
            "description": "Get the bounding point of a step.",
            "itemtype": "method",
            "name": "getBoundPoints",
            "params": [
                {
                    "name": "step",
                    "description": "The step of the stairway.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The table of the bounding points.",
                "type": "BABYLON.Vector2[]"
            },
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 282,
            "description": "Draw the bearing.",
            "itemtype": "method",
            "name": "drawStepBearing",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "polygon",
                    "description": "The polygon points of the bearing.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "end",
                    "description": "Know if it is the last bearing or not.",
                    "type": "Number"
                }
            ],
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 314,
            "description": "Draw the step.",
            "itemtype": "method",
            "name": "drawStep",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "step",
                    "description": "The step of the stairway.",
                    "type": "Number"
                }
            ],
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 358,
            "description": "Draw all the steps of the stairway.",
            "itemtype": "method",
            "name": "drawStepStairs",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "segment",
                    "description": "The segment done by the step.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Stairway\\StraightStairwayStructure.js",
            "line": 398,
            "description": "Check of a point is in the polygon the bearing or the step.",
            "itemtype": "method",
            "name": "isInPoly",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector of the cursor.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "points",
                    "description": "The points of the polygon.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "class": "wnp.straightStairwayStructure",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 21,
            "description": "Priority of the component for update callbacks.",
            "itemtype": "property",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "100",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 31,
            "description": "Current computed subSlopes for caching purposes.",
            "itemtype": "property",
            "name": "subSlopes",
            "access": "private",
            "tagname": "",
            "type": "{SubSlopeStructure[]}",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 40,
            "description": "Component internal update flag",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 48,
            "description": "Flag for height settings",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_applyHeightToAll",
            "type": "{Boolean}",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 57,
            "description": "2D display style (radius).",
            "itemtype": "property",
            "name": "_HANDLERADIUS",
            "type": "{Number}",
            "default": "10",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 66,
            "description": "2D display style (static color).",
            "itemtype": "property",
            "name": "_HANDLESTATICSTYLE",
            "type": "{String}",
            "default": "'rgba(60,82,129,0.8)'",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 75,
            "description": "2D display style (current handle style).",
            "itemtype": "property",
            "name": "_HANDLESTYLE",
            "type": "{String}",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 115,
            "description": "Fired when the subslope is in the menu.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The item in the menu (name of the section, index, etc ...).",
                    "type": "Object"
                },
                {
                    "name": "menuPath",
                    "description": "The path of the menu.",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "The position inside the menu.",
                    "type": "Number"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 138,
            "description": "Function call when the user click on the subslope button and is in MODE_SUBSLOPE in the engine2D.",
            "itemtype": "event",
            "name": ":",
            "type": "",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 149,
            "description": "Function call when the user go back to the MODE_NORMAL.",
            "itemtype": "event",
            "name": ":",
            "type": "",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 160,
            "description": "Function call when the user go back normal mode and skip the draw of the subslope.",
            "itemtype": "event",
            "name": ":",
            "type": "",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 171,
            "description": "Draw the subslopes on the canvas.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 189,
            "description": "Draws the subslopes on the canvas dynamically when the subslope is dragged.",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "2D Context of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 208,
            "description": "When the mouse hovers the subslope.",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 224,
            "description": "When the mouse leaves the subslope.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure left by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 241,
            "description": "When the mouse begins to drag the subslope.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure dragged by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 257,
            "description": "When the mouse is dragging the subslope.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure dragging by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 389,
            "description": "When the mouse stops dragging the subslope.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 399,
            "description": "Fired when the user stops dragging the subslope.",
            "itemtype": "event",
            "name": "wnp.subslope.drag-end",
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 414,
            "description": "Recalculates all the subslopes.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "structure",
                    "description": "The floor we want to update.\nNote that providing this parameter forces the update of the subslopes.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 454,
            "description": "Gets the list of the walls which can have a subslope.",
            "itemtype": "method",
            "name": "getSubSlopes",
            "params": [
                {
                    "name": "force",
                    "description": "Forces the subslopes to be updated.",
                    "type": "Noolean"
                },
                {
                    "name": "structure",
                    "description": "The related floor.",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 576,
            "description": "Splits the subslope in two subslopes, with the help of a subslope divider.",
            "itemtype": "method",
            "name": "splitSubSlope",
            "params": [
                {
                    "name": "sSS",
                    "description": "The subslope divided.",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "dSS",
                    "description": "The subslope dividing.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 637,
            "description": "Draws the subslopes.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 654,
            "description": "Draws the subslopes on a wall.",
            "itemtype": "method",
            "name": "drawOnWall",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 703,
            "description": "When the menu of the subslopes have to be drawn on the canvas to set the basics parameters.",
            "itemtype": "method",
            "name": "onContextMenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The JS event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the mouse.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data used for the drawing. Can be null or something else if you wish to override the function.",
                    "type": "Object"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 785,
            "description": "When a property change in the context menu.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "BABYLON.SubSlopeStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent2D.js",
            "line": 814,
            "description": "When the menu is removed.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope structure hovered by the mouse.",
                    "type": "SubSlopeStructure"
                }
            ],
            "class": "subSlopeComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 21,
            "description": "Id of the current subslope.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "currentID",
            "type": "{Number}",
            "class": "subSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 45,
            "description": "Event sent by the wallComponent3D when the wall is ready to be carved.",
            "itemtype": "event",
            "name": "",
            "type": "Walls: current wall, scene : the scene of wanaplan, structure: structure of the floor",
            "class": "subSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 61,
            "description": "Builds the CSG mesh which carves a part of the wall mesh.",
            "itemtype": "method",
            "name": "buildCSG",
            "params": [
                {
                    "name": "points",
                    "description": "Points of the subslope plane mesh.",
                    "type": "BABYLON.Vector3[]"
                },
                {
                    "name": "structure",
                    "description": "Structure of the SubSlope",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "Final CSG mesh.",
                "type": "BABYLON.CSG"
            },
            "class": "subSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 163,
            "description": "Adds the subslope mesh to the scene.",
            "itemtype": "method",
            "name": "addSubSlope",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "points",
                    "description": "Points of the subslope plane mesh.",
                    "type": "BABYLON.Vector3[]"
                },
                {
                    "name": "subSlope",
                    "description": "The current subslope.",
                    "type": "SubSlopeStructure"
                },
                {
                    "name": "structure",
                    "description": "The wall on which the subslope must be added.",
                    "type": "WallStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "subSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 315,
            "description": "Carves the wall with the big union of CSG.",
            "itemtype": "method",
            "name": "buildFromCSG",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "Mesh of the wall.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "wallCSG",
                    "description": "Mesh of the wall but in CSG.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "roomCSG",
                    "description": "CSG of the room.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "subslopeCSG",
                    "description": "CSG of all the subslope.",
                    "type": "BABYLON.CSG"
                },
                {
                    "name": "sceneF",
                    "description": "Current floor mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "subSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 357,
            "description": "Carves And creates subslopes for all the floor.",
            "itemtype": "method",
            "name": "drawSSForStructure",
            "params": [
                {
                    "name": "structure",
                    "description": "Current structure.",
                    "type": "FloorStructure"
                },
                {
                    "name": "sceneF",
                    "description": "Global scene of the floor.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "subSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeComponent3D.js",
            "line": 365,
            "description": "Fired when the subslope are drawn.",
            "itemtype": "event",
            "name": "wnp.engine3d.subslopesReady",
            "params": [
                {
                    "name": "floor",
                    "description": "Global scene of the floor.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "structure",
                    "description": "Current structure.",
                    "type": "wnp.floorStructure"
                },
                {
                    "name": "walls",
                    "description": "The final wallMeshes (The subslopes are in the wall mesh).",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "subSlopeComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 32,
            "description": "Test if the cursor is on on of the element and return it.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector representing the coord of the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "The target or null if nothing is under the cursor.",
                "type": "Object"
            },
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 72,
            "description": "Initialize the component for the menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 78,
            "description": "Fired when the component initialize, add in the menu the velux and the dormer.",
            "itemtype": "event",
            "name": "wnp.menu.main.add",
            "access": "private",
            "tagname": "",
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 149,
            "description": "When the cursor hovered the subslope, we draw the target.",
            "itemtype": "method",
            "name": "onHoverSubSlopeOverture",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 163,
            "description": "When we finish to drag the subslope.",
            "itemtype": "method",
            "name": "onDragEndSubSlope",
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 190,
            "description": "When the cursor leave the target.",
            "itemtype": "method",
            "name": "onLeave",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 204,
            "description": "Handle the dynamic draw when a subslope move.",
            "itemtype": "method",
            "name": "onDragDynamicDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 317,
            "description": "Compute the distance on the canvas between the different subslope overture.",
            "itemtype": "method",
            "name": "calculateDistance",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The 1st overture structure.",
                    "type": "wnp.subSlopesOvertureStructure"
                },
                {
                    "name": "subslopeOV2",
                    "description": "The 2nd overture structure.",
                    "type": "wnp.subSlopesOvertureStructure"
                },
                {
                    "name": "Vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "number",
                    "description": "Check the size we have to change.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance between the subslope overture.",
                "type": "Number"
            },
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 344,
            "description": "Return the point resulting from the intersection of a subslopeOverture and a subslope.",
            "itemtype": "method",
            "name": "getIntersectPoint",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopetructure"
                },
                {
                    "name": "Vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "number",
                    "description": "Check the size we have to change.",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "intersection.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 400,
            "description": "When the user select the dynamic draw.",
            "itemtype": "method",
            "name": "onSelectionDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 422,
            "description": "When the user change the type of overture, we change the event.",
            "itemtype": "method",
            "name": "changeAddStateVelux",
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 435,
            "description": "When the user change the type of overture, we change the event.",
            "itemtype": "method",
            "name": "changeAddStateSubSlopeOverture",
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 448,
            "description": "When the user add a velux.",
            "itemtype": "method",
            "name": "onAddVelux",
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 459,
            "description": "When the user add an overture.",
            "itemtype": "method",
            "name": "onAddSubSlopeOverture",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 477,
            "description": "When the user click and put the overture on the subslope.",
            "itemtype": "method",
            "name": "onAddSubSlopeOvertureClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 488,
            "description": "Fired when the subslope overture is deselect.",
            "itemtype": "event",
            "name": "wnp.menu.main.deselect",
            "access": "private",
            "tagname": "",
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 508,
            "description": "When the mouse move.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 541,
            "description": "Handle all the item of the context menu.",
            "itemtype": "method",
            "name": "onContextMenu",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 659,
            "description": "When a value is changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "value",
                    "description": "The changed value.",
                    "type": "Number|String"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 697,
            "description": "When the user remove the context menu.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "target",
                    "description": "The subslope overture structure changed value.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 709,
            "description": "Static draw.",
            "itemtype": "method",
            "name": "onStaticDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 734,
            "description": "Dynamic draw.",
            "itemtype": "method",
            "name": "onDynamicDraw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 753,
            "description": "When the user start dragging the subslope overture.",
            "itemtype": "method",
            "name": "onDragStart",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure hovered by the mouse.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 773,
            "description": "When the user move a subslopeOverture.",
            "itemtype": "method",
            "name": "onDraggingMove",
            "params": [
                {
                    "name": "event",
                    "description": "The event.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The target.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the cursor.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "The subslopeOverture selected.",
                    "type": "wnp.SubslopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "The context of the canvas.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 891,
            "description": "Duplicate the overture on the double click.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "l etat de la souris.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data.",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 917,
            "description": "Initiliaze the component for the menu.",
            "itemtype": "method",
            "name": "isInSubSlope",
            "params": [
                {
                    "name": "ssCoord",
                    "description": "Coordonnate of the subslope.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "ssOvCoord",
                    "description": "Coordonnate of the subslope overture.",
                    "type": "BABYLON.Vector2[]"
                },
                {
                    "name": "width",
                    "description": "The width of the subslope overture.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the subslope overture.",
                    "type": "Number"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 955,
            "description": "Put two overture at the same height if they are closed.",
            "itemtype": "method",
            "name": "appliedMagnetism",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the subslope overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "normalVector",
                    "description": "The normal vector of the wall of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "colVector",
                    "description": "A vector colinear to the wall vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 990,
            "description": "Applied the magnetism on the good side.",
            "itemtype": "method",
            "name": "appliedSideMagnetism",
            "params": [
                {
                    "name": "subslopeOV",
                    "description": "The subslope overture selected.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the subslope overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "normalVector",
                    "description": "The normal vector of the wall of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "colVector",
                    "description": "A vector colinear to the wall vector.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "moveVector",
                    "description": "The movment vector done with the cursor.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1042,
            "description": "Reorganize the subslopes overture of one subslope.",
            "itemtype": "method",
            "name": "reorganizeSubslopes",
            "params": [
                {
                    "name": "ssArray",
                    "description": "Array of all the overture of a subslope.",
                    "type": "wnp.subSlopeOvertureStructure[]"
                },
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "vector",
                    "description": "The vector of the wall.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1089,
            "description": "When stop dragging the subslope overture.",
            "itemtype": "method",
            "name": "onDragEnd",
            "params": [
                {
                    "name": "event",
                    "description": "The event catch.",
                    "type": "Event"
                },
                {
                    "name": "target",
                    "description": "The subslope overture structure.",
                    "type": "BABYLON.subSlopeOvertureStructure"
                },
                {
                    "name": "mstate",
                    "description": "The state of the current move.",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Important data used for the draw (null).",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1110,
            "description": "Check the size of the overture : Must be positive.",
            "itemtype": "method",
            "name": "checkCoherence",
            "params": [
                {
                    "name": "data",
                    "description": "The size of the subslope overture.",
                    "type": "Object"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1125,
            "description": "Check if a point is inside a side of an overture.",
            "itemtype": "method",
            "name": "isPointInOvertureSide",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector of the overture.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "overture",
                    "description": "The subslope overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1146,
            "description": "Draw the target : the subslope overture on the canvas.",
            "itemtype": "method",
            "name": "drawTarget",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "subslopeOverture",
                    "description": "The subslope overture structure.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1166,
            "description": "Draw an overture on the subslope.",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "overture",
                    "description": "The overturewhich have to be draw.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "The overture is selected or not.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1265,
            "description": "Draw a line between 2 positions of overture with the magnetism.",
            "itemtype": "method",
            "name": "drawMagnetism",
            "params": [
                {
                    "name": "ssOv1",
                    "description": "The 1st subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ssOv2",
                    "description": "The second subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1309,
            "description": "Draw the distance between 2 overture.",
            "itemtype": "method",
            "name": "drawCotes",
            "params": [
                {
                    "name": "ssOv1",
                    "description": "The 1st subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ssOv2",
                    "description": "The second subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to draw.",
                    "type": "Number"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureComponent2D.js",
            "line": 1395,
            "description": "Draw the distance between a subslope overture and the closest side of a subslope.",
            "itemtype": "method",
            "name": "drawCotesSS",
            "params": [
                {
                    "name": "ssOv",
                    "description": "The subslope overture.",
                    "type": "wnp.subSlopeOvertureStructure"
                },
                {
                    "name": "subslope",
                    "description": "The subslope of the overture.",
                    "type": "wnp.subSlopeStructure"
                },
                {
                    "name": "ctx",
                    "description": "Context 2D of the canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "translation",
                    "description": "The translation on the canvas.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "zoom",
                    "description": "The current zoom of the canvas.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The index point of the subslope.",
                    "type": "Number"
                },
                {
                    "name": "vector",
                    "description": "The vector.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "class": "wnp.subSlopeOvertureComponent2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 51,
            "description": "Serialization of the structure.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The string resulting of the serialization.",
                "type": "String"
            },
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 70,
            "description": "Deserialization of the structure.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "The serialized object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The structure of the serialized element.",
                "type": "wnp.subSlopeStructure"
            },
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 83,
            "description": "Return the parent of the subslopeOverture.",
            "itemtype": "method",
            "name": "getParent",
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 93,
            "description": "Set the parent of the subslope overture.",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "subslope",
                    "description": "The subslope.",
                    "type": "wnp.subSlopeStructure"
                }
            ],
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 120,
            "description": "Test if the vector is in the polygon.",
            "itemtype": "method",
            "name": "isTargeted",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 131,
            "description": "Test if the vector is in the polygon.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "The",
                    "description": "structure to remove.",
                    "type": "wnp.subSlopeOvertureStructure"
                }
            ],
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 142,
            "description": "Return the position on the canvas.",
            "itemtype": "method",
            "name": "getAbsolutePosition",
            "return": {
                "description": "The position and the vector.",
                "type": "Object"
            },
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeOvertureStructure.js",
            "line": 160,
            "description": "????",
            "itemtype": "method",
            "name": "to3D",
            "access": "private",
            "tagname": "",
            "class": "wnp.SubSlopeOvertureStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 20,
            "description": "The 2D base points of the subslope. \nThere is always 2 basepoints on a subslope, and they lay on the side of a wall.",
            "itemtype": "attribute",
            "name": "points",
            "type": "{BABYLON.Vector2[]}",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 28,
            "description": "Side on the wall (a wall can have several subslopes in both directions).\nWarning : This property is an array, but only the first element matters.\nthis.side[0] is a vector normal to the wall, indicating in which direction the subslope lays.",
            "itemtype": "attribute",
            "name": "side",
            "type": "{BABYLON.Vector2[]}",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 38,
            "description": "The wall structure associated to the subslope.",
            "itemtype": "attribute",
            "name": "wall",
            "type": "{PolygonWall}",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 45,
            "description": "The  walls adjacent to the subslope.",
            "itemtype": "attribute",
            "name": "neighbors",
            "type": "{PolygonWall[]}",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 52,
            "description": "The overtures on the subslope.",
            "itemtype": "attribute",
            "name": "overtures",
            "type": "{SubSlopesOvertureStructure[]}",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 59,
            "description": "The distance between the 2 side of the subslope : offset < wall.thickness <==> subslope does not need to be drawn.",
            "itemtype": "attribute",
            "name": "offset",
            "type": "{Number}",
            "default": "0",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 67,
            "description": "The materials of the subslopes.",
            "itemtype": "attribute",
            "name": "materials",
            "type": "{wnp.StandardMaterial}",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 74,
            "description": "The minimum height of the subslope.",
            "itemtype": "attribute",
            "name": "lowHeight",
            "type": "{Number}",
            "default": "80",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 82,
            "description": "The maximum height of the subslope.",
            "itemtype": "attribute",
            "name": "hiHeight",
            "type": "Number",
            "default": "250",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 90,
            "description": "The 2D polygon vertices of the subslope.\nThe lenght of this array is always 4 at all times.",
            "itemtype": "attribute",
            "name": "polygonPoints",
            "type": "BABYLON.Vector2[]",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 98,
            "description": "Update flag for the structure.\nSet to true if your subslope needs to be recomputed.",
            "itemtype": "attribute",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 142,
            "description": "Checks the coherency of the structure, for instance : \n     - this.lowHeight < this.hiHeight\n     - this.lowHeight > 0\n     - this.hiHeight < 4000\n\nWARNING : This method automatically corrects incoherency.\nSo it may modify the parameters of the subslope.",
            "itemtype": "method",
            "name": "checkCoherence",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 174,
            "description": "Searches the closest point of the carrying wall and return the index in the array.",
            "itemtype": "method",
            "name": "indexClosest",
            "params": [
                {
                    "name": "points",
                    "description": "The points of the wall carrying the subslope.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "The index of the closest point.",
                "type": "Number"
            },
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 185,
            "description": "Searches if the points are on the same side.",
            "itemtype": "method",
            "name": "isSameSide",
            "params": [
                {
                    "name": "points",
                    "description": "The points of the wall of the subslope.",
                    "type": "BABYLON.Vector2[]"
                }
            ],
            "return": {
                "description": "true if the points are on the same side.",
                "type": "Boolean"
            },
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 198,
            "description": "Returns a vector going from the base point 0 to the base point 1 of the subslope.",
            "itemtype": "method",
            "name": "getVector",
            "return": {
                "description": "The final vector.",
                "type": "BABYLON.Vector2"
            },
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 208,
            "description": "Returns the distance between 2 subslopes.",
            "itemtype": "method",
            "name": "distanceFrom",
            "params": [
                {
                    "name": "ss",
                    "description": "The subslope.",
                    "type": "SubSlopeStructure"
                }
            ],
            "return": {
                "description": "The distance.",
                "type": "Number"
            },
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 244,
            "description": "Computes the polygon points.",
            "itemtype": "method",
            "name": "computePolygonPoints",
            "params": [
                {
                    "name": "force",
                    "description": "Force to update the polygon points.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 340,
            "description": "Tests if a point is inside the subslope 2D polygon.",
            "itemtype": "method",
            "name": "isPointIn",
            "params": [
                {
                    "name": "pt",
                    "description": "The point we want to test.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "true if the point is inside the subslope polygon.",
                "type": "Boolean"
            },
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 354,
            "description": "Returns the 4 points defining the plane of the subslope in 3D.",
            "itemtype": "method",
            "name": "plane",
            "return": {
                "description": "The 4 points of the plane.",
                "type": "BABYLON.Vector3[]"
            },
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 384,
            "description": "Resets the subslope.",
            "itemtype": "method",
            "name": "remove",
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\SubSlope\\SubSlopeStructure.js",
            "line": 397,
            "description": "Gets the nearest subslope.",
            "itemtype": "method",
            "name": "getNearestSubSlope",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector of the subslope.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "The floor structure of the subslope.",
                    "type": "SubSlopeStructure"
                }
            ],
            "return": {
                "description": "The nearest subslope.",
                "type": "SubSlopeStructure"
            },
            "class": "wnp.subSlopeStructure",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\CurvedWall.js",
            "line": 141,
            "description": "Renvoie les axes entourant un point extrême d'un mur",
            "itemtype": "method",
            "name": "getAxis",
            "return": {
                "description": "Tableau contenant les 2 x 2 points.",
                "type": "Array"
            },
            "class": "CurvedWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 19,
            "description": "The 2D polygon shape of the wall.",
            "itemtype": "property",
            "name": "polygonPoints",
            "type": "{BABYLON.Vector2[]}",
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 70,
            "description": "Renvoie les axes entourant un point extrême d'un mur",
            "itemtype": "method",
            "name": "getAxis",
            "return": {
                "description": "Tableau contenant les 2 x 2 points.",
                "type": "Array"
            },
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 89,
            "description": "Effectue une translation du mur selon le vector donné.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "vector",
                    "description": "Vecteur de translation.",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "structure",
                    "description": "facultatif, structure dans laquelle ajouter un mur si la translation le nécessite",
                    "type": "Structure"
                }
            ],
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 228,
            "description": "Renvoie une liste d'intersection avec les autres murs de la structure\nLes extrémités des murs ne sont pas prises en compte comme intersections\nLe tableau est renvoyé trié par distance au point 0 du mur",
            "itemtype": "method",
            "name": "getIntersections",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "return": {
                "description": "[] Un Array de points d'intersection, avec les parents remplis",
                "type": "PointStructure"
            },
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 281,
            "description": "Sépare le mur en plusieurs aux intersections avec les autres murs de la structure",
            "itemtype": "method",
            "name": "splitAtIntersections",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 327,
            "description": "Tente de fusionner le mur avec les murs d'une structure",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "return": {
                "description": "le mur résultant, this si la méthode n'a rien réalisé",
                "type": "PolygonWall"
            },
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 506,
            "description": "Met à jour la position des points attachés à un mur",
            "itemtype": "method",
            "name": "updateAttachedPoints",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\PolygonWall.js",
            "line": 549,
            "description": "Calcule le point du milieu du rectangle du mur le plus proche des coordonnées données.\nmême effet que getNearestPoint si le mur est déjà rectangle",
            "itemtype": "method",
            "name": "getNearestPointOnRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le point du mur le plus proche.",
                    "type": "BABYLON.Vector3"
                }
            ],
            "return": {
                "description": "Point le plus proche du vecteur donné.",
                "type": "BABYLON.Vector3"
            },
            "class": "PolygonWall",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 174,
            "description": "Détermine si le curseur se trouve au dessus de l'un des éléments\ngérés par le composant et le retourne.",
            "itemtype": "method",
            "name": "getTargeted",
            "params": [
                {
                    "name": "vector",
                    "description": "Vecteur représentant les coordonées du curseur.",
                    "type": "BABYLON.Vector3"
                }
            ],
            "return": {
                "description": "L'élément ciblé par le curseur ou null si rien ne\n                 se trouve sous le curseur.",
                "type": "Object"
            },
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 195,
            "description": "Simplification des murs trop petits",
            "itemtype": "method",
            "name": "simplifyWalls",
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 238,
            "description": "Dessine toutes les côtes",
            "itemtype": "method",
            "name": "_drawMeasures",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Contexte 2D du canvas.",
                    "type": "Object"
                },
                {
                    "name": "la",
                    "description": "translation",
                    "type": "Translation"
                },
                {
                    "name": "le",
                    "description": "zoom",
                    "type": "Zoom"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 254,
            "description": "Ajout du premier point d'un mur.",
            "itemtype": "method",
            "name": "_addWallFirstPoint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                },
                {
                    "name": "point",
                    "description": "Point 0 du mur (optionnel)",
                    "type": "PointStructure"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 290,
            "description": "Ajoutes le second point d'un mur et insert le mur dans la struct.",
            "itemtype": "method",
            "name": "_addWallUpdate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent2D.js",
            "line": 325,
            "description": "Met à jour le mur temporaire.",
            "itemtype": "method",
            "name": "_addWallUpdate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                }
            ],
            "class": "WallComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 40,
            "description": "evenement renvoyé par le floorComponent3d une fois que l'object3d correspondant à l'étage est ajouté à la scene",
            "itemtype": "event",
            "name": ":",
            "type": "Scene : la scene demandée, structure: la structure en cours",
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 64,
            "description": "Retourne l'équivalent 3D (mesh) d'un mur 2D",
            "itemtype": "method",
            "name": "get3DWallFrom2D",
            "params": [
                {
                    "name": "2Dwall",
                    "description": "Le mur 2D",
                    "type": "WallStructure"
                }
            ],
            "return": {
                "description": "Le mur 3D",
                "type": "THREE.Mesh"
            },
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 77,
            "description": "Remplace un mur par un autre mur (meshes), en gardant la synchro 2D 3D",
            "itemtype": "method",
            "name": "replaceWall",
            "params": [
                {
                    "name": "oldWall",
                    "description": "Ancien mur",
                    "type": "THREE.Mesh"
                },
                {
                    "name": "newWall",
                    "description": "Nouveau mur",
                    "type": "THREE.Mesh"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 125,
            "description": "Decoration des murs, fonction spécifique pour la décoration des murs (inclu les murs, les ouvertures et les sous-pentes)",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "Materiel",
                    "description": "utilisé pour décorer le mur",
                    "type": "Material"
                },
                {
                    "name": "Information",
                    "description": "necessaires sur la collision du rayon avec le mur",
                    "type": "CollisionInfo"
                }
            ],
            "return": {
                "description": "Ancien matériel, utilisé pour l'historique",
                "type": "OldMaterial"
            },
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 169,
            "description": "Methode principal de WallComponent3D: Crée les maillages et les sous-maillages en appliquant les bonnes textures au mur.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "Structure",
                    "description": "de l'étage",
                    "type": "Structure"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 227,
            "description": "Fonction qui crée les faces des murs",
            "itemtype": "method",
            "name": "buildFace4",
            "params": [
                {
                    "name": "Point",
                    "description": "0 provenant de la 2D",
                    "type": "Pt0"
                },
                {
                    "name": "Point",
                    "description": "1 provenant de la 2D",
                    "type": "Pt1"
                },
                {
                    "name": "elevation",
                    "description": "du mur",
                    "type": "ElevationOffset"
                },
                {
                    "name": "Index",
                    "description": "du material dans le multimaterial du maillage principal",
                    "type": "MaterialIndex"
                },
                {
                    "name": "COté",
                    "description": "du mur",
                    "type": "WallSide"
                },
                {
                    "name": "Hauteur",
                    "description": "de départ de l'étage",
                    "type": "ElevationStart"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 468,
            "description": "Compatibilité anciennes versions des murs",
            "itemtype": "method",
            "name": "migrateMaterials",
            "params": [
                {
                    "name": "Liste",
                    "description": "des murs",
                    "type": "Walls"
                },
                {
                    "name": "Murs",
                    "description": "",
                    "type": "InternalPanes"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 532,
            "description": "Method permettant de switcher la transparence des murs d'un étage. \nUtilisé lors des changements de mode.",
            "itemtype": "method",
            "name": "switchTransparentStatusByStructure",
            "params": [
                {
                    "name": "Structure",
                    "description": "de l'étage",
                    "type": "Structure"
                },
                {
                    "name": "Point",
                    "description": "1 provenant de la 2D",
                    "type": "Transparent"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallComponent3D.js",
            "line": 572,
            "description": "Créé les tableaux d'instance et de bounding box à partir des subMesh\nUne partie de mur qui n'a pas d'objet instance (sauf exception) est éliminée des mesh",
            "itemtype": "method",
            "name": "createInstances",
            "params": [
                {
                    "name": "Maillage",
                    "description": "du mur",
                    "type": "WallMesh"
                }
            ],
            "class": "WallComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 53,
            "description": "Adds or changes a material for the wall pane.",
            "itemtype": "method",
            "name": "addMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new Material",
                    "type": "BABYLON.Material"
                }
            ],
            "return": {
                "description": "The old material, null if the WallPane did not have a material.",
                "type": "BABYLON.Material"
            },
            "class": "WallStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 69,
            "description": "Serializes the object (to JSON)",
            "itemtype": "method",
            "name": "serialize",
            "class": "WallStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallPane3D.js",
            "line": 80,
            "description": "Deserializes the object (from JSON)",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 21,
            "description": "Two 2D vectors building the ends of the wall.",
            "itemtype": "property",
            "name": "points",
            "type": "{BABYLON.Vector2[2]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 29,
            "description": "The two polygons surrounding the ends.",
            "itemtype": "property",
            "name": "_edgePolygons",
            "type": "{BABYLON.Vector2[][2]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 37,
            "description": "Attached points. See Wanaplan Wiki for more info about the connections between walls.",
            "itemtype": "property",
            "name": "attachedPoints",
            "type": "{PointStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 45,
            "description": "Overtures (doors, windows, bay windows ...)",
            "itemtype": "property",
            "name": "overtures",
            "type": "{OvertureStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 53,
            "description": "Wall height.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "default": "250",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 62,
            "description": "Wall thickness.",
            "itemtype": "property",
            "name": "thickness",
            "type": "{Number}",
            "default": "30",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 71,
            "description": "2D minimum distance to display the measure",
            "itemtype": "property",
            "name": "measureDist",
            "type": "{Number}",
            "default": "15",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 80,
            "description": "Flag to enable/disable measure display",
            "itemtype": "property",
            "name": "measureDisplayed",
            "type": "{Boolean}",
            "default": "true",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 89,
            "description": "Subslope list for this wall.",
            "itemtype": "property",
            "name": "subSlopes",
            "type": "{SubSlopeStructure[]}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 97,
            "description": "Flag that signals if the geometry of the wall must be re-computed.",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "{Boolean}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 105,
            "description": "Class type of the wall.\ne.g. : 'polygon' for polygonal walls, which are most used in wanaplan",
            "itemtype": "property",
            "name": "instance",
            "type": "{String}",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 118,
            "description": "Type of the wall.\nCan be TYPE_NORMAL or TYPE_SEPARATOR.\nTODO : Must be deleted in future version, \nthis has to be replaced by a class \"SeparatorWall\" that has its own behaviour.",
            "itemtype": "property",
            "name": "type",
            "type": "{Number}",
            "default": "TYPE_NORMAL",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 138,
            "description": "Serialise l'objet.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "Une chaine resultant de la sérialisation de l'objet.",
                "type": "String"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 178,
            "description": "Désérialise l'objet.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serializedWall",
                    "description": "Une chaine resultant d'une sérialisation.",
                    "type": "String"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 292,
            "description": "Mise à jour du mur parent après la désérialisation.",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "La structure contenant cet instance.",
                    "type": "BaseStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 331,
            "description": "Déserialise une collection de murs.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "Un",
                    "description": "tableau contenant des données de sérialisation de murs.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Retourne un tableau de murs désérialisés.",
                "type": "Array"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 350,
            "description": "Obtenir les points qui composent le mur.",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "index",
                    "description": "Index du point (optionnel).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Si un index a été fournit, retourne le point correspondant à l'index.\n        Sinon retourne un tableau contenant les deux points."
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 389,
            "description": "Change les points composant le mur.",
            "itemtype": "method",
            "name": "setPoints",
            "params": [
                {
                    "name": "points",
                    "description": "Tableau composé de deux instance de `PointStructure`\n              ou instance de `PointStructure`."
                },
                {
                    "name": "index",
                    "description": "Index du point (0 ou 1) si `points` est une\n                   instance de `PointStructure`.",
                    "type": "Number"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 432,
            "description": "Calcule les points se trouvant aux extémités du mur.",
            "itemtype": "method",
            "name": "computeBoundPoints",
            "params": [
                {
                    "name": "structure",
                    "description": "la structure courante"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 450,
            "description": "Calcule le vecteur représentant le mur.",
            "itemtype": "method",
            "name": "getWallVector",
            "return": {
                "description": "Vecteur représentant le mur.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 460,
            "description": "Calcule la longueur du mur",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "La longueur du mur.",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 492,
            "description": "Cette méthode doit être appelée lorsque qu'une structure associée\na subi une modification.",
            "itemtype": "method",
            "name": "update.",
            "params": [
                {
                    "name": "structure",
                    "description": "La structure.",
                    "type": "BaseStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 504,
            "description": "Effectue une translation du mur selon le vector donné.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "vector",
                    "description": "Vecteur de translation.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "facultatif, structure dans laquelle ajouter un mur si la translation le nécessite",
                    "type": "Structure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 516,
            "description": "Renvoie une liste d'intersections (géométriques) avec les autres murs de la structure\nLes extrémités des murs ne sont pas prises en compte comme intersections\nLe tableau est renvoyé trié par distance au point 0 du mur",
            "itemtype": "method",
            "name": "getIntersections",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "return": {
                "description": "[] Un Array de points d'intersection, avec les parents remplis",
                "type": "PointStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 569,
            "description": "Sépare le mur en plusieurs aux intersections avec les autres murs de la structure",
            "itemtype": "method",
            "name": "splitAtIntersections",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 580,
            "description": "Distribue les murs attachés et les ouvertures lors d'un split de murs",
            "itemtype": "method",
            "name": "reorganizeOnSplit",
            "params": [
                {
                    "name": "la",
                    "description": "structure courante",
                    "type": "Structure"
                },
                {
                    "name": "les",
                    "description": "murs séparés",
                    "type": "WallList"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 635,
            "description": "Change un point extrème du mur par un point attaché, qui devient alors le nouveau point extrème du mur",
            "itemtype": "method",
            "name": "weakToStrong",
            "params": [
                {
                    "name": "le",
                    "description": "point attaché à renforcer",
                    "type": "PointStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 682,
            "description": "Tente de fusionner le mur avec les murs d'une structure",
            "itemtype": "method",
            "name": "tryMerge",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "return": {
                "description": "le mur résultant, this si la méthode n'a rien réalisé",
                "type": "WallStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 694,
            "description": "Met à jour la position des points attachés à un mur",
            "itemtype": "method",
            "name": "updateAttachedPoints",
            "params": [
                {
                    "name": "la",
                    "description": "structure à parcourir",
                    "type": "Structure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 714,
            "description": "Calcule le point du mur le plus proche des coordonnées données.",
            "itemtype": "method",
            "name": "getNearestPoint",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le point du mur le plus proche.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Point du mur le plus proche du vecteur donné.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 740,
            "description": "Calcule le point de l'axe du mur le plus proche des coordonnées données.\nmême effet que getNearestPoint mais en prolongeant le mur en une droite infinie",
            "itemtype": "method",
            "name": "getNearestPointOnAxe",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le point du mur le plus proche.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Point du mur le plus proche du vecteur donné.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 759,
            "description": "Calcule le point du milieu du rectangle du mur le plus proche des coordonnées données.\nmême effet que getNearestPoint si le mur est déjà rectangle",
            "itemtype": "method",
            "name": "getNearestPointOnRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le point du mur le plus proche.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Point le plus proche du vecteur donné.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 773,
            "description": "Retourne true si le point est dans le polygone du mur",
            "itemtype": "method",
            "name": "isPointInPolygon",
            "params": [
                {
                    "name": "vector",
                    "description": "Point",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Si le point est dans le polygone du mur",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 810,
            "description": "Calcule le point du polygone du mur le plus proche du point donné",
            "itemtype": "method",
            "name": "getNearestPointOnRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le point du mur le plus proche.",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Point le plus proche du vecteur donné.",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 843,
            "description": "Calcule la boîte englobante du mur",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "1er élément : min, 2ème élément : max `[BABYLON.Vector2, BABYLON.Vector2]`",
                "type": "Array"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 872,
            "description": "Calcule le mur le plus proche du point donné",
            "itemtype": "method",
            "name": "getNearestWall",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le mur le plus proche.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "Structure à parcourir.",
                    "type": "Structure"
                }
            ],
            "return": {
                "description": "Le mur le plus proche",
                "type": "WallStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 898,
            "description": "Calcule le mur le plus proche du point donné",
            "itemtype": "method",
            "name": "getNearestWall",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le mur le plus proche.",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "Structure à parcourir.",
                    "type": "Structure"
                }
            ],
            "return": {
                "description": "Le mur le plus proche",
                "type": "WallStructure"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 922,
            "description": "Calcule la distance d'un point à un mur",
            "itemtype": "method",
            "name": "distanceFrom",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche la distance au mur",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Distance au mur",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 938,
            "description": "Calcule la distance d'un point au rectangle englobant le mur",
            "itemtype": "method",
            "name": "distanceFromRect",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche la distance au mur",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "structure",
                    "description": "La structure courante (facultatif, pour recalcul)",
                    "type": "FloorStructure"
                }
            ],
            "return": {
                "description": "Distance au mur",
                "type": "Number"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 955,
            "description": "Renvoie le vecteur qui relie un point à un mur, sens mur -> point",
            "itemtype": "method",
            "name": "vectorTo",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on recherche le vecteur au mur",
                    "type": "BABYLON.Vector2"
                }
            ],
            "return": {
                "description": "Vecteur partant du mur",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 971,
            "description": "Vérifie si un point appartient à un mur, avec une incertitude delta",
            "itemtype": "method",
            "name": "isPointOn",
            "params": [
                {
                    "name": "vector",
                    "description": "Point dont on teste l'appartenance",
                    "type": "BABYLON.Vector2"
                },
                {
                    "name": "delta",
                    "description": "Incertitude (optionnel)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Appartenance ou non",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 985,
            "description": "Renvoie un vecteur orthogonal",
            "itemtype": "method",
            "name": "getNormalVector",
            "params": [
                {
                    "name": "norm",
                    "description": "Optionnel, la norme voulue du vecteur renvoyé",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Vecteur orthogonal",
                "type": "BABYLON.Vector2"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1002,
            "description": "Trie la liste des points attachés au mur (du point 0 au point 1)",
            "itemtype": "method",
            "name": "sortAttached",
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1014,
            "description": "Renvoie tous les points du mur (extrémités et attachés) dans l'ordre spécifié (-1 décroissant, 1 croissant)",
            "itemtype": "method",
            "name": "getAllPoints",
            "return": {
                "description": "Tableau contenant tous les points du mur",
                "type": "Array"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1031,
            "description": "Supprimer le mur.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "structure",
                    "description": "La structure d'où il faut supprimer le mur. (optionnel)",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1076,
            "description": "Ajoute le mur et ses points à la structure.",
            "itemtype": "method",
            "name": "addToStructure",
            "params": [
                {
                    "name": "structure",
                    "description": "La structure dans laquelle il faut ajouter le mur.",
                    "type": "FloorStructure"
                }
            ],
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\CoreComponents\\Wall\\WallStructure.js",
            "line": 1090,
            "description": "Vérifie si le mur est parallèle à un autre.",
            "itemtype": "method",
            "name": "paralleleTo",
            "params": [
                {
                    "name": "wall",
                    "description": "Mur à comparer",
                    "type": "WallStructure"
                }
            ],
            "return": {
                "description": "true si les murs sont parallèles, false dnas le cas contraire.",
                "type": "Boolean"
            },
            "class": "WallStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "line": 71,
            "class": "wnp.GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent2D.js",
            "line": 73,
            "class": "wnp.GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "line": 56,
            "class": "wnp.GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\DebugComponent\\DebugComponent3D.js",
            "line": 58,
            "class": "wnp.GridComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 30,
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.GridComponent3D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 63,
            "description": "Création du sol.",
            "itemtype": "method",
            "name": "createGround",
            "class": "wnp.GridComponent3D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 122,
            "description": "Création de l'éclairage global de la scène",
            "itemtype": "method",
            "name": "setupLights",
            "class": "wnp.GridComponent3D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 177,
            "description": "Méthode callback appelée pour changer la texture du sol de la scène.",
            "itemtype": "method",
            "name": "onChangeGround",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement",
                    "type": "Object"
                }
            ],
            "class": "wnp.GridComponent3D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GridComponent\\GridComponent3D.js",
            "line": 189,
            "description": "Méthode callback appelée pour changer la texture du ciel.",
            "itemtype": "method",
            "name": "onChangeSky",
            "params": [
                {
                    "name": "event",
                    "description": "L'objet associé à l'événement",
                    "type": "Object"
                }
            ],
            "class": "wnp.GridComponent3D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GridComponent\\GridStructure.js",
            "line": 9,
            "description": "Sauvegarde du sol et du ciel.",
            "itemtype": "method",
            "name": "serialize",
            "class": "HistoryComponent",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GridComponent\\GridStructure.js",
            "line": 18,
            "description": "Restoration du sol et du ciel",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "Un",
                    "description": "objet serialisé.",
                    "type": "Object"
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "class": "HistoryComponent",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorPanelComponent3D.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "answer": "event thrown by ConfiguratorModComponent",
            "class": "HistoryComponent",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorPanelComponent3D.js",
            "line": 88,
            "description": "TODO",
            "itemtype": "method",
            "name": "openEditBox",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "class": "HistoryComponent",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 63,
            "description": "Set the parameter of the class Action.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 80,
            "description": "Reset the totality of the current history.",
            "itemtype": "method",
            "name": "reset",
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 92,
            "description": "Enregistre un composant pour qu'il puisse utiliser les fonctions d'historique",
            "params": [
                {
                    "name": "component",
                    "description": "Le composant à enregistrer"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 103,
            "description": "Save an action which can be undo from a component.",
            "itemtype": "method",
            "name": "registerAction",
            "params": [
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "undoFunction",
                    "description": "The function call after doing a ctrl-z.",
                    "type": "Function"
                },
                {
                    "name": "redoFunction",
                    "description": "The function call after doing a ctrl-y.",
                    "type": "Function"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 124,
            "description": "Add an history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 144,
            "description": "Redo the action by calling the redoFunction of the type action when the ctrl-z is push.",
            "itemtype": "method",
            "name": "redo",
            "params": [
                {
                    "name": "action",
                    "description": "The action in the history stack.",
                    "type": "Action"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 155,
            "description": "Undo the action by calling the undoFunction of the type action when the ctrl-z is push.",
            "itemtype": "method",
            "name": "undo",
            "params": [
                {
                    "name": "action",
                    "description": "The action in the history stack.",
                    "type": "Action"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 166,
            "description": "Get the action in the stack and undo it.",
            "itemtype": "method",
            "name": "controlZ",
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 185,
            "description": "Get the action in the stack and redo it.",
            "itemtype": "method",
            "name": "controlY",
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 201,
            "description": "Dispatch on the good action when the ctrl-z or ctrl-y are pushed.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "Event catch.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryComponent.js",
            "line": 218,
            "description": "Call when the rotator is moved.",
            "itemtype": "method",
            "name": "onRotatorAction",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "Event catch.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Action",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 54,
            "description": "Initialize the component.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 79,
            "description": "Destroy all the event.",
            "itemtype": "method",
            "name": "destroy",
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 99,
            "description": "Change the wall transparency.",
            "itemtype": "method",
            "name": "switchTransparencyMode",
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 130,
            "description": "Set the transparency mode.",
            "itemtype": "method",
            "name": "switchTransparencyMode",
            "params": [
                {
                    "name": "transparency",
                    "description": "The transparency mode.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 144,
            "description": "Cancel the last modification.",
            "itemtype": "method",
            "name": "undo",
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 157,
            "description": "Redo the last modification cancel.",
            "itemtype": "method",
            "name": "redo",
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 170,
            "description": "When the user switch the context 2D/3D.",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "context",
                    "description": "The context (2D/3D).",
                    "type": "String"
                }
            ],
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 198,
            "description": "When the user change the transparency mode on On by clicking on the button.",
            "itemtype": "method",
            "name": "onWallTransparencyOn",
            "params": [
                {
                    "name": "event",
                    "description": "The event send.",
                    "type": "Event"
                }
            ],
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 215,
            "description": "When the user change the transparency mode on Off by clicking on the button.",
            "itemtype": "method",
            "name": "onWallTransparencyOff",
            "params": [
                {
                    "name": "event",
                    "description": "The event send.",
                    "type": "Event"
                }
            ],
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\HistoryComponent\\HistoryEditionComponent.js",
            "line": 232,
            "description": "When the user change the context.",
            "itemtype": "method",
            "name": "onEngineSwitched",
            "params": [
                {
                    "name": "event",
                    "description": "The event send.",
                    "type": "Event"
                }
            ],
            "class": "wnp.HistoryEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 23,
            "description": "Initialize the component by adding a new entry in the top menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\BaseTopMenuComponent2D.js",
            "line": 35,
            "description": "Called when the component is destroyed. The menu item is removed.",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseTopMenuComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 34,
            "description": "Exit the plan and redirect the user to the exit url (see api.exitUrl)",
            "itemtype": "method",
            "name": "doExit",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\ExitComponent.js",
            "line": 51,
            "description": "Display a confirm dialog and exit if the user click on exit button.",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "ExitComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 56,
            "description": "Toggle to fullscreen mode.",
            "itemtype": "method",
            "name": "toggleFullscreen",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\FullscreenComponent.js",
            "line": 77,
            "description": "Called when the fullscreen mode change. It fix the fullscreen button.",
            "itemtype": "method",
            "name": "onFullScreenChange",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "FullscreenComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 36,
            "description": "Create a new plan.",
            "itemtype": "method",
            "name": "createNewPlan",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\InternalComponents\\NewComponent.js",
            "line": 56,
            "description": "Create a new plan by destroying the previous one but by conserving the historic.",
            "itemtype": "method",
            "name": "launchProcess",
            "class": "NewComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 24,
            "description": "Display or hide the lock icon when context change.",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "context",
                    "description": "The context : 2D or 3D.",
                    "type": "String"
                }
            ],
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 38,
            "description": "Initialize objects and add a custom stylesheet.",
            "itemtype": "method",
            "name": "initialize",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 60,
            "description": "Remove the icon from the menu and stop event listeneing.",
            "itemtype": "method",
            "name": "destroy",
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\LockComponent\\LockComponent.js",
            "line": 69,
            "description": "Toggle to lock or unlock.",
            "itemtype": "method",
            "name": "toggleLock",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "LockComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 47,
            "description": "Ajouter un point virtuel utilisé pour le magnétisme.",
            "itemtype": "method",
            "name": "addVirtualPoint",
            "params": [
                {
                    "name": "componentName",
                    "description": "Nom du composant",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "Point à ajouter (`pointStructure` ou `BABYLON.Vector3`)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "index du point ajouté.",
                "type": "Number"
            },
            "class": "wnp.MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 74,
            "description": "Supprimer un point virtuel.",
            "itemtype": "method",
            "name": "removeVirtualPoint",
            "params": [
                {
                    "name": "componentName",
                    "description": "Nom du composant",
                    "type": "String"
                },
                {
                    "name": "pointIndex",
                    "description": "Index du point à supprimer. Supprime tous les points du composant si égale à `null`",
                    "type": "Number"
                }
            ],
            "class": "wnp.MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 92,
            "description": "Applique un magnétisme basé sur les points au `mstate` fournit.",
            "itemtype": "method",
            "name": "applyPointMag",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'objet `mstate`",
                    "type": "Object"
                }
            ],
            "class": "wnp.MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 106,
            "description": "Détermine si le magnétisme doit être cours circuité ou non. (lorsque l'utilisateur appuie sur <Ctrl>).",
            "itemtype": "method",
            "name": "_shortCircuitMagnetism",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Retourne `true` si le magnétisme doit être cours-circuité, `false` dans le cas contraire.",
                "type": "Boolean"
            },
            "class": "wnp.MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 123,
            "description": "Applique le magnétisme de la souris en fonction des points présents sur le plan.",
            "itemtype": "method",
            "name": "_magFromPoints",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                },
                {
                    "name": "ignorePoint",
                    "description": "Point à ignorer (optionnel).",
                    "type": "PointStructure"
                }
            ],
            "class": "wnp.MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 191,
            "description": "Applique le magnétisme de la souris pour aligner les murs",
            "itemtype": "method",
            "name": "_globalWallMag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                },
                {
                    "name": "wallList",
                    "description": "Liste de murs à considérer pour le magnétisme (optionnel)",
                    "type": "PointStructure"
                }
            ],
            "class": "wnp.MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent2D.js",
            "line": 288,
            "description": "Applique le magnétisme de la souris en fonction des murs présents sur le plan.",
            "itemtype": "method",
            "name": "_magFromWalls",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mstate",
                    "description": "L'état de la souris.",
                    "type": "Object"
                },
                {
                    "name": "wallList",
                    "description": "Liste de murs à considérer pour le magnétisme (optionnel)",
                    "type": "PointStructure"
                }
            ],
            "class": "wnp.MagnetismComponent2D",
            "module": "Wanaplan",
            "submodule": "Component",
            "namespace": "wnp"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 34,
            "description": "set the position of the object in order to avoid collision with surrounding object of the scene",
            "itemtype": "method",
            "name": "validateObjectVerticalTranslation",
            "params": [
                {
                    "name": "obox",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "wishedY",
                    "description": "the wished center of the object along the y axis ( as in object.position.y )",
                    "type": "Number"
                },
                {
                    "name": "previousY",
                    "description": "[optional] the previous center of the object along the y axis ( as in object.position.y ) ( is ommited, set to the current center of the obejct )",
                    "type": "Number"
                }
            ],
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 81,
            "description": "set the position and rotation ( if the object rise the correct flag ) of the object in order to avoid collision with surrounding object of the scene",
            "itemtype": "method",
            "name": "validateObjectHorizontalTranslation",
            "params": [
                {
                    "name": "obox",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "wishedPosition",
                    "description": "the wished center of the object in the xz plan ( as in object.position.y )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "previousPosition",
                    "description": "[optional] the previous center of the object ( as in object.position.y ) ( is ommited, set to the current center of the obejct )",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "previousYrotation",
                    "description": "[optional] the previous rotation along y axis of the object ( is ommited, set to the current y rotation of the obejct )",
                    "type": "Number"
                }
            ],
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 147,
            "description": "return a set of flags that describe how the object should be treated",
            "itemtype": "method",
            "name": "getMagnetismParams",
            "params": [
                {
                    "name": "object",
                    "description": "the object",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "* allowRotation           {boolean}  : the object will rotate when it contact an obstacle if the rotated solution fit better, work only with obstacle which have the _influenceRotation flag\n     * allowFullRotation       {boolean}  : same thing, but not restricted to one kind of obstacle\n     * allowFurnitureClimbing  {boolean}  : when moving in the xz plan, the object will translate along the y axis when it contact obstacle that can be climb ( flag climbable on )\n     * preferedAngle           {number}   : the object will tends to be rotated in order to form the angle prefereAngle between it and the closest edge",
                "type": "Object"
            },
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 177,
            "description": "compute the best fit for the object, considering the set of boxes surrounding when the object is translated in the xz plan\n\nwill translate the objectBox in the xy plan, or rotate along the y axis ( if the flag allow rotation is set ) in order to avoid collision with neighbours",
            "itemtype": "method",
            "name": "resolveHorizontalTranslation",
            "params": [
                {
                    "name": "obox",
                    "description": "the Oriented along y axis Bounding Box of the object",
                    "type": "ObjectHelper.OyBB"
                },
                {
                    "name": "wishedPosition",
                    "description": "the wished center of the object",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "neighbours",
                    "description": "a list of OyBB which surround the object",
                    "type": "Array of OyBB"
                },
                {
                    "name": "magnParam",
                    "description": "a set of option { allowRotation:boolean , allowFullRotation:boolean , allowFurnitureClimbing:true , preferedAngle:number }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "{position,angle} where position and angle are the best solution found, or false if a solution can't be found",
                "type": "Object"
            },
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MagnetismComponent\\MagnetismComponent3D.js",
            "line": 355,
            "description": "compute the best fit for the object, considering the set of boxes surrounding when the object is translated on the y axis\n\nwill translate the objectBox along the y axis in order to avoid collision with neighbours",
            "itemtype": "method",
            "name": "resolveVerticalTranslation",
            "params": [
                {
                    "name": "obox",
                    "description": "the Oriented along y axis Bounding Box of the object",
                    "type": "ObjectHelper.OyBB"
                },
                {
                    "name": "wishedY",
                    "description": "the wished center of the object along the y axis",
                    "type": "Number"
                },
                {
                    "name": "neighbours",
                    "description": "a list of OyBB which surround the object",
                    "type": "Array of OyBB"
                },
                {
                    "name": "floorElevation",
                    "description": "the floor elevation",
                    "type": "Number"
                },
                {
                    "name": "dropped",
                    "description": "[optional] if true, put the object on top of the one below it",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the best solution found for the center of the objectBox, along the y axis",
                "type": "Number"
            },
            "class": "MagnetismComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 79,
            "description": "Dessine la côte du mur en cours en pose",
            "itemtype": "method",
            "name": "drawTmpWallMesure",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Contexte 2D du canvas.",
                    "type": "Object"
                },
                {
                    "name": "la",
                    "description": "translation",
                    "type": "Translation"
                },
                {
                    "name": "le",
                    "description": "zoom",
                    "type": "Zoom"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 107,
            "description": "Dessine toutes les côtes",
            "itemtype": "method",
            "name": "draw",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Contexte 2D du canvas.",
                    "type": "Object"
                },
                {
                    "name": "la",
                    "description": "translation",
                    "type": "Translation"
                },
                {
                    "name": "le",
                    "description": "zoom",
                    "type": "Zoom"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 162,
            "description": "Dessine une cote.",
            "itemtype": "method",
            "name": "__drawMeasureSlice",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "Contexte 2D du canvas.",
                    "type": "Object"
                },
                {
                    "name": "la",
                    "description": "translation",
                    "type": "Translation"
                },
                {
                    "name": "le",
                    "description": "zoom",
                    "type": "Zoom"
                },
                {
                    "name": "v1",
                    "description": "Vecteur représentant le premier point de la cote.",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "Vecteur représentant le second point de la cote.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "La nouvelle cote.",
                "type": "Number"
            },
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MeasureComponent\\MeasureComponent.js",
            "line": 185,
            "description": "Ajoute les ouvertures dans la liste des points à dessiner pour les mesures sur les murs",
            "itemtype": "method",
            "name": "__addOvertureIntersections",
            "params": [
                {
                    "name": "wall",
                    "description": "Le mur considéré",
                    "type": "WallStructure"
                },
                {
                    "name": "intersections",
                    "description": "La liste des points actuelle de la mesure",
                    "type": "Object"
                }
            ],
            "class": "MeasureComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MenuComponents\\TopMenuComponent.js",
            "line": 2,
            "description": "translation hack\n_(\"Capture\") _(\"New\") _(\"Save\") _(\"Options\") _(\"Change language\") _(\"Full Screen\")",
            "class": "MobileComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 63,
            "description": "Disable/Remove some unecessary components ans applying some mobile configuration.",
            "itemtype": "method",
            "name": "initialize",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 95,
            "description": "Apply configuration for mobile (graphics, performances). This method is called when all components are initialized.",
            "itemtype": "method",
            "name": "onCoreInitialized",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileComponent.js",
            "line": 170,
            "description": "Toggle the visibility of the left menu.",
            "itemtype": "method",
            "name": "_toggleMenu",
            "class": "MobileComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 28,
            "description": "Destroy the component and remove all listeners.",
            "itemtype": "method",
            "name": "destroy",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 36,
            "description": "Bind input event listeners",
            "itemtype": "method",
            "name": "_bindListeners",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 50,
            "description": "Unbind event listeners.",
            "itemtype": "method",
            "name": "_unbindListeners.",
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 64,
            "description": "Method called when an input method is detected. The method disable the input method which is not necessary.",
            "itemtype": "method",
            "name": "_onInputChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Event"
                }
            ],
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\MobileComponent\\MobileInputComponent.js",
            "line": 93,
            "description": "Remove an input method support (touch or mouse).",
            "itemtype": "method",
            "name": "removeInputSupport",
            "params": [
                {
                    "name": "type",
                    "description": "The type of input method to remove (touch or mouse).",
                    "type": "String"
                }
            ],
            "class": "MobileInputComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\OctreeComponent\\LargeHolyCollider.js",
            "line": 78,
            "description": "return the first object which collide with the ray and satisfy the validator condition",
            "itemtype": "method",
            "name": "launchRay",
            "params": [
                {
                    "name": "ray",
                    "description": "the ray",
                    "type": "BABYLON.Ray"
                },
                {
                    "name": "validator",
                    "description": "[optional] a function which return true if the object is satisfying, default is always true. This function receive in argument a wrapper ( which contains the mesh and the bounding box )",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "BABYLON.CollideInfo | null"
            },
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "LargeHolyColliderDebuger",
                "OctreePartitionerFactory"
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "line": 1,
            "extends": "BaseComponent3D",
            "requires": [
                "ObjectHelper"
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\OctreeComponent\\OctreePartitionerFactory.js",
            "line": 544,
            "description": "// empiric proof\nvar dimension = new Point( Math.random() , Math.random() , Math.random() )\ndimension.normalize()\nvar s = computePropPath( 1000 , dimension )\nvar prob = new Point(\n    ( s.split('x').length-1 )/1000,\n    ( s.split('y').length-1 )/1000,\n    ( s.split('z').length-1 )/1000\n)\nprob.normalize()\nconsole.log( dimension )\nconsole.log( prob )",
            "class": "PedagoComponent",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 21,
            "description": "Test the browser capabilities and redirect the user to the correct page.",
            "itemtype": "method",
            "name": "checkBrowserCapability",
            "return": {
                "description": "Renvoie vrai si le navigateur est compatible, sinon renvoie false et redirige l'utilisateur.",
                "type": "Boolean"
            },
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 59,
            "description": "Get the url of a page.",
            "itemtype": "method",
            "name": "getPageURL",
            "params": [
                {
                    "name": "page",
                    "description": "The page.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return the complete url of the page.",
                "type": "String"
            },
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PedagoComponent\\PedagoComponent.js",
            "line": 69,
            "description": "Redirect the browser to a page.",
            "itemtype": "method",
            "name": "redirectToPage",
            "params": [
                {
                    "name": "page",
                    "description": "The page.",
                    "type": "String"
                }
            ],
            "class": "PedagoComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 27,
            "description": "Initialize the component by checking the hardware scaling configuration and apply it if needed.\nAn option is added in performance component to select the hardware scaling value.",
            "itemtype": "method",
            "name": "initialize",
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 73,
            "description": "Restore the default hardware scaling and destroy the component.",
            "itemtype": "method",
            "name": "destroy",
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 98,
            "description": "Change the hardware scaling by reducing the backbuffer size (canvas internal size).",
            "sethardwarescalinglevel": "",
            "params": [
                {
                    "name": "level",
                    "description": "The level of scaling to apply, default is 1, use power of two.",
                    "type": "Number"
                }
            ],
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js",
            "line": 123,
            "description": "Resize callback which set the correct values on render canvas.",
            "itemtype": "method",
            "name": "_onResize",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "HardwareScalingComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 85,
            "description": "Initialize the component by adding a custom menu.",
            "itemtype": "method",
            "name": "initialize",
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 99,
            "description": "Add an option in performance widow.",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item object to add.",
                    "type": "Object"
                }
            ],
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 108,
            "description": "Remove an option from the performance window.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "itemOrIndex",
                    "description": "The item object to remove | The index to remove.",
                    "type": "Object|Number"
                }
            ],
            "return": {
                "description": "Return true if the item has been successfuly removed, otherwise return false.",
                "type": "Boolean"
            },
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 124,
            "description": "Ipdate the content of the window and display it.",
            "itemtype": "method",
            "name": "onChangePerformance",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 142,
            "description": "Close the menu and refreash GL request",
            "itemtype": "method",
            "name": "onContextMenuPerformanceClose",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 152,
            "description": "Update the configuration file when a widget's option change.",
            "itemtype": "method",
            "name": "onConextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 167,
            "description": "Hide the wait panel when the context has changed.",
            "itemtype": "method",
            "name": "onChangeEngine",
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 180,
            "description": "Hide the wait panel when the context has changed.",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "event",
                    "description": "The event object.",
                    "type": "Object"
                }
            ],
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 191,
            "description": "Check performances on each update to determine if the user has a low configuration.",
            "itemtype": "method",
            "name": "update",
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\PerformanceComponent\\PerformanceComponent3D.js",
            "line": 199,
            "description": "Check performance by analysing the frame rate. If it's lower that MIN_FPS then a pedagogic page\nis displayed (only once time).",
            "itemtype": "method",
            "name": "checkPerf",
            "class": "PerformanceComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 18,
            "description": "Core instance",
            "itemtype": "attribute",
            "name": "core",
            "type": "wnp.Core",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 26,
            "description": "Component name",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 34,
            "description": "Structure file instance (shortcut to core.structure)\nThis is the base object where the whole plan is saved",
            "itemtype": "attribute",
            "name": "structure",
            "type": "wnp.Structure",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 43,
            "description": "Kerboard Manager instance (shortcut to core.keyboardManager)",
            "itemtype": "attribute",
            "name": "keyboard",
            "type": "wnp.KeyboardManager",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 51,
            "description": "Priority of the component in the \"update\" and \"draw\" routines",
            "itemtype": "attribute",
            "name": "priority",
            "type": "Number",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 73,
            "description": "Method called when Wanaplan is initialized.\nYou don't need to call this method manually.",
            "itemtype": "method",
            "name": "initialize",
            "abstract": "",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 83,
            "description": "Calls all the event listeners.",
            "itemtype": "method",
            "name": "startListening",
            "abstract": "",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 90,
            "description": "Removes all the event listeners.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 96,
            "description": "Method called when the context is switched (2D -> 3D or 3D -> 2D)",
            "itemtype": "method",
            "name": "onContextChanged",
            "abstract": "",
            "params": [
                {
                    "name": "context",
                    "description": "The new context",
                    "type": "String"
                }
            ],
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 112,
            "description": "Disables the component",
            "itemtype": "method",
            "name": "disable",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 123,
            "description": "Enables the component",
            "itemtype": "method",
            "name": "disable",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 132,
            "description": "This methods tells if the given position is over an element handled by the component",
            "itemtype": "method",
            "name": "getTargeted",
            "abstract": "",
            "params": [
                {
                    "name": "vector",
                    "description": "A position, usually the cursor's one.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The targeted element, or null if nothing is found.",
                "type": "Object"
            },
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 146,
            "description": "Generic update method, called on every frame",
            "abstract": "",
            "itemtype": "method",
            "name": "update",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 156,
            "description": "Generic compute method, called when a \"requestCompute\" has been triggered\nWarning : deprecated, use \"update\" instead",
            "abstract": "",
            "deprecated": true,
            "itemtype": "method",
            "name": "compute",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent2D.js",
            "line": 167,
            "description": "Method called when the component is destroyed",
            "abstract": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseComponent2D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 17,
            "description": "Instance du core.",
            "itemtype": "attribute",
            "name": "core",
            "type": "wnp.Core",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 25,
            "description": "Instance du moteur 3D.",
            "itemtype": "attribute",
            "name": "engine3D",
            "type": "wnp.engine3D",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 33,
            "description": "Nom du composant.",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 41,
            "description": "Instance de la structure (raccourcis vers core.structure)",
            "itemtype": "attribute",
            "name": "structure",
            "type": "wnp.Structure",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 49,
            "description": "Instance du gestionnaire de clavier (raccourcis vers core.keyboardManager)",
            "itemtype": "attribute",
            "name": "keyboardManager",
            "type": "wnp.KeyboardManager",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 57,
            "description": "Instance de la fabrique de material.",
            "itemtype": "attribute",
            "name": "materialFactory",
            "type": "wnp.MaterialFactory",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 65,
            "description": "TODO (raccourcis vers this.core.engine3D.scene)",
            "itemtype": "attribute",
            "name": "scene",
            "type": "TODO",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 73,
            "description": "TODO (raccourcis vers this.core.engine3D.draggableObjects)",
            "itemtype": "attribute",
            "name": "draggableObjects",
            "type": "Array",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 80,
            "description": "TODO (raccourcis vers this.core.engine3D.cameraController)",
            "itemtype": "attribute",
            "name": "cameraController",
            "type": "Object",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 87,
            "description": "TODO (raccourcis vers this.core.engine3D.cameraController)",
            "itemtype": "attribute",
            "name": "cubeCameras",
            "type": "Object",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 94,
            "description": "TODO (raccourcis vers this.core.configuration)",
            "itemtype": "attribute",
            "name": "configuration",
            "type": "Object",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 101,
            "description": "TODO (raccourcis vers this.core.engine3D.camera)",
            "itemtype": "attribute",
            "name": "camera",
            "type": "TODO",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 136,
            "description": "Appelé lors de l'initialisation du composant.",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 153,
            "description": "Appelé lors d'un changement de contexte si le composant est actif.",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "Contexte",
                    "description": "d'affichage \"2D\" ou \"3D\"",
                    "type": "String"
                }
            ],
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 177,
            "description": "Mise à jour de la partie dynamique du composant.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 188,
            "description": "Recalcul du composant.",
            "itemtype": "method",
            "name": "compute",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 198,
            "description": "Application des paramètres de configuration après un changement via le menu",
            "itemtype": "method",
            "name": "reloadConfiguration",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 207,
            "description": "Récupere l'étage 3D courant ou de la structure passée en param",
            "itemtype": "method",
            "name": "getFloor",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 219,
            "description": "Obtient l'objet structure de l'objet 3D passé en paramètre.",
            "itemtype": "method",
            "name": "getObjectStructure",
            "params": [
                {
                    "name": "object",
                    "description": "Une instance d'objet 3D sur la scène.",
                    "type": "Object"
                },
                {
                    "name": "objectType",
                    "description": "Le type d'objet déterminant la collection dans laquelle l'objet 3D va être recherché",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Retourne l'instance de la structure associée à l'objet 3D si elle existe.\n                              Si elle n'existe pas retourne null;",
                "type": "ObjectStructure"
            },
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 254,
            "description": "Obtient le parent d'un objet 3D attaché à la scène.",
            "itemtype": "method",
            "name": "getParentRelativeToScene",
            "params": [
                {
                    "name": "object",
                    "description": "Une instance d'objet 3D",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Retourne l'objet 3D attaché à la scène.",
                "type": "Object"
            },
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 274,
            "description": "Obtient le parent d'un objet 3D attaché à un groupement.",
            "itemtype": "method",
            "name": "getParentRelativeToScene",
            "params": [
                {
                    "name": "object",
                    "description": "Une instance d'objet 3D",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Retourne l'objet 3D attaché à la scène.",
                "type": "Object"
            },
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 293,
            "description": "Obtient un objet 3D par son nom dans la collection spécifiée (option).",
            "itemtype": "method",
            "name": "getObjectByName",
            "params": [
                {
                    "name": "Le",
                    "description": "nom de l'objet 3D à rechercher.",
                    "type": "String"
                },
                {
                    "name": "Le",
                    "description": "nom de la collection où rechercher l'objet (optionnel).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Retourne l'objet 3D recherché si il existe, sinon retourne null.",
                "type": "Object"
            },
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseComponent3D.js",
            "line": 305,
            "description": "Méthode appellée à la suppression du composant par le gestionnaire de composant.",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseComponent3D",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseEditionComponent.js",
            "line": 16,
            "description": "Nom du composant.",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "class": "BaseEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseEditionComponent.js",
            "line": 25,
            "description": "Appelé lors de l'initialisation du composant.",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseEditionComponent",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 18,
            "description": "Unique ID for the structure\nSet up automatically",
            "itemtype": "attribute",
            "name": "id",
            "type": "{Number}",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 27,
            "description": "Structure name",
            "itemtype": "attribute",
            "name": "name",
            "type": "{String}",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 36,
            "description": "Ajoute un élément à la collection passé en paramètre.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "propertyName",
                    "description": "Nom du dictionnaire",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Valeur à attribuer.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Retourne vrai si la valeur est ajoutée sinon retourne faux."
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 64,
            "description": "Method called after the loading of the component",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 73,
            "description": "Generic update method",
            "itemtype": "method",
            "name": "update.",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 82,
            "description": "Serializes the object (to JSON)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "The serialization result, null if nothing is serialized",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 91,
            "description": "Deserializes the object (from JSON)",
            "static": 1,
            "itemtype": "method",
            "name": "Deserialize",
            "params": [
                {
                    "name": "hybrid",
                    "description": "JSON describing the object, built with the method serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Structure object built from the deserialization",
                "type": "Object"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 102,
            "description": "Generic method for rebuilding references after the deserialization\nFor example : restoring the link between a PointStructure and its parent WallStructure",
            "itemtype": "method",
            "name": "updateReferences",
            "params": [
                {
                    "name": "structure",
                    "description": "Floor Structure to work with",
                    "type": "wnp.Structure"
                }
            ],
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 113,
            "description": "Recherche et met à jour les références d'un champs donné avec la structure donnée.",
            "itemtype": "method",
            "name": "updateFiledArray",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "Un",
                    "description": "tableau contenant les ID des objets à rechercher",
                    "type": "Array"
                },
                {
                    "name": "Une",
                    "description": "reférence vers un tableau d'éléments dans la structure où effectuer la recherche.",
                    "type": "Array"
                },
                {
                    "name": "La",
                    "description": "collection à utiliser pour stocker les références. Cette collection est remise à zéro et n'est pas recréé,\n                     sa référence est donc conservée.",
                    "type": "Array"
                }
            ],
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 134,
            "description": "Obtient un élément de la collection par son nom.",
            "itemtype": "method",
            "name": "getElementByName",
            "params": [
                {
                    "name": "Le",
                    "description": "nom de l'élément à rechercher.",
                    "type": "String"
                },
                {
                    "name": "Le",
                    "description": "nom de la collection dans laquelle rechercher. Si ce paramètre est non défini\n                alors la recherche est effectuée dans toutes les collections de type Array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Retourne l'élément désiré si il exite sinon retourne null.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\BaseStructure.js",
            "line": 177,
            "description": "Get the floor referencing this object",
            "itemtype": "method",
            "name": "getFloor",
            "params": [
                {
                    "name": "collection",
                    "description": "Collection to search within.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The floor containing this structure, -1 if the object has not been added to any floor collection.",
                "type": "FloorStructure"
            },
            "class": "BaseStructure",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Components\\GeneralOptionComponent2D.js",
            "line": 1,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "line": 27,
            "description": "Start to listen all the event.",
            "itemtype": "method",
            "name": "startListening",
            "class": "GraphComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "line": 38,
            "description": "Stop to listen all the event.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "GraphComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "line": 63,
            "description": "Initialize the by putting informations on all the overture",
            "itemtype": "method",
            "name": "initPath",
            "params": [
                {
                    "name": "rooms",
                    "description": "All the room on the floor",
                    "type": "RoomStruture[]"
                }
            ],
            "class": "GraphComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "line": 83,
            "description": "Compute the path.",
            "itemtype": "method",
            "name": "computePath",
            "params": [
                {
                    "name": "rooms",
                    "description": "All the room on the floor.",
                    "type": "RoomStruture[]"
                },
                {
                    "name": "i",
                    "description": "indice of the actual room.",
                    "type": "Integer"
                },
                {
                    "name": "overture",
                    "description": "The overture which the path use to enter in rooms[i]",
                    "type": "OvertureStructure"
                }
            ],
            "class": "GraphComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "line": 134,
            "description": "Compute the middle path. Can be use if need to interpolate value",
            "itemtype": "method",
            "name": "computeMiddlePath",
            "class": "GraphComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent2D.js",
            "line": 158,
            "description": "Draw the path on the canvas",
            "itemtype": "method",
            "name": "onGraphRefresh",
            "class": "GraphComponent2D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 22,
            "description": "Initialize the component",
            "itemtype": "method",
            "name": "initialize",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 57,
            "description": "Create the button.",
            "itemtype": "method",
            "name": "createButton",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 86,
            "description": "Start to listen all the event.",
            "itemtype": "method",
            "name": "startListening",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 95,
            "description": "Stop to listen all the event.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 104,
            "description": "Change the Camera Type",
            "itemtype": "method",
            "name": "changeCamera",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 114,
            "description": "Normalize the point",
            "itemtype": "method",
            "name": "normalizePoints",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 129,
            "description": "Compute the animation.",
            "itemtype": "method",
            "name": "launchAnimation",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\GraphComponent\\GraphComponent3D.js",
            "line": 184,
            "description": "Set everything for the animation.",
            "itemtype": "method",
            "name": "computeAnimation",
            "class": "GraphComponent3D",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 46,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 48,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 50,
            "description": "Sets the context, 2D or 3D",
            "itemtype": "method",
            "name": "setContext",
            "params": [
                {
                    "name": "context",
                    "description": "Must be API.CONTEXT_2D for 2D or API.CONTEXT_3D for 3D"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 60,
            "description": "Gets the context, 2D or 3D",
            "itemtype": "method",
            "name": "getContext",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 69,
            "description": "Gets the mode for a given context",
            "itemtype": "method",
            "name": "getMode",
            "params": [
                {
                    "name": "_context",
                    "description": "The context, 2D or 3D. Default is the current selected context.",
                    "optional": true
                }
            ],
            "todo": [
                ""
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 85,
            "description": "Returns the version of the current opened plan.",
            "itemtype": "method",
            "name": "getVersion",
            "return": {
                "description": "The stringified version : \"X.x.x.x\"",
                "type": "String"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 95,
            "description": "Compares two stringified versions.",
            "itemtype": "method",
            "name": "compareVersion",
            "params": [
                {
                    "name": "versionA",
                    "description": "The first version.",
                    "type": "String"
                },
                {
                    "name": "versionB",
                    "description": "The second version.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns -1 if versionA is older than versionB.\n                 Returns 0 if versionA is the same than versionB.\n                 Returns 1 if versionA is newer than versionB.",
                "type": "Number"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 109,
            "description": "Returns a loaded component",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the component",
                    "optional": true
                }
            ],
            "return": {
                "description": "A wanaplan or custom component, loaded in the 2D or in the 3D engine.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 125,
            "description": "Sets the mode for a given context",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "name",
                    "description": "Must one of the following :\nAPI.MODE_NORMAL, API.MODE_DRAW, API.MODE_DRAG, API.MODE_SUBSLOPES"
                },
                {
                    "name": "_context",
                    "description": "The context, 2D or 3D. Default is the current selected context.",
                    "optional": true
                }
            ],
            "todo": [
                ""
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 144,
            "description": "Gets the camera Id.",
            "itemtype": "method",
            "name": "getCameraId",
            "cameraid": "cameraId Must be API.ORBITCAMERA or API.FPSCAMERA.\nTODO : déplacer dans l'engine 3D (spécifique 3D)",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 161,
            "description": "Gets the cameraId.",
            "itemtype": "method",
            "name": "getCameraId",
            "return": {
                "description": "api.ORBITCAMERA or api.FPSCAMERA, depend on the actual camera\nTODO : déplacer dans l'engine 3D (spécifique 3D)"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 173,
            "description": "Returns custom data from the storage\nThis data is serialized along with the plan",
            "params": [
                {
                    "name": "field",
                    "description": "The name of your data",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "The raw data",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 185,
            "description": "Sets custom data to the storage\nThis data is serialized along with the plan",
            "params": [
                {
                    "name": "field",
                    "description": "The name of your data",
                    "type": "Object"
                },
                {
                    "name": "content",
                    "description": "An Array or Object where you store your own data structure",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setData",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 197,
            "description": "Returns the current working floor",
            "itemtype": "method",
            "name": "getCurrentFloor",
            "return": {
                "description": "The current displayed floor",
                "type": "FloorStructure"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 207,
            "description": "Returns the floor matching the given id (0 is ground, 1 is first floor etc)",
            "itemtype": "method",
            "name": "getFloorById",
            "params": [
                {
                    "name": "id",
                    "description": "The Floor id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The floor matching the given id",
                "type": "FloorStructure"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 223,
            "description": "Returns all the floors",
            "itemtype": "method",
            "name": "getFloors",
            "return": {
                "description": "The floors",
                "type": "FloorStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 234,
            "description": "Returns the walls for a given floor",
            "itemtype": "method",
            "name": "getWalls",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of walls",
                "type": "WallStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 247,
            "description": "Returns the walls for a given floor",
            "itemtype": "method",
            "name": "getWalls",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of walls",
                "type": "WallStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 260,
            "description": "Returns the rooms for a given floor",
            "itemtype": "method",
            "name": "getRooms",
            "params": [
                {
                    "name": "_external",
                    "description": "Get either internal or external rooms (see Wiki for more info)",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of walls",
                "type": "RoomStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 274,
            "description": "Get all object structures on the scene",
            "itemtype": "method",
            "name": "getObjects",
            "params": [
                {
                    "name": "_floor",
                    "description": "The floor",
                    "type": "FloorStructure",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of all object structures.",
                "type": "ObjectStructure[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 287,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 289,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 291,
            "description": "Save an action which can be undo from a component.",
            "itemtype": "method",
            "name": "registerAction",
            "params": [
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "Float"
                },
                {
                    "name": "undoFunction",
                    "description": "The function call after doing a ctrl-z.",
                    "type": "Function"
                },
                {
                    "name": "redoFunction",
                    "description": "The function call after doing a ctrl-y.",
                    "type": "Function"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 304,
            "description": "Add an history action.",
            "itemtype": "method",
            "name": "addHistory",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the history action",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameter used in",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the action.",
                    "type": "Float"
                },
                {
                    "name": "component",
                    "description": "The component of the action.",
                    "type": "BABYLON.BaseComponent"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 317,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 319,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 321,
            "description": "Returns textured material with or without custom params",
            "itemtype": "method",
            "name": "TexturedMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A textured wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 333,
            "description": "Returns white material with or without custom params",
            "itemtype": "method",
            "name": "WhiteMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (factor (factor of gray)).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A white wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 345,
            "description": "Returns Leather material with or without custom params",
            "itemtype": "method",
            "name": "LeatherMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A leather wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 357,
            "description": "Returns Metal material with or without custom params",
            "itemtype": "method",
            "name": "MetalMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (brillance, baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A metal wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 369,
            "description": "Returns Wood material with or without custom params",
            "itemtype": "method",
            "name": "WoodMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A wood wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 381,
            "description": "Returns Matt material with or without custom params",
            "itemtype": "method",
            "name": "MattMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A matt wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 393,
            "description": "Returns Glass material with or without custom params",
            "itemtype": "method",
            "name": "GlassMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (opacity or alpha (the transparency of the glass), baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A Glass wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 405,
            "description": "Returns Plastic material with or without custom params",
            "itemtype": "method",
            "name": "PlasticMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (baseColor).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A Plastic wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 417,
            "description": "Returns Tile material with or without custom params",
            "itemtype": "method",
            "name": "TileMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the mesh.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameter of the material (diffuseTexture, bumpTexture).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A Tile wanaplan material.",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 429,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 431,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 433,
            "description": "Returns a DOM element containing the UI widgets, that you can manipulate",
            "itemtype": "method",
            "name": "setData",
            "return": {
                "description": "The DOM Element containing widgets",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 443,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 445,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 447,
            "description": "Load and add a `HTMLElement` on the document.",
            "itemtype": "method",
            "name": "addHTML",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the HTML element to load.",
                    "type": "String"
                },
                {
                    "name": "domElement",
                    "description": "An instance of a DOM element.",
                    "type": "HTMLElement"
                },
                {
                    "name": "success",
                    "description": "A function called the operation is completed.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation has failed.",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 460,
            "itemtype": "method",
            "name": "addScript",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the script to load.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "A function called the operation is completed.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation has failed.",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 472,
            "itemtype": "method",
            "name": "addCSS",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the css file to load.",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "A function called the operation is completed.",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "A function called if the operation has failed.",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 484,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 486,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 488,
            "description": "Ajax method to get or post data.",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "options",
                    "description": "A set of options\n         - url: The url to call.\n         - data: The data to send.\n         - method: The method to use (GET, POST, PUT).\n         - success: A function called when the operation is completed\n                          with the response in parameter.\n               - error: A function called when the operation has failed.",
                    "type": "Object"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 506,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 508,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 511,
            "description": "Adds a listener for an event",
            "itemtype": "method",
            "name": "listen",
            "params": [
                {
                    "name": "eventName",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is triggered",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 531,
            "description": "Remvoes a listener for an event",
            "itemtype": "method",
            "name": "listen",
            "params": [
                {
                    "name": "eventName",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is triggered",
                    "type": "Function"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 552,
            "description": "Returns all API-triggered listeners for events",
            "itemtype": "method",
            "name": "getListeners",
            "return": {
                "description": "A map : key => event, value => Array of listeners",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 561,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 563,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 565,
            "description": "Register a callback for a specific event.",
            "itemtype": "method",
            "name": "registerEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "An unique identifier for this event (ex: \"coreComponentWallClick\").",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "The priority for this event (define callback call order).",
                    "type": "Number"
                },
                {
                    "name": "evName",
                    "description": "The event name associated to callback.",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "Define the mode where the event is active (ex: `Core.MODE_NORMAL|Core.MODE_DRAG`).",
                    "type": "Number"
                },
                {
                    "name": "objType",
                    "description": "The type of object which must be targeted, or `null`.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call.",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "(Optional) Data passed to the callback.",
                    "type": "Object"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 580,
            "description": "Unregister a callback for a specific event.",
            "itemtype": "method",
            "name": "unregisterEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier of the event to remove.",
                    "type": "String"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 589,
            "description": "Returns the mouse position, regarding to the 2D planner\nIt will give you unexploitable results in 3D",
            "itemtype": "method",
            "name": "getMousePos",
            "return": {
                "description": "The mouse position",
                "type": "BABYLON.Vector2"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 600,
            "description": "Returns the nearest wall from the mouse position.",
            "itemtype": "method",
            "name": "getNearestWallFromMousePos",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "wnp.floorStructure"
                }
            ],
            "return": {
                "description": "The nearest wall.",
                "type": "BABYLON.Vector2"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 613,
            "description": "Request a redraw of the bottom \"static\" canvas on the next frame\nThe bottom canvas is used to draw things that don't usually need a redraw\nwhen the mouse moves, like the walls, the rooms, the grid etc...\nNB : The top \"dynamic\" canvas will also be redrawn",
            "itemtype": "method",
            "name": "requestStaticDraw",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 625,
            "description": "Request a redraw of the top \"dynamic\" canvas on the next frame\nThe top canvas is used to draw things that may need a refresh when the mouse moves\nTypically, it is the symbols displayed when the mouse hovers something",
            "itemtype": "method",
            "name": "requestDynamicDraw",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 636,
            "description": "Change the precision angle of the magnetism.",
            "itemtype": "method",
            "name": "setMagnetismAnglePrecision",
            "params": [
                {
                    "name": "precision",
                    "description": "The new precision (Rad)",
                    "type": "Float"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 646,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 648,
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 650,
            "description": "Gets the 3D render `canvas` used by the 3D view.",
            "itemtype": "method",
            "name": "getCanvas",
            "return": {
                "description": "Returns the render canvas.",
                "type": "HTMLCanvasElement"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 660,
            "description": "Returns the current scene",
            "itemtype": "method",
            "name": "getScene",
            "return": {
                "description": "The current 3D scene",
                "type": "BABYLON.Scene"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 670,
            "description": "Returns the active camera for the 3D scene",
            "itemtype": "method",
            "name": "getCamera",
            "return": {
                "description": "The active camera",
                "type": "BABYLON.Camera"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 680,
            "description": "Switch the camera",
            "itemtype": "method",
            "name": "switchCamera",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 692,
            "description": "This function returns a container of some cool features to interact with the camera.\nSee CameraFeatures documentation for a detailed review of all features.",
            "itemtype": "method",
            "name": "getCameraFeatures",
            "return": {
                "description": "The cameraFeatures object",
                "type": "Object"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 704,
            "description": "Get all meshes on the scene",
            "itemtype": "method",
            "name": "getMeshes",
            "return": {
                "description": "An array of all meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 714,
            "description": "Get the mesh of the room for the active floor.",
            "itemtype": "method",
            "name": "getRoomMesh",
            "return": {
                "description": "The room as a 3D mesh.",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 724,
            "description": "Set the default material for the floor of the room",
            "itemtype": "method",
            "name": "setRoomFloorMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "Api.material"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 735,
            "description": "Set the default material for the ceiling of the room",
            "itemtype": "method",
            "name": "setRoomCeilingMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "The new material.",
                    "type": "Api.material"
                }
            ],
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 746,
            "description": "Get all top-level meshes on the scene (meshes whose parent are directly the floor, or a group)",
            "itemtype": "method",
            "name": "getTopLevelMeshes",
            "return": {
                "description": "An array of all 3D top-level meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 766,
            "description": "Get all Handable objects on the scene",
            "itemtype": "method",
            "name": "getObjects",
            "return": {
                "description": "An array of all 3D handable meshes.",
                "type": "BABYLON.Mesh[]"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 785,
            "description": "Searches for a mesh by its name.",
            "itemtype": "method",
            "name": "getMeshByName",
            "return": {
                "description": "The mesh if found, null if not.",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 795,
            "description": "Returns the directional light acting as the sun",
            "itemtype": "method",
            "name": "getSunlight",
            "return": {
                "description": "The sun",
                "type": "BABYLON.DirectionalLight"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 805,
            "description": "Returns the spheric mesh acting as the sky",
            "itemtype": "method",
            "name": "getSkySphere",
            "return": {
                "description": "The sky",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 815,
            "description": "Returns the cubic mesh acting as the ground.",
            "itemtype": "method",
            "name": "getGround",
            "return": {
                "description": "The ground",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 825,
            "description": "Projects a screen position (or the mouse position) on a 3D plane.",
            "itemtype": "method",
            "name": "projectOnPlane",
            "params": [
                {
                    "name": "plane",
                    "description": "The 3D plane",
                    "type": "BABYLON.Plane"
                },
                {
                    "name": "x",
                    "description": "The x coordinate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The y coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The projected point",
                "type": "BABYLON.Vector3"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 839,
            "description": "Allow the mesh to cast a shadow\nBeware, this is an expensive feature, performance may be altered",
            "params": [
                {
                    "name": "The",
                    "description": "mesh",
                    "type": "BABYLON.Mesh"
                }
            ],
            "itemtype": "method",
            "name": "castShadows",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 851,
            "description": "Disable the casting of shadow on a mesh",
            "params": [
                {
                    "name": "The",
                    "description": "mesh",
                    "type": "BABYLON.Mesh"
                }
            ],
            "itemtype": "method",
            "name": "uncastShadows",
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Api.js",
            "line": 862,
            "description": "Get the selected object",
            "itemtype": "method",
            "name": "getSelectedObject",
            "return": {
                "description": "The current selected object.",
                "type": "BABYLON.Mesh"
            },
            "class": "API",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Api\\Menu.js",
            "line": 27,
            "description": "Add element in a menu",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "menu",
                    "description": "name of the targeted menu (see constants MENU_TOP, MENU_MAIN)",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "see MenuItem",
                    "type": "Object"
                },
                {
                    "name": "_path",
                    "description": "is the path inside the targeted menu if needed",
                    "type": "String"
                }
            ],
            "class": "Menu",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 113,
            "description": "Attach the camera to the scene and select the correct input mode.",
            "itemtype": "method",
            "name": "attachControl",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "(Optional)",
                    "description": "noPreventDefault Allow or not to prevent default actions when an event is handled.",
                    "type": "Boolean"
                },
                {
                    "name": "params",
                    "description": "(Optional) An dictionary of additional parameters.",
                    "type": "Object"
                }
            ],
            "class": "OrbitCamera",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 128,
            "description": "Attach the camera to the scene with touch support.",
            "itemtype": "method",
            "name": "attachControlForMobile",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "(Optional)",
                    "description": "noPreventDefault Allow or not to prevent default actions when an event is handled.",
                    "type": "Boolean"
                },
                {
                    "name": "params",
                    "description": "(Optional) An dictionary of additional parameters.",
                    "type": "Object"
                }
            ],
            "class": "OrbitCamera",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Cameras\\OrbitCamera.js",
            "line": 267,
            "description": "Attach the camera to the scene with mouse and pointer event support.",
            "itemtype": "method",
            "name": "attachControlForDesktop",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas.",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "(Optional)",
                    "description": "noPreventDefault Allow or not to prevent default actions when an event is handled.",
                    "type": "Boolean"
                },
                {
                    "name": "params",
                    "description": "(Optional) An dictionary of additional parameters.",
                    "type": "Object"
                }
            ],
            "class": "OrbitCamera",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 63,
            "description": "Initialize the manager.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 72,
            "description": "Reset all key states.",
            "itemtype": "method",
            "name": "destroy",
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 81,
            "description": "Start the event listening.",
            "itemtype": "method",
            "name": "startEventsListening",
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 94,
            "description": "Stop the event listening.",
            "itemtype": "method",
            "name": "stopEventsListening",
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 108,
            "description": "Handler called when the actual page gets the focus. All states are reseted.",
            "itemtype": "method",
            "name": "onFocus",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 119,
            "description": "Handler called when a keyboard event is intercepted.",
            "itemtype": "method",
            "name": "onKeyStateChange",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 145,
            "description": "Indicates whether one or more key are pressed.",
            "itemtype": "method",
            "name": "isPressed",
            "params": [
                {
                    "name": "key",
                    "description": "Mixed: An array of keys to tests or a keyCode.",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "Returns ’true’ if one or more key has been pressed, otherwise it returns false.",
                "type": "Boolean"
            },
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\KeyboardManager.js",
            "line": 167,
            "description": "Indicates whether one or more key are released.",
            "itemtype": "method",
            "name": "isReleased",
            "params": [
                {
                    "name": "key",
                    "description": "Mixed: An array of keys to tests or a keyCode.",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "Returns ’true’ if one or more key has been released, otherwise it returns false.",
                "type": "Boolean"
            },
            "class": "wnp.KeyboardManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 44,
            "description": "The cursor position on the canvas.",
            "itemtype": "attribute",
            "name": "pos",
            "readonly": "",
            "type": "BABYLON.Vector3",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 52,
            "description": "The delta position of the cursor.",
            "itemtype": "attribute",
            "name": "posDelta",
            "readonly": "",
            "type": "BABYLON.Vector3",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 60,
            "description": "The current pressed button in use.\n\n  * `PointerManager.BUTTON_LEFT` = 1\n  * `PointerManager.BUTTON_MIDDLE` = 2\n  * `PointerManager.BUTTON_RIGHT` = 4",
            "itemtype": "attribute",
            "name": "buttons",
            "readonly": "",
            "type": "Number",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 73,
            "description": "Number that represent current actions (masks).\n\n  * `PointerManager.ACTION_CLICK` = 1\n  * `PointerManager.ACTION_DBLCLICK` = 2\n  * `PointerManager.ACTION_DRAGSTART` = 4\n  * `PointerManager.ACTION_DRAGGING` = 8\n  * `PointerManager.ACTION_DRAGEND` = 16\n  * `PointerManager.ACTION_SCROLLUP` = 32\n  * `PointerManager.ACTION_SCROLLDOWN` = 64",
            "itemtype": "attribute",
            "name": "actions",
            "readonly": "",
            "type": "Number",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 90,
            "description": "Number that represent current modifiers (masks).\n\n  * `PointerManager.MODIFIER_ALT` = 1\n  * `PointerManager.MODIFIER_CTRL` = 2\n  * `PointerManager.MODIFIER_SHIFT` = 4",
            "itemtype": "attribute",
            "name": "buttons",
            "readonly": "",
            "type": "Number",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 123,
            "description": "Set the DOM element to use for event listening.",
            "itemtype": "method",
            "name": "setDomElement",
            "params": [
                {
                    "name": "domElement",
                    "description": "The DOM element to use.",
                    "type": "HTMLElement"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 140,
            "description": "Add mouse support for standard browser or Internet Explorer 10 and 11.",
            "itemtype": "method",
            "name": "addMouseSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 161,
            "description": "Remove mouse support",
            "itemtype": "method",
            "name": "removeMouseSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 183,
            "description": "Add touch support for standard browser or Internet Explorer 10 and 11.",
            "itemtype": "method",
            "name": "addTouchSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 196,
            "description": "Remove touch support.",
            "itemtype": "method",
            "name": "removeTouchSupport",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 210,
            "description": "Gets the current state of the manager;",
            "itemtype": "method",
            "name": "getStatus",
            "return": {
                "description": "Returns an object that contains all states of the manager.",
                "type": "Object"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 255,
            "description": "Force the exit of the state `stateful` (ex: \"dragging\")\nNOTICE: Out events will be not raised (ex \"drag-end\").",
            "itemtype": "method",
            "name": "reset",
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 266,
            "description": "Called when the viewport size has changed. If no parameters has been passed to the function then\nthe size is computed from the DOM element where events are listened.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "(Optional) New width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "(Optional) New height.",
                    "type": "Number"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 282,
            "description": "Gets the position on X axis of the cursor.",
            "itemtype": "method",
            "name": "_getX",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The position on X axis of the cursor.",
                "type": "Number"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 300,
            "description": "Gets the position on Y axis of the cursor.",
            "itemtype": "method",
            "name": "_getY",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object..",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The position on Y axis of the cursor.",
                "type": "Number"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 318,
            "description": "Gets the `pointer` button responisible of the event.",
            "itemtype": "method",
            "name": "_getButton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The `pointer` button.",
                "type": "Number"
            },
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 342,
            "description": "Update the pointer state.",
            "itemtype": "method",
            "name": "_updateMouseState",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                },
                {
                    "name": "additionalAction",
                    "description": "(Optional) Additional actions to add to mask.",
                    "type": "Number"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 430,
            "description": "Notify the callback that an event has been intercepted.",
            "itemtype": "method",
            "name": "_notifyCb",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 449,
            "description": "Handler called when a (mouse/touch/pointer) down event is intercepted.",
            "itemtype": "method",
            "name": "onMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 460,
            "description": "Handler called when a (mouse/touch/pointer) move event is intercepted.",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 471,
            "description": "Handler called when a (mouse/touch/pointer) up event is intercepted.",
            "itemtype": "method",
            "name": "onMouseUp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 482,
            "description": "Handler called when a double click event is intercepted.",
            "itemtype": "method",
            "name": "onMouseDoubleClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\PointerManager.js",
            "line": 492,
            "description": "Handler called when a mouse wheel event is intercepted. The value is normalized\nto be usable in Wanaplan.",
            "itemtype": "method",
            "name": "onMouseWheel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.PointerManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 73,
            "description": "Attach an event listener to an event type.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event to listen.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The method to call when the event is triggered.",
                    "type": "Function"
                }
            ],
            "class": "wnp.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 83,
            "description": "Detach an event listener from an event type.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The listened event name.",
                    "type": "String"
                }
            ],
            "class": "wnp.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 92,
            "description": "Sets the dead zone value. This value is used when a finger is moving on the screen.\nIf the delta position is lesser than dead zone then the move event is not triggered.",
            "itemtype": "method",
            "name": "setDeadZone",
            "params": [
                {
                    "name": "deadZone",
                    "description": "The value of the dead zone. Must be in range of 0...N. Default is 2.0.",
                    "type": "Number"
                }
            ],
            "class": "wnp.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 323,
            "description": "Start the manager activity.",
            "itemtype": "method",
            "name": "start",
            "class": "wnp.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Input\\TouchManager.js",
            "line": 341,
            "description": "Stop the manager activity.",
            "itemtype": "method",
            "name": "stop",
            "class": "wnp.TouchManager",
            "module": "Wanaplan",
            "submodule": "Input",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 34,
            "description": "set the color of the material",
            "itemtype": "method",
            "name": "setBaseColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "BABYLON.Color"
                }
            ],
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 47,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 49,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 51,
            "description": "compute mandatory values for this material",
            "itemtype": "method",
            "name": "build",
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 63,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Metal.js",
            "line": 65,
            "class": "wnp.MetalMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Plastic.js",
            "line": 28,
            "description": "set the color of the material",
            "itemtype": "method",
            "name": "setBaseColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "BABYLON.Color"
                }
            ],
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 16,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 18,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 30,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Sample.js",
            "line": 32,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 34,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 36,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 38,
            "description": "compute mandatory values for this material",
            "itemtype": "method",
            "name": "build",
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 53,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\Textured.js",
            "line": 55,
            "class": "wnp.TexturedMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 27,
            "description": "set the color of the material",
            "itemtype": "method",
            "name": "setBaseColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "BABYLON.Color"
                }
            ],
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 38,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 40,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 42,
            "description": "compute mandatory values for this material",
            "itemtype": "method",
            "name": "build",
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 53,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Materials\\White.js",
            "line": 55,
            "class": "wnp.WhiteMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\UI\\ColorPopup.js",
            "line": 101,
            "description": "Créée un élément HTML",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "Le",
                    "description": "nom de la balise à créer.",
                    "type": "String"
                },
                {
                    "name": "Une",
                    "description": "ou plusieurs classes à utiliser (optionel).",
                    "type": "String"
                },
                {
                    "name": "L'identificateur",
                    "description": "à utiliser (optionel).",
                    "type": "String"
                }
            ],
            "class": "wnp.UI.Popup",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 39,
            "description": "Rend le composant visible.",
            "itemtype": "method",
            "name": "show",
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 53,
            "description": "Cache le composant.",
            "itemtype": "method",
            "name": "hide",
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 77,
            "description": "Indique si la fenêtre est ouverte.",
            "itemtype": "method",
            "name": "isOpen",
            "static": 1,
            "return": {
                "description": "Retourne true si la fenêtre est ouverte, sinon retourne false."
            },
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 88,
            "description": "Ouvre une boite de dialogue permettant de modifier les propriété d'un objet.",
            "itemtype": "method",
            "name": "show",
            "static": 1,
            "params": [
                {
                    "name": "Position",
                    "description": "sur l'axe X de la boite de dialogue.",
                    "type": "Number"
                },
                {
                    "name": "Position",
                    "description": "sur l'axe Y de la boite de dialogue.",
                    "type": "Number"
                },
                {
                    "name": "Un",
                    "description": "objet avec des paramètres.",
                    "type": "Object"
                },
                {
                    "name": "Spécifie",
                    "description": "le context à utilisé qui Définit le header de la boite.",
                    "type": "String"
                }
            ],
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 158,
            "description": "Ferme la boite de dialogue si elle était ouverte.",
            "itemtype": "method",
            "name": "close",
            "static": 1,
            "params": [
                {
                    "name": "Passer",
                    "description": "à true pour détruire la boite de dialogue.",
                    "type": "Boolean|undefined"
                }
            ],
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 173,
            "description": "Déplace la fenêtre de dialogue à la position désirée.",
            "itemtype": "method",
            "name": "setPosition",
            "static": 1,
            "params": [
                {
                    "name": "Position",
                    "description": "sur l'axe X.",
                    "type": "Number"
                },
                {
                    "name": "Position",
                    "description": "sur l'axe Y.",
                    "type": "Number"
                }
            ],
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 187,
            "description": "Retourne la position actuelle de la fenêtre",
            "itemtype": "method",
            "name": "setPosition",
            "static": 1,
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\ContextMenu.js",
            "line": 202,
            "description": "/!\\ does not merge, simply replace value in existing input",
            "class": "wnp.UI.ContextMenu",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 29,
            "description": "Mise à jour de la liste de propriétés disponibles. Les types supportés sont\n   - button (un bouton avec un label à gauche)\n - buttons (3 boutons max de préférence)\n - checkbox (un checkbox avec un label à gauche)\n - html (du contenu HTML personnalisé)\n - number (un champs de type number)\n - separator (une barre de séparation)\n - slider (un slider avec un label à gauche)\n - spacer (Espacement vertical de 25px)\n - text (un champs de texte avec un label à gauche)",
            "itemtype": "method",
            "name": "udpateProperties",
            "params": [
                {
                    "name": "Un",
                    "description": "objet contenant les paramètres à afficher.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 101,
            "description": "Création d'un élément séparateur",
            "itemtype": "method",
            "name": "createSeparatorItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 181,
            "description": "Création d'un élément slider avec un label.",
            "itemtype": "method",
            "name": "createSliderItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 276,
            "description": "Création d'un élément texte avec un label.",
            "itemtype": "method",
            "name": "createInputTextItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 329,
            "description": "Création d'un élément checkbox avec un label.",
            "itemtype": "method",
            "name": "createCheckboxItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 378,
            "description": "Création d'un élément bouton.",
            "itemtype": "method",
            "name": "createButtonItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 425,
            "description": "Création d'un élément avec plusieurs boutons.",
            "itemtype": "method",
            "name": "createButtonsItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 469,
            "description": "Création d'un élément vide d'espacement.",
            "itemtype": "method",
            "name": "createSpacer",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 481,
            "description": "Création d'un élément bloc HTML.",
            "itemtype": "method",
            "name": "createHTMLItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\FormBuilder.js",
            "line": 498,
            "description": "Création d'un élément séparateur",
            "itemtype": "method",
            "name": "createSeparatorItem",
            "return": {
                "description": "Retourne un élément de liste HTML.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.FormBuilder",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 58,
            "description": "Initialisation de la fenêtre.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 87,
            "description": "Adapte la taille de la fenêtre à l'écran avec les régles Définits à la construction.",
            "itemtype": "method",
            "name": "adapteSize",
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 120,
            "description": "Construction du HTML de base.",
            "itemtype": "method",
            "name": "buildHTML",
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 170,
            "description": "Change le titre de la fenêtre.",
            "itemtype": "method",
            "name": "setTitle",
            "params": [
                {
                    "name": "Le",
                    "description": "titre à changer.",
                    "type": "String"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 180,
            "description": "Ajoute ou remplace du contenu dans un onglet. Si l'onglet spécifié n'existe pas\nil est créé.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "Le",
                    "description": "contenu à ajouter, peux être une chaine de caractère ou un noeud HTML.",
                    "type": "Object"
                },
                {
                    "name": "L'index",
                    "description": "de l'onget concerné.",
                    "type": "Number"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 201,
            "description": "Ajoute un onglet avec eventuellement du contenu.",
            "itemtype": "method",
            "name": "addTab",
            "params": [
                {
                    "name": "Le",
                    "description": "titre de l'onglet.",
                    "type": "String"
                },
                {
                    "name": "Le",
                    "description": "chemin vers une icône.",
                    "type": "String"
                },
                {
                    "name": "Chaine",
                    "description": "de caractère ou noeud HTML à insérer.",
                    "type": "Object"
                },
                {
                    "name": "Active",
                    "description": "le nouvel onglet créé.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 250,
            "description": "Vide le contenu de le fenêtre.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "Une",
                    "description": "structure booléene { tabs, content, actionTab } qui indique ce qu'il faut supprimer.\n                  Par défaut les onglets et le contenu sont supprimés.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 273,
            "description": "Ajoute des éléments de formulaire depuis un objet JSON dans l'onglet spécifié.\nSi l'onglet n'existe pas il est créé.",
            "itemtype": "method",
            "name": "addForm",
            "params": [
                {
                    "name": "L'index",
                    "description": "de l'onglet concerné.",
                    "type": "Number"
                },
                {
                    "name": "Les",
                    "description": "données à ajouter.",
                    "type": "Object"
                },
                {
                    "name": "Le",
                    "description": "titre de l'onget si il est créé (optionel).",
                    "type": "String"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 298,
            "description": "Ajoute une barre d'action. Le contenu précédent est supprimé.",
            "itemtype": "method",
            "name": "setActionBar",
            "params": [
                {
                    "name": "Un",
                    "description": "tableau d'éléménets au format JSON à ajouter ou une chaine de caractères.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 344,
            "description": "Affiche le contenu à l'index d'onglet spécifié.",
            "itemtype": "method",
            "name": "showContent",
            "params": [
                {
                    "name": "L'index",
                    "description": "de l'onget concerné.",
                    "type": "Number"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 363,
            "description": "Affichage la fenêtre à la position désirée. Si aucune position n'est renseignée alors la fenêtre\nest centrée sur l'écran. Il faut que les 2 coordonnées X et Y soit renseignées.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "Position",
                    "description": "X sur l'écran (optionel).",
                    "type": "Number"
                },
                {
                    "name": "Position",
                    "description": "Y sur l'écran (optionel).",
                    "type": "Number"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 408,
            "description": "Fermeture de la liste de produits.",
            "itemtype": "method",
            "name": "close",
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 418,
            "description": "Centre la fenêtre au milieu de l'écran.",
            "itemtype": "method",
            "name": "centerWindow",
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 437,
            "description": "Change la position de la fenêtre courante.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "Position",
                    "description": "X sur l'écran.",
                    "type": "Number"
                },
                {
                    "name": "Position",
                    "description": "Y sur l'écran.",
                    "type": "Number"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 451,
            "description": "Remise à zéro des états de la souris.",
            "itemtype": "method",
            "name": "resetMouseState",
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 477,
            "description": "Callback appelé lors d'un clic de souris sur la barre de titre de la fenêtre.",
            "itemtype": "method",
            "name": "onHeaderMouseDown",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 490,
            "description": "Callback appelé lorsque l'utilisateur relâche le bouton de la souris sur le document.",
            "itemtype": "method",
            "name": "onHeaderMouseUp",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 500,
            "description": "Callback appelé lorsque l'utilisateur bouge la souris sur le document.",
            "itemtype": "method",
            "name": "onHeaderMouseMove",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 526,
            "description": "Intialisation des événéments.",
            "itemtype": "method",
            "name": "initializeEvents",
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 549,
            "description": "Gestionnaire d'événement appelé au clic sur un onglet.",
            "itemtype": "method",
            "name": "onTabClick",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 570,
            "description": "Obtient le premier noeud de type div du noeud passé en paramètre.\nSi le noeud est un élément de type div alors il est retourné.",
            "itemtype": "method",
            "name": "getDivNode",
            "params": [
                {
                    "name": "Le",
                    "description": "noeud à utiliser.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "Retourne le premier noeud de type div parent au noeud passé en paramètre.",
                "type": "HTMLElement"
            },
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 586,
            "description": "Gestionnaire d'événement appelé au clic sur un bouton de la barre d'action.",
            "itemtype": "method",
            "name": "onActionBarItemClick",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Frame.js",
            "line": 599,
            "description": "Créée un élément HTML",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "Le",
                    "description": "nom de la balise à créer.",
                    "type": "String"
                },
                {
                    "name": "Une",
                    "description": "ou plusieurs classes à utiliser (optionel).",
                    "type": "String"
                },
                {
                    "name": "L'identificateur",
                    "description": "à utiliser (optionel).",
                    "type": "String"
                }
            ],
            "class": "wnp.UI.Frame",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubble.js",
            "line": 28,
            "description": "Crée une nouvelle bulle d'aide",
            "itemtype": "method",
            "name": "newBubble",
            "params": [
                {
                    "name": "image",
                    "description": "Url de l'image à afficher.",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "Text à afficher (html).",
                    "type": "String"
                },
                {
                    "name": "show",
                    "description": "Afficher la bulle d'aide immédiatement? (optionnel).",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.UI.HelpBubble",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubble.js",
            "line": 42,
            "description": "Affiche la bulle d'aide.",
            "itemtype": "method",
            "name": "show",
            "class": "wnp.UI.HelpBubble",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubble.js",
            "line": 60,
            "description": "Masque la bulle d'aide.",
            "itemtype": "method",
            "name": "hide",
            "class": "wnp.UI.HelpBubble",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubbleManager.js",
            "line": 74,
            "description": "Active ou désactive le gestionnaire d'aide",
            "itemtype": "method",
            "name": "setActive",
            "params": [
                {
                    "name": "isActive",
                    "description": "Passer à true pour activer le gestionnaire ou à false pour le désactiver.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.UI.HelpBubbleManager",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubbleManager.js",
            "line": 83,
            "description": "Affiche la bulle d'aide demandée, si elle n'a jamais été affichée (il est\npossible d'outrepasser ce comportement à l'aide du paramètre `force`).",
            "itemtype": "method",
            "name": "display",
            "params": [
                {
                    "name": "bubbleId",
                    "description": "Identifiant de la bulle à afficher.",
                    "type": "String"
                },
                {
                    "name": "force",
                    "description": "Forcer l'affichage de la bulle, même si elle a déjà été affichée.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.UI.HelpBubbleManager",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubbleManager.js",
            "line": 99,
            "description": "Permet de savoir si une bulle d'aide a déjà été affichée.",
            "itemtype": "method",
            "name": "alreadyDisplayed",
            "params": [
                {
                    "name": "bubbleId",
                    "description": "Identifiant de la bulle à afficher.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`true` si la bulle a déjà été affichée, sinon `false`.",
                "type": "Boolean"
            },
            "class": "wnp.UI.HelpBubbleManager",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubbleManager.js",
            "line": 110,
            "description": "Sauvegarde la liste des bulles affichées dans le localStorage.",
            "itemtype": "method",
            "name": "_save",
            "access": "private",
            "tagname": "",
            "class": "wnp.UI.HelpBubbleManager",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\HelpBubbleManager.js",
            "line": 126,
            "description": "Charge la liste des bulles affichées depuis le localStorage.",
            "itemtype": "method",
            "name": "_load",
            "access": "private",
            "tagname": "",
            "class": "wnp.UI.HelpBubbleManager",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\IFrame.js",
            "line": 99,
            "description": "Resize the iframe",
            "itemtype": "method",
            "name": "setSize",
            "static": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "wnp.UI.MessageBox",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\LanguageSelector.js",
            "line": 84,
            "description": "Fermeture de la liste de produits.",
            "itemtype": "method",
            "name": "close",
            "class": "wnp.UI.MessageBox",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\MessageBox.js",
            "line": 159,
            "description": "Déstruction de la fenêtre, désabonnant aux événement et suppression du DOM.",
            "itemtype": "method",
            "name": "destroy",
            "class": "wnp.UI.MessageBox",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\MessageBox.js",
            "line": 187,
            "description": "Callback lancé à chaque clic.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "L'évenement de callback.",
                    "type": "Object"
                },
                {
                    "name": "that",
                    "description": "Instance de la classe.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.MessageBox",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\MessageBox.js",
            "line": 235,
            "description": "Ouvre la boite de liste avec les paramètres donnés.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "params",
                    "description": "Liste de paramètres à utiliser.",
                    "type": "Object"
                }
            ],
            "class": "wnp.UI.MessageBox",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\MessageBox.js",
            "line": 314,
            "description": "Ferme la boite de liste sans la retirer du DOM.",
            "itemtype": "method",
            "name": "close.",
            "class": "wnp.UI.MessageBox",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\RemoteController.js",
            "line": 151,
            "description": "Construction du code HTML pour le composant.",
            "itemtype": "method",
            "name": "buildHTML",
            "class": "wnp.UI.RemoteController",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\RemoteController.js",
            "line": 251,
            "description": "Mise à jour de la position de la télécommande.",
            "itemtype": "method",
            "name": "updateDomPosition",
            "params": [
                {
                    "name": "x",
                    "description": "Valeur de la coordonnée X à l'écran.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Valeur de la coordonnée Y à l'écran.",
                    "type": "Number"
                }
            ],
            "class": "wnp.UI.RemoteController",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\RemoteController.js",
            "line": 264,
            "description": "Déstruction de la fenêtre, désabonnant aux événement et suppression du DOM.",
            "itemtype": "method",
            "name": "kill",
            "params": [
                {
                    "name": "removeFromDom",
                    "description": "Passer à true pour supprimer le composant du DOM. Ne supprime pas le composant\n                    du DOM par défaut.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.UI.RemoteController",
            "module": "Wanaplan",
            "submodule": "UI",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 35,
            "description": "Initialisation de la fenêtre.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 49,
            "description": "Intialisation des événéments.",
            "itemtype": "method",
            "name": "bindEvents",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 65,
            "description": "Supprime l'abonnement aux événements.",
            "itemtype": "method",
            "name": "unbindEvents",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 81,
            "description": "Construction du HTML du header",
            "itemtype": "method",
            "name": "buildHeaderTitle",
            "params": [
                {
                    "name": "title",
                    "description": "Le titre de la fenêtre.",
                    "type": "String"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 104,
            "description": "Construction du HTML de base.",
            "itemtype": "method",
            "name": "buildHTML",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 135,
            "description": "Change le titre de la fenêtre.",
            "itemtype": "method",
            "name": "setTitle",
            "params": [
                {
                    "name": "Le",
                    "description": "titre à changer.",
                    "type": "String"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 146,
            "description": "Ajoute ou remplace le contenu de la fenêtre.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "Le",
                    "description": "contenu à ajouter, peux être une chaine de caractère ou un objet HTML.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 167,
            "description": "Affichage la fenêtre à la position désirée. Si aucune position n'est renseignée alors la fenêtre\nest centrée sur l'écran. Il faut que les 2 coordonnées X et Y soit renseignées.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "Position",
                    "description": "X sur l'écran (optionel).",
                    "type": "Number"
                },
                {
                    "name": "Position",
                    "description": "Y sur l'écran (optionel).",
                    "type": "Number"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 200,
            "description": "Fermeture de la liste de produits.",
            "itemtype": "method",
            "name": "close",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 214,
            "description": "Centre la fenêtre au milieu de l'écran.",
            "itemtype": "method",
            "name": "centerWindow",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 233,
            "description": "Change la position de la fenêtre courante.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "Position",
                    "description": "X sur l'écran.",
                    "type": "Number"
                },
                {
                    "name": "Position",
                    "description": "Y sur l'écran.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 247,
            "description": "Remise à zéro des paramétres de taille de la fenêtre.",
            "itemtype": "method",
            "name": "resetSize",
            "params": [
                {
                    "name": "config",
                    "description": "La nouvelle configuration à utiliser pour l'affichage.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 267,
            "description": "Adapte la taille de la fenêtre à l'écran avec les régles Définits à la construction.",
            "itemtype": "method",
            "name": "adapteSize",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 288,
            "description": "Remise à zéro des états de la souris.",
            "itemtype": "method",
            "name": "resetMouseState",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 303,
            "description": "Callback appelé lors d'un clic de souris sur la barre de titre de la fenêtre.",
            "itemtype": "method",
            "name": "onHeaderMouseDown",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 315,
            "description": "Callback appelé lorsque l'utilisateur relâche le bouton de la souris sur le document.",
            "itemtype": "method",
            "name": "onHeaderMouseUp",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 325,
            "description": "Callback appelé lorsque l'utilisateur bouge la souris sur le document.",
            "itemtype": "method",
            "name": "onHeaderMouseMove",
            "params": [
                {
                    "name": "L'objet",
                    "description": "associé à l'événement.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\UI\\Window.js",
            "line": 351,
            "description": "Créée un élément HTML",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "Le",
                    "description": "nom de la balise à créer.",
                    "type": "String"
                },
                {
                    "name": "Une",
                    "description": "ou plusieurs classes à utiliser (optionel).",
                    "type": "String"
                },
                {
                    "name": "L'identificateur",
                    "description": "à utiliser (optionel).",
                    "type": "String"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp.UI"
        },
        {
            "file": "js\\Core\\Widgets\\Elevation.js",
            "line": 59,
            "description": "Construction du code HTML pour le composant.",
            "itemtype": "method",
            "name": "buildHTML",
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp\nElevation widget for scene objects"
        },
        {
            "file": "js\\Core\\Widgets\\Elevation.js",
            "line": 92,
            "description": "Mise à jour de la position de la télécommande.",
            "itemtype": "method",
            "name": "updateDomPosition",
            "params": [
                {
                    "name": "x",
                    "description": "Valeur de la coordonnée X à l'écran.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Valeur de la coordonnée Y à l'écran.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp\nElevation widget for scene objects"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 186,
            "description": "TODO",
            "itemtype": "method",
            "name": "getRotationMesh",
            "params": [
                {
                    "name": "bbox",
                    "description": ""
                },
                {
                    "name": "color",
                    "description": ""
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp\nRotator widget for scene objects"
        },
        {
            "file": "js\\Core\\Widgets\\Rotator.js",
            "line": 202,
            "description": "Ajoute un selecteur vert autour de l'objet selectionné permettant d'interagir avec.",
            "itemtype": "method",
            "name": "addSelectionBox",
            "params": [
                {
                    "name": "L'objet",
                    "description": "3D auquel on doit appliquer le selecteur.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.Assets",
            "module": "Wanaplan",
            "namespace": "wnp\nRotator widget for scene objects"
        },
        {
            "file": "js\\Core\\Box3.js",
            "line": 3,
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 29,
            "description": "Sets the current camera.",
            "itemtype": "method",
            "name": "setCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "The camera to use.",
                    "type": "BABYLON.Camera"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 38,
            "description": "Handler called when the camera move.",
            "itemtype": "method",
            "name": "onCameraMove",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 49,
            "description": "Handler called when the camera zoom.",
            "itemtype": "method",
            "name": "onCameraZoom",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 60,
            "description": "Handler called when the walls are ready",
            "itemtype": "method",
            "name": "onWallsReady",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 73,
            "description": "Stop the transparency when the user click on the transparency button.",
            "itemtype": "method",
            "name": "stopTransparency",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 104,
            "description": "Start the transparency when the user click on the transparency button.",
            "itemtype": "method",
            "name": "startTransparency",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 114,
            "description": "Build a plane from a bouding box.",
            "itemtype": "method",
            "name": "buildPlaneFromBB",
            "params": [
                {
                    "name": "box",
                    "description": "A bounding box.",
                    "type": "BABYLON.BoundingBox"
                }
            ],
            "return": {
                "description": "Returns a plane.",
                "type": "BABYLON.Plane"
            },
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 129,
            "description": "Build an index array corresponding to the sub-mesh that must be transparent.",
            "itemtype": "method",
            "name": "fillByZIndex",
            "params": [
                {
                    "name": "wallMesh",
                    "description": "The wall mesh.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "return": {
                "description": "The index array.",
                "type": "Array"
            },
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 179,
            "description": "Apply transparency to materials",
            "itemtype": "method",
            "name": "dynamicWallTransparency",
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 217,
            "description": "Sets all walls to opaque.",
            "itemtype": "method",
            "name": "makeWallsOpaque",
            "params": [
                {
                    "name": "{Structure]",
                    "description": "structure A structure to use."
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 250,
            "description": "Sets all walls to opaque when the 3D mode is enabled.",
            "itemtype": "method",
            "name": "onContextChanged",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 261,
            "description": "Handler which will apply transparency only on walls at the current floor.",
            "itemtype": "method",
            "name": "onGlobaleFloorReady",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 275,
            "description": "Gets the best focus radius to move the camera in the best position to see whole plan.",
            "itemtype": "method",
            "name": "getBestFocusRadius",
            "params": [
                {
                    "name": "target",
                    "description": "The target (the main mesh).",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "camerea",
                    "description": "The main camera.",
                    "type": "BABYLON.Camera"
                },
                {
                    "name": "scene",
                    "description": "The scene.",
                    "type": "BABYLON.Scene"
                }
            ],
            "return": {
                "description": "radius Returns the radius to use.",
                "type": "Number"
            },
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 299,
            "description": "FIXME",
            "itemtype": "method",
            "name": "computeCameraStateLooking",
            "params": [
                {
                    "name": "target",
                    "description": "The target to use.",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "camera",
                    "description": "The camera to use.",
                    "type": "BABYLON.Camera"
                },
                {
                    "name": "viewport",
                    "description": "(Optional) The viewport to use, default is (0, 0, 1, 1);",
                    "type": "BABYLON.Viewport"
                }
            ],
            "class": "CameraFeatures",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 421,
            "description": "Cancel the animation.",
            "itemtype": "method",
            "name": "cancel",
            "class": "AnimationCancelor",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 435,
            "description": "Handler called when an animation is done.",
            "itemtype": "method",
            "name": "_onAnimationEnd",
            "access": "private",
            "tagname": "",
            "class": "AnimationCancelor",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\CameraFeatures.js",
            "line": 516,
            "description": "Compute an animation by given an amnimatable object , source state and destination state, compute the animations babylon way and start play it",
            "params": [
                {
                    "name": "target",
                    "description": "is the animatable object that will be animate",
                    "type": "BABYLON.Mesh"
                },
                {
                    "name": "src",
                    "description": "is a set of property and their value at the begin of the animation",
                    "type": "BABYLON.Vectior3"
                },
                {
                    "name": "dst",
                    "description": "is a set of property and their value at the end of the animation",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "- duration               is the animation duration in ms\n - callback               a function to call at the end of the animation\n - cleanAfterAnimation    if true the animation will be cleaned at the end, if set to not, the cancel function MUST be called somewhere ( default is true )\n - name                   name the animation\n - isACamera              if set to true, the event camera.move will be triggered during the animation\n - smooth                 accepted values are linear | ease or a function f x [0:1] -> [0:1]",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A function that cancel the animation on calling, also make the clean up. This function will be called at the end of the animation if cleanAfterAnimation is true. If cleanAfterAnimation is set to false, this function MUST be called eventually.",
                "type": "AnimationCancelor"
            },
            "class": "AnimationCancelor",
            "module": "Wanaplan",
            "submodule": "Component"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 27,
            "description": "Add a component by its class name.",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The class name of component to add.",
                    "type": "Component"
                }
            ],
            "return": {
                "description": "Return the component if added, otherwise return null.",
                "type": "Component"
            },
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 38,
            "description": "Add an instanced component.",
            "itemtype": "method",
            "name": "addInstancedComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The component to add.",
                    "type": "Component"
                }
            ],
            "return": {
                "description": "Return the component if added, otherwise return null.",
                "type": "Component"
            },
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 72,
            "description": "Remove all components from the collection",
            "itemtype": "method",
            "name": "clear",
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 84,
            "description": "Get a component by its name or its index.",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "nameOrIndex",
                    "description": "The name or the index of the component.",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Return the component if exits, otherwise return null.",
                "type": "Component"
            },
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 101,
            "description": "Remove a component from the collection. Immediate mode will remove it now. Non immediate mode will remove the \ncomponent before any update.",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The component to remove, it can be a component instance, its index in the\n\t\t\t\t\t\t\t\t\tthe collection or the component's name.",
                    "type": "Component|String|Number"
                },
                {
                    "name": "immediate",
                    "description": "Set to true to remove the component now.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Return the removed component if succed, otherwise return null.",
                "type": "Component"
            },
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 144,
            "description": "Call the initialize method of all components. Check if dirty components need to be removed.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 161,
            "description": "Call the update method of all components",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "The delta time.",
                    "type": "Number"
                }
            ],
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 172,
            "description": "Call the draw method of all components.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "The delta time.",
                    "type": "Number"
                }
            ],
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 183,
            "description": "Check dirty components and remove them.",
            "itemtype": "method",
            "name": "checkDirtyComponents",
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 196,
            "description": "Get a component by its name.",
            "itemtype": "method",
            "name": "getComponentByName",
            "params": [
                {
                    "name": "name",
                    "description": "The component's name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return the desired component, otherwise return null.",
                "type": "Object"
            },
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\ComponentCollection.js",
            "line": 212,
            "description": "Get the size of the collection. The size is not computed at each call.\nThis value can be safely used in a loop.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Return the size of the collection.",
                "type": "Number"
            },
            "class": "wnp.ComponentCollection",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 20,
            "description": "The bouding volume of the scene.",
            "itemtype": "attribute",
            "name": "boundingSize",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 36,
            "description": "The hardware scaling level.",
            "itemtype": "attribute",
            "name": "hardwareScalingLevel",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 42,
            "description": "Determine if a mobile configuration is enabled.",
            "itemtype": "attribute",
            "name": "hasMobileConfig",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 48,
            "description": "The maximum size for a texture.",
            "itemtype": "attribute",
            "name": "boundingSize",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 54,
            "description": "Flag to enable or disable the Anti-Aliasing",
            "itemtype": "attribute",
            "name": "useAntialiasing",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 60,
            "description": "Flag to enable or disable environment maps",
            "itemtype": "attribute",
            "name": "useEnvMap",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 66,
            "description": "Flag to enable or disable multi-lighting",
            "itemtype": "attribute",
            "name": "boundingSize",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 72,
            "description": "Flag to enable or disable multi-texturing (normal map, specular map, etc.)",
            "itemtype": "attribute",
            "name": "useMultiTexturing",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 78,
            "description": "Flag to enable or disable shadows",
            "itemtype": "attribute",
            "name": "useShadow",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 84,
            "description": "Flag to enable or disable statistics",
            "itemtype": "attribute",
            "name": "boundingSize",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 99,
            "description": "Load uers's preference from LocalStorage. If no data are available, default values are used.",
            "itemtype": "method",
            "name": "loadConfiguration",
            "return": {
                "description": "Returns ’true’ if data has been successfully loaded, otherwise it returns false.",
                "type": "Boolean"
            },
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 125,
            "description": "Save user preferences into LocalStorage.",
            "itemtype": "method",
            "name": "saveConfiguration",
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 134,
            "description": "Serialize the configuration into a string.",
            "itemtype": "method",
            "name": "getConfiguation",
            "return": {
                "description": "Returns a serialized string of the configuration.",
                "type": "String"
            },
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Configuration.js",
            "line": 157,
            "description": "Change the graphics quality and save the configuration.\n\nwnp.Constants.GRAPHICS_FAST:\n     - Anti-Aliasing, Shadows, Environment Map, Multi-Texturing, Multi-Lighting = false\n     - Hardware Scaling = 1.5.\nwnp.Constants.GRAPHICS_GOOD:\n     - Anti-Aliasing, Multi-Texturing, Multi-Lighting = true, Environment Map, Shadows = false\n     - Hardware Scaling = 1.0.\nwnp.Constants.GRAPHICS_QUALITY:\n     - Anti-Aliasing, Shadows, Environment Map, Multi-Texturing, Multi-Lighting = true\n     - Hardware Scaling = 1.0.",
            "itemtype": "method",
            "name": "setQuality",
            "params": [
                {
                    "name": "quality",
                    "description": "The desired level of quality.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Configuration",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 122,
            "description": "Instance of `Structure`.",
            "itemtype": "attribute",
            "name": "structure",
            "readonly": "",
            "type": "wnp.Structure",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 130,
            "description": "Instance of `KeyboardManager`.",
            "itemtype": "attribute",
            "name": "keyboardManager",
            "readonly": "",
            "type": "wnp.KeyboardManager",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 138,
            "description": "Instance of `Configuration`.",
            "itemtype": "attribute",
            "name": "configuration",
            "readonly": "",
            "type": "wnp.Configuration",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 146,
            "description": "Instance of `Engine2D`.",
            "itemtype": "attribute",
            "name": "engine2D",
            "readonly": "",
            "type": "wnp.Engine2D",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 154,
            "description": "Instance of `Engine3D`.",
            "itemtype": "attribute",
            "name": "engine3D",
            "readonly": "",
            "type": "wnp.Engine3D",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 168,
            "description": "Instance of about window.",
            "itemtype": "attribute",
            "name": "aboutWindow",
            "readonly": "",
            "type": "wnp.UI.AboutWindow",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 252,
            "description": "Initialize engines.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 283,
            "description": "Initialize the viewer",
            "itemtype": "method",
            "name": "initializeViewer",
            "params": [
                {
                    "name": "callback",
                    "description": "A function called when the initialization is done.",
                    "type": "Function"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 344,
            "description": "Initialize the editor.",
            "itemtype": "method",
            "name": "initializeEditor",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 466,
            "description": "Update the timers and selected engine.",
            "itemtype": "method",
            "name": "update",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 495,
            "description": "Display the selected engine on the screen.",
            "itemtype": "method",
            "name": "draw",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 508,
            "description": "Compare two versions of a plan.",
            "itemtype": "method",
            "name": "compareVersion",
            "return": {
                "description": "Returns -1 if versionA is older than versionB.\n                 Returns 0 if versionA is the same than versionB.\n                 Returns 1 if versionA is newer than versionB.",
                "type": "Number"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 541,
            "description": "Sets the size of the screen.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "Screen width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Screen height.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 554,
            "description": "Gets the screen's width.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "Returns the screen's width.",
                "type": "Number"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 563,
            "description": "Gets the screen's height.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "Returns the screen's height.",
                "type": "Number"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 572,
            "description": "Gets the DOM element used by the 2D engine.",
            "itemtype": "method",
            "name": "getContainer2D",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 580,
            "description": "Gets the DOM element used by the 3D engine.",
            "itemtype": "method",
            "name": "getContainer3D",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 588,
            "description": "Gets the index of the selected engine.",
            "itemtype": "method",
            "name": "getSelectedEngine",
            "return": {
                "description": "Returns 1 for the 2D engine and 2 for the 3D engine.",
                "type": "Number"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 597,
            "description": "Gets the name of the plan.",
            "itemtype": "method",
            "name": "getPlanName",
            "return": {
                "description": "Returns the name of the plan.",
                "type": "String"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 606,
            "description": "Gets the URL of the plan.",
            "itemtype": "method",
            "name": "getPlanURL",
            "return": {
                "description": "Returns the URL of the plan.",
                "type": "String"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 615,
            "description": "Select the engine to use (2D or 3D). The last used engine is disabled.",
            "itemtype": "method",
            "name": "setSelectedEngine",
            "params": [
                {
                    "name": "engine",
                    "description": "Set to `wnp.Core.ENGINE_2D` to enable the 2D engine or `wnp.Core.ENGINE_3D` to enable the 3D engine.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 649,
            "description": "Gets the current structure.",
            "itemtype": "method",
            "name": "getSelectedStructure",
            "return": {
                "description": "Returns the current `Structure`.",
                "type": "BaseStructure"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 658,
            "description": "Gets the history of the structure.",
            "itemtype": "method",
            "name": "getHistory",
            "return": {
                "description": "Returns an object which contains structure's history.",
                "type": "Object"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 667,
            "description": "Handler called to take a screenshot of the current engine.",
            "itemtype": "method",
            "name": "takeScreenshot",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 787,
            "description": "Alterne entre le moteur 2D et 3D.",
            "itemtype": "method",
            "name": "switchEngine",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 796,
            "description": "Obtient un composant par son nom.",
            "itemtype": "method",
            "name": "getComponentByName",
            "params": [
                {
                    "name": "name",
                    "description": "Le nom du composant recherché.",
                    "type": "String"
                },
                {
                    "name": "engine",
                    "description": "Le moteur sur lequel faire la recherche. Par défaut la recherche est faite sur les 2 moteurs.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "component Retourne le composant recherché si il existe sinon retourne null.",
                "type": "Object"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 822,
            "description": "Ajoute un élément de structure dans la structure courange.",
            "itemtype": "method",
            "name": "addStrutureElement",
            "params": [
                {
                    "name": "structurPart",
                    "description": "Un élément de structure.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 832,
            "description": "Mise à jour du canvas de dessin après une désérialisation.",
            "itemtype": "method",
            "name": "udpateDeserialisation",
            "params": [
                {
                    "name": "previousEngineStates",
                    "description": "Un objet contenant les états des moteurs avant désérialisation.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 848,
            "description": "Vérifie si l'utilisateur a un plan stocké dans son « localStorage » et lui demande s'il veut le charger.",
            "itemtype": "method",
            "name": "checkLocalPlan",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 861,
            "description": "Sauvegarde la structure globale dans le localStorage.",
            "itemtype": "method",
            "name": "saveLocalStructure",
            "params": [
                {
                    "name": "showMessage",
                    "description": "Affiche une boîte de dialogue si égale à `true`.",
                    "type": "Boolean"
                },
                {
                    "name": "forceSave",
                    "description": "Passe la vérification et sauvegarde la structure.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "La structure sérialisée.",
                "type": "Object"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 901,
            "description": "Charge une structure précedement sauvegardée dans le localStorage.",
            "itemtype": "method",
            "name": "loadLocalStructure",
            "params": [
                {
                    "name": "showMessage",
                    "description": "Affiche une boîte de dialogue si égale à `true`.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "`true` si une sauvegarde existe sinon `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 956,
            "description": "Supprime une structure précedement sauvegardée du le localStorage.",
            "itemtype": "method",
            "name": "removeLocalStructure",
            "params": [
                {
                    "name": "showMessage",
                    "description": "Affiche une boîte de dialogue si égale à `true`.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "`true` si une sauvegarde existe et a été supprimée sinon `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 984,
            "description": "Création d'une capture d'écran à la taille désirée du canvas 2D",
            "itemtype": "method",
            "name": "getPreviewImage",
            "params": [
                {
                    "name": "Largeur",
                    "description": "de l'image.",
                    "type": "Number"
                },
                {
                    "name": "Hauteur",
                    "description": "de l'image.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Retourne une chaine base64 de l'image.",
                "type": "String"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1024,
            "description": "le but de cette methode est d'enregistrer en flat les uuid qui sont sauvegardés\ncela va permettre en cas de nouveau plan de recharger le localstorage si celui ci n'a jamais été sauvegardé",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1140,
            "description": "Disable engine 2D AND 3D. It's useful to do some specific operations. see `unlock()` to unlock.",
            "itemtype": "method",
            "name": "lock",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1155,
            "description": "Stop the previous lock and enable the last used engine. see `lock()`.",
            "itemtype": "method",
            "name": "unlock",
            "params": [
                {
                    "name": "previousEngineStates",
                    "description": "An object which contains the previous state of the engines.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1180,
            "description": "Hide the splashscreen.",
            "itemtype": "method",
            "name": "hideSplashScreen",
            "params": [
                {
                    "name": "timeout",
                    "description": "The time to wait before hide the splashscreen.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1215,
            "description": "Check if a `Structure` is stored in the ‘localStorage‘",
            "itemtype": "method",
            "name": "_localStrucureExists",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Returns ‘true‘ if a `Structure` is stored, otherwise it returns ‘false‘.",
                "type": "Bool"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1228,
            "description": "Gets the `Structure` stored in the ‘localStorage‘.",
            "itemtype": "method",
            "name": "_getLocalStorageStructure",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Returns the `Structure` stored in the `localStorage` otherwise it returns null.",
                "type": "Object"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1241,
            "description": "Indicates whether the current user is a publisher.",
            "itemtype": "method",
            "name": "_isPublisher",
            "return": {
                "description": "Returns `true` or `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1250,
            "description": "Gets the origin of the `iframe`.",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "Returns the origin.",
                "type": "String"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1259,
            "description": "Gets the `Structure` at the specified URL.",
            "itemtype": "method",
            "name": "_getStructureFromUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "An URL of a plan.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A function called when the `Structure` is ready to use.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the `Structure` of the plan at the specified URL.",
                "type": "Object"
            },
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1312,
            "description": "Control the coherence of a `Structure`.",
            "coherencecontrol": "",
            "params": [
                {
                    "name": "structure",
                    "description": "The structure to control.",
                    "type": "Structure"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1323,
            "description": "Load the specified `Structure`",
            "itemtype": "method",
            "name": "_loadStructure",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "structure",
                    "description": "The `Structure` to load.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A function to call when it's loaded.",
                    "type": "Function"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1346,
            "description": "Clear the structure from the `localStorage`.",
            "itemtype": "method",
            "name": "_clearLocaleStructure",
            "access": "private",
            "tagname": "",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1359,
            "description": "Create a default `Structure` with four walls and a ground.",
            "itemtype": "method",
            "name": "_createDefaultStructure",
            "access": "private",
            "tagname": "",
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1401,
            "description": "Display an `iframe` login.",
            "itemtype": "method",
            "name": "_loginIframe",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "connectionUrl",
                    "description": "The connection url.",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "(Optional) Width for the `iframe`.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "(Optional) Height for the `iframe`.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Core.js",
            "line": 1424,
            "description": "Obtient un plan par son id.",
            "itemtype": "method",
            "name": "getPlanById",
            "params": [
                {
                    "name": "Une",
                    "description": "collection de plans.",
                    "type": "Array"
                },
                {
                    "name": "L'id",
                    "description": "du plan à rechercher dans la collection.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Core",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\DragControls.js",
            "line": 70,
            "description": "Change the hardware scaling value.",
            "itemtype": "method",
            "name": "setHardwareScaling",
            "params": [
                {
                    "name": "value",
                    "description": "The desired value of hardware scaling",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\DragControls.js",
            "line": 79,
            "description": "Change the DOM element",
            "itemtype": "method",
            "name": "setDomElement",
            "params": [
                {
                    "name": "Canvas",
                    "description": "node.",
                    "type": "HTMLCanvasElement"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 29,
            "description": "Gets the DOM element which contains all 2D canvas.",
            "itemtype": "method",
            "name": "getContainer",
            "return": {
                "description": "Returns the DOM element which contains all 2D canvas.",
                "type": "DOMElement"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 38,
            "description": "Main canvas",
            "itemtype": "attribute",
            "name": "canvas",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 46,
            "description": "Dynamtic canvas (for temporary draws).",
            "itemtype": "attribute",
            "name": "dynamicCanvas",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 54,
            "description": "Access to the library used to draw symbols 2D.",
            "itemtype": "attribute",
            "name": "symbols2D",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 121,
            "description": "Inidicates whether the engine 2D is enabled.",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": "Returns `true` if the engine is enabled, otherwise returns `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 130,
            "description": "Enable or disable the engine2D.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "Set to `true` for enable or `false` to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 149,
            "description": "Gets the actual zoom level.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "Returns the actual zoom level.",
                "type": "Number"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 158,
            "description": "Define the zoom level.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The zoom level (0.3 < zoom < 5)",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 174,
            "description": "Gets the actual translation.",
            "itemtype": "method",
            "name": "getTranslation",
            "return": {
                "description": "Return the translation.",
                "type": "Vector2"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 183,
            "description": "Sets the translation",
            "itemtype": "method",
            "name": "setTranslation",
            "params": [
                {
                    "name": "translation",
                    "description": "The desired translation vector.",
                    "type": "Vector"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 217,
            "description": "Gets a transformed vector from plan coordinates to canvas coordinates.",
            "itemtype": "method",
            "name": "toRealCoord",
            "params": [
                {
                    "name": "vector",
                    "description": "Plan coordinates.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns a transformed vector to canvas coordinates.",
                "type": "Vector"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 229,
            "description": "Gets the actual mode of the engine.",
            "itemtype": "method",
            "name": "getMode",
            "return": {
                "description": "Returns the actual mode of the engine.",
                "type": "Number"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 243,
            "description": "Change the mode of the engine.",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": "The desired mode (ex: core.Engine2D.MODE_NORMAL).",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 263,
            "description": "Define whether the autoscroll must be enabled even if the mode isn't MODE_DRAG.\n\nNOTE: This option returns to `False` in every mode except when the mode is considered MODE_DRAG.",
            "itemtype": "method",
            "name": "setEnableAutoScroll",
            "params": [
                {
                    "name": "autoScroll",
                    "description": "Sets to `true` to enable the autoscroll or `false` to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 275,
            "description": "Gets a target (object under the cursor).",
            "itemtype": "method",
            "name": "getTarget",
            "params": [
                {
                    "name": "mstate",
                    "description": "(optionnel) A snapshot of the mouse event.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return the object under the cursor, otherwise return `null`.",
                "type": "BaseStructure"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 296,
            "description": "Gets the mouse's state.",
            "itemtype": "method",
            "name": "getMouseState",
            "return": {
                "description": "Returns the mouse's state (see `mstate`).",
                "type": "Object"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 305,
            "description": "Allow you to draw an icon next to the cursor.",
            "itemtype": "method",
            "name": "setCursorIcon",
            "params": [
                {
                    "name": "callback",
                    "description": "A draw function for the icon (args: ctx, {x, y}).",
                    "type": "Function"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 319,
            "description": "Initialize the engine;",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 347,
            "description": "Display the plan centered on the screen with the best possible zoom level.",
            "itemtype": "method",
            "name": "bestZoom",
            "params": [
                {
                    "name": "forceWidth",
                    "description": "(Optional) Force a width.",
                    "type": "Number"
                },
                {
                    "name": "forceHeight",
                    "description": "(Optional) Force an height.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 362,
            "description": "Gets the best zoom attributes",
            "itemtype": "method",
            "name": "getBestZoomAttributes",
            "params": [
                {
                    "name": "forceWidth",
                    "description": "(Optional) Force a width.",
                    "type": "Number"
                },
                {
                    "name": "forceHeight",
                    "description": "(Optional) Force an height.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns an objet which contains the zoom and the translation.",
                "type": "Object"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 403,
            "description": "re-initialize the engine.",
            "itemtype": "method",
            "name": "reinitialize",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 415,
            "description": "Initialize components.",
            "itemtype": "method",
            "name": "initializeComponents",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 423,
            "description": "Called on screen resize.",
            "itemtype": "method",
            "name": "onResize",
            "params": [
                {
                    "name": "width",
                    "description": "(Optional) The canvas' width, default is the screen's width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "(Optional) The canvas' height, default is screen's height.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 440,
            "description": "Update components.",
            "itemtype": "method",
            "name": "update",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 470,
            "description": "Draw the dynamic and static canvas",
            "itemtype": "method",
            "name": "draw",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 489,
            "description": "Register a callback for a specific event.",
            "itemtype": "method",
            "name": "registerEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "An unique identifier for this event (ex: \"coreComponentWallClick\").",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "The priority for this event (define callback call order).",
                    "type": "Number"
                },
                {
                    "name": "evName",
                    "description": "The event name associated to callback.",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "Define the mode where the event is active (ex: `Core.MODE_NORMAL|Core.MODE_DRAG`).",
                    "type": "Number"
                },
                {
                    "name": "objType",
                    "description": "The type of object which must be targeted, or `null`.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call.",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "(Optional) Data passed to the callback.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 528,
            "description": "Unregister a callback for a specific event.",
            "itemtype": "method",
            "name": "unregisterEventCb",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier of the event to remove.",
                    "type": "String"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 544,
            "description": "Instanciate then add a component. If the dirty flags is sets to true then it's not added. (ex: addComponent(MyCustomComponentClassName)).",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "componentObject",
                    "description": "The type of component to add.",
                    "type": "BaseComponent2D"
                }
            ],
            "return": {
                "description": "Returns the instanced component if it was added, otherwise it returns null.",
                "type": "BaseComponent2D"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 554,
            "description": "Add an instanced component. If the dirty flags is sets to true then it's not added.",
            "itemtype": "method",
            "name": "addInstancedComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The component to add.",
                    "type": "BaseComponent2D"
                }
            ],
            "return": {
                "description": "Returns the instanced component if it was added, otherwise it returns null.",
                "type": "BaseComponent2D"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 564,
            "description": "Gets a componant by its index or name.",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "nameOrIndex",
                    "description": "The component's index or name.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "Returns a component with the name/index passed in parameters if exists, otherwise it returns `null`.",
                "type": "BaseComponent2D"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 574,
            "description": "Gets a componant by its index or name. (please use getComponent instead).",
            "itemtype": "method",
            "name": "searchComponent",
            "params": [
                {
                    "name": "nameOrIndex",
                    "description": "The component's index or name.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "Returns a component with the name/index passed in parameters if exists, otherwise it returns `null`.",
                "type": "BaseComponent2D"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 584,
            "description": "Safe method for removing a component. The component will be removed after the update/draw process.",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The component to remove.",
                    "type": "BaseComponent2D"
                },
                {
                    "name": "immediate",
                    "description": "(Optional) Sets to `true` to remove it now.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns `true` if the component was successfully removed, otherwise it returns `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 595,
            "description": "Remove a component with it name.",
            "removecomponentbyname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The component's name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the removed component if it was successfully removed, otherwise it returns null.",
                "type": "BaseComponent2D"
            },
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 605,
            "description": "Clear all components of the 2D engine. All destroy methods are called before the remove process.",
            "itemtype": "method",
            "name": "clearComponents",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 613,
            "description": "Asks for a drawing of the static canvas in the next rendering pass\nWill trigger the static draw callback",
            "itemtype": "method",
            "name": "requestStaticDraw",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 625,
            "description": "Requests a refresh of the dynamic canvas. All components registered to the `dynamic-draw` event will be called.",
            "itemtype": "method",
            "name": "requestDynamicDraw",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 633,
            "description": "Requests a recompute of the structure. The `compute()` method of all component will be called.",
            "itemtype": "method",
            "name": "requestCompute",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 644,
            "description": "Change the mouse cursor on the canvas.",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "(optionnel)",
                    "description": "The mouse cursor to use.",
                    "type": "String"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 654,
            "description": "Display a context menu.",
            "itemtype": "method",
            "name": "displayContextMenu",
            "params": [
                {
                    "name": "items",
                    "description": "Items for the context menu.",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "Structure used for this menu.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function called when properties are updated. The callback prototype: function (property, value).",
                    "type": "Function"
                },
                {
                    "name": "rmCallback",
                    "description": "Function called when the user click on the `remove` button. If you pass `null` then the remove button will not be displayed.",
                    "type": "Function"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 727,
            "description": "State machine for the 2D engine.\n\nthis method is called when an event is triggered or when a mode has changed. \nThis method is responsible to change or set correct modes, call useful callbacks, etc.",
            "itemtype": "method",
            "name": "_stateMachine",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "(Optionnal) Parameters to force the state management.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    {\n        mode: {Number},           // Current mode (n)\n        lastMode: {Number},       // Previous mode (n-1)\n        newMode: {Number},        // Next mode (n+1)\n        mstate: {Object},         // Pointer's (aka mouse/touch) state.\n        evName: {String},         // Event's name.\n        ev: {Object},             // An instance of window.Event\n        target: {Object},         // The target under the pointer (mouse/touch)\n        lastTarget: {Object}      // The previous target under the pointer.\n    }"
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 948,
            "description": "All mouse callbacks are called.",
            "itemtype": "method",
            "name": "_callMouseEventCb",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evName",
                    "description": "The event's name.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The targeted object or `null`.",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                },
                {
                    "name": "mstate",
                    "description": "A snapshot of the pointer state.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 973,
            "description": "Call all refresh callbacks of the main canvas.",
            "itemtype": "method",
            "name": "_callDrawCb",
            "access": "private",
            "tagname": "",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 992,
            "description": "Appel les callbacks pour l'entrée / sortie du curseur dans la zone de dessin",
            "itemtype": "method",
            "name": "_callRefreshCb",
            "access": "private",
            "tagname": "",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1007,
            "description": "Call all refresh callbacks of the dynamic canvas.",
            "itemtype": "method",
            "name": "_callDynamicDrawCb",
            "access": "private",
            "tagname": "",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1032,
            "description": "Call all callbacks on exit of the mode `MODE_DRAW`.",
            "itemtype": "method",
            "name": "_callDrawEndCb",
            "access": "private",
            "tagname": "",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1046,
            "description": "Call all callbacks on exit of the mode `MODE_SUBSLOPE`.",
            "itemtype": "method",
            "name": "_callSubslopeEndCb",
            "access": "private",
            "tagname": "",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1060,
            "description": "Automatic scrolling when the cursor reaches the edge of the canvas.",
            "itemtype": "method",
            "name": "_enableAutoScroll",
            "access": "private",
            "tagname": "",
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1122,
            "description": "Supports mouse/touch/pointer events.",
            "itemtype": "method",
            "name": "onMouseEvent",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                },
                {
                    "name": "mstate",
                    "description": "(Optional) Additionnal informations about the pointer state.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1183,
            "description": "Called when a property of the context menu has changed.",
            "itemtype": "method",
            "name": "onContextMenuPropertyChanged",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1192,
            "description": "Called when the context menu closed.",
            "itemtype": "method",
            "name": "onContextMenuClose",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1204,
            "description": "Called when the context menu is removed.",
            "itemtype": "method",
            "name": "onContextMenuRemove",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine2D.js",
            "line": 1214,
            "description": "Called when the context menu log infos.",
            "itemtype": "method",
            "name": "onContextMenuDebug",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine2D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 146,
            "description": "Gets the DOM element which contains the 3D canvas.",
            "itemtype": "method",
            "name": "getContainer",
            "return": {
                "description": "Returns the DOM element which contains all 2D canvas.",
                "type": "DOMElement"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 156,
            "description": "Register a mesh to be used when calculating shadows.",
            "itemtype": "method",
            "name": "castShadows",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh to use.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 161,
            "description": "Collides with a specific set of meshes",
            "itemtype": "method",
            "name": "collideWithMeshes",
            "return": {
                "description": "Retourne le conteneur HTML utilisé par le moteur 3D.",
                "type": "DOMElement"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 195,
            "description": "Unregister a mesh to be not used when calculating shadows.",
            "itemtype": "method",
            "name": "unCastShadows",
            "params": [
                {
                    "name": "mesh",
                    "description": "The mesh to use.",
                    "type": "BABYLON.Mesh"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 204,
            "description": "Reinitialize the engine after a crash. A counter storing the number of crashes, \nif it's higher then MAX_CONTEXT_LOST then the 3D engine is shutdown.",
            "itemtype": "method",
            "name": "reinitializeEngine",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 233,
            "description": "Enable or disable the engine 3D.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "Set",
                    "description": "to `true` to enable, `false` to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 247,
            "description": "Setup the perspective of the camera when the engine 3D awakes.",
            "itemtype": "method",
            "name": "setInitialView",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 269,
            "description": "Call `compute()` method on all components.",
            "itemtype": "method",
            "name": "requestCompute",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 279,
            "description": "*\n        Components management         *\n*",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 285,
            "description": "Instanciate then add a component. If the dirty flags is sets to true then it's not added. (ex: addComponent(MyCustomComponentClassName)).",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "componentObject",
                    "description": "The type of component to add.",
                    "type": "BaseComponent3D"
                }
            ],
            "return": {
                "description": "Returns the instanced component if it was added, otherwise it returns null.",
                "type": "BaseComponent3D"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 295,
            "description": "Add an instanced component. If the dirty flags is sets to true then it's not added.",
            "itemtype": "method",
            "name": "addInstancedComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The component to add.",
                    "type": "BaseComponent3D"
                }
            ],
            "return": {
                "description": "Returns the instanced component if it was added, otherwise it returns null.",
                "type": "BaseComponent3D"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 305,
            "description": "Gets a componant by its index or name.",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "nameOrIndex",
                    "description": "The component's index or name.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "Returns a component with the name/index passed in parameters if exists, otherwise it returns `null`.",
                "type": "BaseComponent3D"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 315,
            "description": "Gets a componant by its index or name. (please use getComponent instead).",
            "itemtype": "method",
            "name": "searchComponent",
            "params": [
                {
                    "name": "nameOrIndex",
                    "description": "The component's index or name.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "Returns a component with the name/index passed in parameters if exists, otherwise it returns `null`.",
                "type": "BaseComponent3D"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 325,
            "description": "Safe method for removing a component. The component will be removed after the update/draw process.",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The component to remove.",
                    "type": "BaseComponent3D"
                },
                {
                    "name": "immediate",
                    "description": "(Optional) Sets to `true` to remove it now.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns `true` if the component was successfully removed, otherwise it returns `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 336,
            "description": "Remove a component with it name.",
            "removecomponentbyname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The component's name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the removed component if it was successfully removed, otherwise it returns null.",
                "type": "BaseComponent3D"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 346,
            "description": "Clear all components of the 3D engine. All destroy methods are called before the remove process.",
            "itemtype": "method",
            "name": "clearComponents",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 354,
            "description": "*\n        Collision detection           *\n*",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 360,
            "description": "Tests if a 2D position is colliding with an object of the scene.",
            "itemtype": "method",
            "name": "collideWithScene",
            "params": [
                {
                    "name": "x",
                    "description": "The coordinate on X axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The coordinate on Y axis.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns `true` if it collides, otherwise it returns `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 373,
            "description": "Tests if a 2D position is colliding with the ground.",
            "itemtype": "method",
            "name": "projectMouseOnGround",
            "return": {
                "description": "Returns `true` if it collides, otherwise it returns `false`.",
                "type": "Boolean"
            },
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 394,
            "description": "Tests if a 2D position is colliding with a plane geometry.",
            "itemtype": "method",
            "name": "projectMouseOnPlane",
            "params": [
                {
                    "name": "plane",
                    "description": "A plane object.",
                    "type": "BABŸLON.Plane"
                },
                {
                    "name": "x",
                    "description": "The coordinate on X axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The coordinate on Y axis.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 410,
            "description": "*\n           Event handlers             *\n*",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 416,
            "description": "Handler called when a double click or a long press (touch/pointer) occurs.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 426,
            "description": "Handler called when a double click or a long press (touch/pointer) occurs.",
            "itemtype": "method",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 436,
            "description": "Event handler used to wrap mouse/touch/pointer events.",
            "itemtype": "method",
            "name": "onMouseEvent",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                },
                {
                    "name": "mstate",
                    "description": "A snapshot of the pointer state.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 488,
            "description": "Resize the window (Front Buffer) according to hardware scaling and menus width.",
            "itemtype": "method",
            "name": "resize",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 498,
            "description": "Handler called when the `WebGLContext` is lost. The core will switch on 2D engine.",
            "itemtype": "method",
            "name": "onContextLost",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 508,
            "description": "Handler called when the `WebGLContext` is restored. The engine 3D is reinitialized.",
            "itemtype": "method",
            "name": "onContextRestored",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 518,
            "description": "Triggered when walls are ready.",
            "itemtype": "method",
            "name": "onContextRestored",
            "params": [
                {
                    "name": "event",
                    "description": "An event object.",
                    "type": "Event"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 527,
            "description": "*\n      Lyfe cycle : State pattern      *\n*",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 533,
            "description": "Initialize the engine.",
            "itemtype": "method",
            "name": "initialize",
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 550,
            "description": "Update components.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elapsedTime",
                    "description": "The elapsed time since the last call.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Engine3D.js",
            "line": 578,
            "description": "Draw the scene on the screen.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "elapsedTime",
                    "description": "The elapsed time since the last call.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Engine3D",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 74,
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 76,
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 139,
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 141,
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 350,
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Material.js",
            "line": 352,
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 16,
            "description": "Objet permettant de construire des materials.",
            "is_constructor": 1,
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 25,
            "description": "Réalise une fusion de paramètres entre 2 objets.",
            "itemtype": "method",
            "name": "mergeParams",
            "params": [
                {
                    "name": "Un",
                    "description": "objet avec des propriétés.",
                    "type": "Object"
                },
                {
                    "name": "Un",
                    "description": "objet autre avec des propriétés.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "params Un objet comportant toutes les propriétés des 2 objets passés en paramètre.",
                "type": "Object"
            },
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\MaterialFactory.js",
            "line": 43,
            "description": "Active la répétition de texture sur une texture.",
            "itemtype": "method",
            "name": "static repeatTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "La texture à utiliser.",
                    "type": "THREE.Texture"
                },
                {
                    "name": "x",
                    "description": "Le facteur X de répétion à utiliser.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Le facteur Y de répétion à utiliser.",
                    "type": "Number"
                }
            ],
            "class": "wnp.PlasticMaterial",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 31,
            "description": "Supprime le contenu de la structure sans effacer la référence du tableau",
            "itemtype": "method",
            "name": "clear",
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 48,
            "description": "Obtient la taille de la structure.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "La taille de la structure."
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 58,
            "description": "Ajoute un élément à la structure globale (un étage, un jardin,...)",
            "itemtype": "method",
            "name": "addElement",
            "params": [
                {
                    "name": "élément",
                    "description": "à ajouter.",
                    "type": "Layer"
                }
            ],
            "return": {
                "description": "Retourne vrai si l'élément a été ajoutée à la structure sinon retourne faux."
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 73,
            "description": "Ajouter un sous élément à la structure en cours",
            "itemtype": "method",
            "name": "addToCurrentStructure.",
            "params": [
                {
                    "name": "layer",
                    "description": "sous élément à ajouter.",
                    "type": "Layer"
                }
            ],
            "return": {
                "description": "Retourne vrai si le sous élément a été ajoutée sinon retourne faux."
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 84,
            "description": "Obtient un élément de la structure par son indice",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "Index",
                    "description": "de la partie de structure.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Retourne vrai si la partie de structure a été ajoutée sinon retourne faux."
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 95,
            "description": "Obtient un membre par son nom.",
            "itemtype": "method",
            "name": "getElementByName",
            "params": [
                {
                    "name": "Le",
                    "description": "nom du membre à rechercher.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Retourne le membre si il existe, sinon retourne null.",
                "type": "Object"
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 115,
            "description": "Supprime une partie à la structure (un étage, un jardin,...)",
            "itemtype": "method",
            "name": "removeElement",
            "params": [
                {
                    "name": "layer",
                    "description": "Couche à supprimer.",
                    "type": "Layer"
                }
            ],
            "return": {
                "description": "Retourne vrai si la partie de structure a été supprimée sinon retourne faux."
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 132,
            "description": "Obtient la structure courante.",
            "itemtype": "method",
            "name": "getCurrentStrucutre",
            "return": {
                "description": "Retourne la structure courante."
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 142,
            "description": "Change la structure courante.",
            "itemtype": "method",
            "name": "setCurrentStrucutreIndex",
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 212,
            "description": "Reindexe les membres de la structures (apres une suppression par exemple) pour garder la continuité",
            "itemtype": "method",
            "name": "reindexMembers",
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 222,
            "description": "Reindexe les membres de la structures (apres une suppression par exemple) pour garder la continuité",
            "itemtype": "method",
            "name": "reindexMembers",
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 244,
            "description": "Serialise la structure globale.",
            "itemtype": "method",
            "name": "static serializeMembers",
            "params": [
                {
                    "name": "members",
                    "description": "La structure globale.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "serializedStructure Une chaine de caractéres resultant de la sérialisation.",
                "type": "String"
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Core\\Structure.js",
            "line": 261,
            "description": "Deserialise la structure globale.",
            "itemtype": "method",
            "name": "static deserializeMembers",
            "params": [
                {
                    "name": "members",
                    "description": "La structure globale.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "structure Une structure déserialisée.",
                "type": "Structure"
            },
            "class": "wnp.Structure",
            "module": "Wanaplan",
            "submodule": "Core",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GeometryHelper.js",
            "line": 523,
            "description": "prends une geometrie stratée et fermée et genere ses faces\ntop et bottom generent la face du dessus et du dessous si mis à true\nnbPoint est le nombre de point par strate",
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GeometryHelper.js",
            "line": 689,
            "description": "for a mesh with face aligned with x,y,z axis\ndefine and set the UV map",
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GeometryHelper.js",
            "line": 1083,
            "description": "Representation of the pillow like a cube but with 3*3*3 points\nTODO : uvs",
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 18,
            "description": "Gets supported GPU capabilities of the browser like the list of GL extensions and max texture size.",
            "itemtype": "method",
            "name": "getCapabilities",
            "static": 1,
            "return": {
                "description": "Return an object that contains GPU capabilities.",
                "type": "Object"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 71,
            "description": "Gets an object which contains the correct event names to use (touch, mouse or pointer).",
            "itemtype": "method",
            "name": "getWrappedMouseEventNames",
            "static": 1,
            "return": {
                "description": "Return a dictionary with correct event names \n        Result on Android:       { down: \"touchstart\", move: \"touchmove\", up: \"touchend\", cancel: \"touchcancel\" }\n        Result on WindowsPhone:  { down: \"pointerdown\", move: \"pointermove\", up: \"pointerup\", cancel: \"pointercancel\", out: \"pointerout\" }\n        Result on Desktop:       { down: \"mousedown\", move: \"mousemove\", up: \"mouseup\", cancel: \"mouseup\" }",
                "type": "Object"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 119,
            "description": "Indicates whether the browser has WebGL support.",
            "itemtype": "method",
            "name": "hasWebGL",
            "static": 1,
            "return": {
                "description": "Return true if WebGL is supported, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 129,
            "description": "Indicates whether the browser has Canvas 2D support.",
            "itemtype": "method",
            "name": "hasCanvas2D",
            "static": 1,
            "return": {
                "description": "Return true if the canvas 2D is supported, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 139,
            "description": "Indicates whether the user's keyboard has an AZERTY layout.",
            "itemtype": "method",
            "name": "hasAzertyKeyboard",
            "static": 1,
            "return": {
                "description": "Return true if the user's keyboard has an AZERTY layout, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 149,
            "description": "Indicates whether the user's device is a mobile device.",
            "itemtype": "method",
            "name": "isMobileDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a mobile device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 159,
            "description": "Indicates whether the user's device is an Android device.",
            "itemtype": "method",
            "name": "isAndroidDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is an Android device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 169,
            "description": "Indicates whether the user's device is an Apple device.",
            "itemtype": "method",
            "name": "isAppleDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is an Apple device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 183,
            "description": "Indicates whether the user's device is a Windows Mobile device.",
            "itemtype": "method",
            "name": "isWindowsDevice",
            "static": 1,
            "return": {
                "description": "Return true if the user's device is a Windows Mobile device, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 197,
            "description": "Indicates whether the user's browser is Internet Explorer and return its version if it is.",
            "itemtype": "method",
            "name": "isIE",
            "static": 1,
            "return": {
                "description": "Return the version of Internet Explorer if it is, otherwise return -1.",
                "type": "Number"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 208,
            "description": "Indicates if the user's browser is Internet Explorer 9.",
            "itemtype": "method",
            "name": "isIE9",
            "static": 1,
            "return": {
                "description": "Return true if the user's browser is Internet Explorer 9, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 218,
            "description": "Indicates if the user's browser is Internet Explorer 10.",
            "itemtype": "method",
            "name": "isIE9",
            "static": 1,
            "return": {
                "description": "Return true if the user's browser is Internet Explorer 10, otherwise return false.",
                "type": "Boolean"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 228,
            "description": "Create a screenshot of the 3D scene.",
            "itemtype": "method",
            "name": "createScreenshot3D",
            "static": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "The 3D engine.",
                    "type": "BABYLON.Engine"
                },
                {
                    "name": "size",
                    "description": "(optional) An object that contains the size of the screenshot.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "(optional) A function called when the screenshot generation is done.",
                    "type": "Function"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\GlobalHelper.js",
            "line": 282,
            "description": "Force the device mode.",
            "itemtype": "method",
            "name": "__forceMobileDevice",
            "params": [
                {
                    "name": "value",
                    "description": "Set to true to force the mobile detection or false for desktop.",
                    "type": "Boolean"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 10,
            "description": "Insert an HTML file into the specified node.",
            "itemtype": "method",
            "name": "insertHTML",
            "params": [
                {
                    "name": "htmlPath",
                    "description": "The URL of the HTML file to load.",
                    "type": "String"
                },
                {
                    "name": "domNode",
                    "description": "The element's ID or the element itself.",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the HTML file is insered.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 38,
            "description": "Insert a script to the page.",
            "itemtype": "method",
            "name": "addScript",
            "params": [
                {
                    "name": "scriptUrl",
                    "description": "The URL of the script to load.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the script is ready.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 65,
            "description": "Load a collection of scripts. Here are two methods to load scripts.\n1. A simple array with urls [ \"script.js\", \"script2.js\" ] \n2. An array of dictionary [ { MyObject: \"myObjectScript.js\" } ]. In this case the function will test if the script is already loaded \n   by using the key of the dictionary as object name.",
            "itemtype": "method",
            "name": "addScripts",
            "params": [
                {
                    "name": "scripts",
                    "description": "An array that contains all url to load or an array of.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "(Optional) A dictionary of parameters (ex. { \"async\": \"true\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "(Optional) A function called when the script is ready.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "(Optional) A function called if the process fail.",
                    "type": "Function"
                },
                {
                    "name": "interval",
                    "description": "(Optional) The value of check interval.",
                    "type": "Number"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 126,
            "description": "Add a CSS file to the page.",
            "itemtype": "method",
            "name": "addStylesheet",
            "static": 1,
            "params": [
                {
                    "name": "stylesheet",
                    "description": "The URL of the file to load.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A dictionary of parameters (ex. { \"media\": \"print\" }).",
                    "type": "Object"
                },
                {
                    "name": "successCallback",
                    "description": "A function called when the file is insered.",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "A function called if the process fail.",
                    "type": "Function"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 165,
            "description": "This method simulate a key event. It's used for testing purpose.",
            "itemtype": "method",
            "name": "simulateKey",
            "static": 1,
            "params": [
                {
                    "name": "keyCode",
                    "description": "The Key Code of the key to simulate.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The type of event: down, up or press.",
                    "type": "String"
                },
                {
                    "name": "modifiers",
                    "description": "A dictionary of modifier keys (ex. { \"ctrl\": \"true\" }).",
                    "type": "Object"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\HTMLHelper.js",
            "line": 185,
            "description": "This method simulate a mouse event. It's used for testing purpose.",
            "itemtype": "method",
            "name": "simulateClick",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "An element which will trigger the mouse event.",
                    "type": "HTMLElement"
                },
                {
                    "name": "x",
                    "description": "(optional) The horizontal coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "(optional) The vertical coordinate.",
                    "type": "Number"
                },
                {
                    "name": "(optional)",
                    "description": "type The type of mouse event: down, up, move.",
                    "type": "String"
                },
                {
                    "name": "(optional)",
                    "description": "button The button index (ex. 0 for the left button).",
                    "type": "Number"
                },
                {
                    "name": "(optional)",
                    "description": "wheel The wheel value.",
                    "type": "Number"
                }
            ],
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 4,
            "description": "return the rotation quaternion of the object relatively to the world",
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 28,
            "description": "return the oriented bounding box relatively to the world\nwhere position is the center of the box and dimension the dimension of the box",
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 138,
            "description": "set the AABB in order to define the minimal volume that wrap the OyBB given in argument\n/!\\ the resulting AABB may not fit exactly the OyBB volume due to rotation limitation",
            "itemtype": "method",
            "name": "copyFromOyBB",
            "params": [
                {
                    "name": "OyBB",
                    "description": "the Oriented along y axis Bounding Box",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 149,
            "description": "set the AABB in order to define the minimal volume that wrap the OBB given in argument\n/!\\ the resulting AABB may not fit exactly the OBB volume due to rotation limitation",
            "itemtype": "method",
            "name": "copyFromOBB",
            "params": [
                {
                    "name": "OBB",
                    "description": "the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "wnp.AABB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 228,
            "description": "set the OBB in order to define the same volume as the AABB given in argument\nthe resulting OBB fit exactly the volume",
            "itemtype": "method",
            "name": "copyFromAABB",
            "params": [
                {
                    "name": "AABB",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "wnp.OBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 285,
            "description": "set the OBB in order to define the same volume as the OBB given in argument\nthe resulting OBB fit exactly the volume",
            "itemtype": "method",
            "name": "copyFromOyBB",
            "params": [
                {
                    "name": "OyBB",
                    "description": "the Oriented along y axis Bounding Box",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "wnp.OBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 458,
            "description": "test collision is one dimension between two intervals [a1,b1] , [a2,b2]\n\na1------b1\n       a2------------b2\n\n without numeric inprecision is a2 < b1 == a1 < b2",
            "itemtype": "method",
            "name": "rayToAABB",
            "params": [
                {
                    "name": "a1",
                    "description": "the min of the 1 interval",
                    "type": "Number"
                },
                {
                    "name": "b1",
                    "description": "the max of the 1 interval",
                    "type": "Number"
                },
                {
                    "name": "a2",
                    "description": "the min of the 2 interval",
                    "type": "Number"
                },
                {
                    "name": "b2",
                    "description": "the max of the 2 interval",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "false if there is no collision, true if there is"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 484,
            "description": "test collision between a ray and an Axis Aligned Bounding Box",
            "itemtype": "method",
            "name": "rayToAABB",
            "params": [
                {
                    "name": "o",
                    "description": "the origin of the ray",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "v",
                    "description": "the direction of the ray",
                    "type": "BABYLON.Vector3"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, else return a number t such as o+v*t is the point where the ray first collide the box,\n /!\\ t can be 0 if the is a collision ( beware of untyped test )"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 540,
            "description": "test collision between two Axis Aligned Bounding Boxes",
            "itemtype": "method",
            "name": "AABBtoAABB",
            "params": [
                {
                    "name": "box",
                    "description": "one of the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "one of the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 556,
            "description": "test collision between an Axis Aligned Bounding Boxes and an Oriented Bounding Box",
            "itemtype": "method",
            "name": "AABBtoOBB",
            "params": [
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 680,
            "description": "test collision between an Axis Aligned Bounding Boxes and an Oriented along y axis Bounding Box",
            "itemtype": "method",
            "name": "AABBtoOyBB",
            "params": [
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                },
                {
                    "name": "box",
                    "description": "the Oriented along Y axis Bounding Box",
                    "type": "OyBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 746,
            "description": "test collision between two Oriented Bounding Boxes",
            "itemtype": "method",
            "name": "OBBtoOBB",
            "params": [
                {
                    "name": "box",
                    "description": "one of the Oriented Bounding Box",
                    "type": "OBB"
                },
                {
                    "name": "box",
                    "description": "one of the Oriented Bounding Box",
                    "type": "OBB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 820,
            "description": "test collision between a triangle and an Axis Aligned Bounding Box",
            "itemtype": "method",
            "name": "triangleToAABB",
            "params": [
                {
                    "name": "trianglesPoints",
                    "description": "three points which are the vertex of the triangles",
                    "type": "Array of BABYLON.Vector3"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\ObjectHelper.js",
            "line": 944,
            "description": "test collision between a mesh and an Axis Aligned Bounding Box\n/!\\ this method has hight impact on performance, use with caution",
            "itemtype": "method",
            "name": "MeshToAABB",
            "params": [
                {
                    "name": "worldMatrix",
                    "description": "the transformation matrix of the mesh",
                    "type": "BABYLON.Matrix"
                },
                {
                    "name": "positions",
                    "description": "positions of the vertices, as returned by babylon.Mesh.getVertexBuffer ( ie vertex coordonate are concatened in a array )",
                    "type": "Array of number"
                },
                {
                    "name": "indices",
                    "description": "indices of the face vertices, as returned by babylon.Mesh.getVertexBuffer ( ie face index are concatened in a array )",
                    "type": "Array of number"
                },
                {
                    "name": "box",
                    "description": "the Axis Aligned Bounding Box",
                    "type": "AABB"
                }
            ],
            "return": {
                "description": "false if there is no collision, true is there is"
            },
            "class": "wnp.OyBB",
            "module": "Wanaplan",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 28,
            "description": "Draw a simple point.",
            "itemtype": "method",
            "name": "drawPoint",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 45,
            "description": "Draw an hovered point.",
            "itemtype": "method",
            "name": "drawPointHover",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "(optionnal) The zoom level.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 69,
            "description": "Draw an angle.",
            "itemtype": "method",
            "name": "drawAngle",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "(optionnal) The zoom level.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 111,
            "description": "Draw a segment with its points.",
            "itemtype": "method",
            "name": "drawSegment",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 142,
            "description": "Dessine un arc avec ses points et son control point.\nDraw an arc with its points and its control point.",
            "itemtype": "method",
            "name": "drawSegment",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "cp",
                    "description": "Position of the control point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 177,
            "description": "Draw a grip.",
            "itemtype": "method",
            "name": "drawGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 211,
            "description": "Draw a grip with a check icon at the end.",
            "itemtype": "method",
            "name": "drawCheckGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 253,
            "description": "Draw a grip with a cancel icon at the end.",
            "itemtype": "method",
            "name": "drawCancelGrip",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 295,
            "description": "Draw a segment with grips.",
            "itemtype": "method",
            "name": "drawGripSegment",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw for the first grip [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw for the second grip [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 332,
            "description": "Draw arrows of grips.",
            "itemtype": "method",
            "name": "drawArrows",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "arrows",
                    "description": "List of arrows to draw [up, left, down, right]`.",
                    "type": "Array"
                },
                {
                    "name": "distance",
                    "description": "Distance des flèches par rapport au centre définit par `pos`.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "(optionnel) Rotation angle.",
                    "type": "Number"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 372,
            "description": "Draw a measure.",
            "itemtype": "method",
            "name": "drawMeasure",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "point1",
                    "description": "Position of the first point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "Position of the second point `{x: ?, y: ?}`.",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "Measure's text.",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "(Optionnal) Mesure's color.",
                    "type": "String"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 439,
            "description": "Draw a check icon near the given position.",
            "itemtype": "method",
            "name": "drawCursorCheck",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pos",
                    "description": "Position `{x: ?, y: ?}`.",
                    "type": "Object"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\Symbols2D.js",
            "line": 478,
            "description": "Debug function to draw all symbols",
            "itemtype": "method",
            "name": "_drawAllSymbols",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas' context.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "wnp.Symbols2D",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Helpers\\uuid.js",
            "line": 20,
            "description": "Générateur d'UUID version 4\n\nle code provient de stackoverflow:\nhttp://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript",
            "itemtype": "method",
            "name": "uuid4",
            "static": 1,
            "return": {
                "description": "L'uuid généré",
                "type": "String"
            },
            "class": "wnp.uuid",
            "module": "Wanaplan",
            "submodule": "Helpers",
            "namespace": "wnp"
        },
        {
            "file": "js\\Logger.js",
            "line": 13,
            "description": "Display a standard message in the browser's console. (alias to console.log).",
            "itemtype": "method",
            "name": "message",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 25,
            "description": "Display a warning message in the browser's console. (alias to console.warn).",
            "itemtype": "method",
            "name": "warning",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 37,
            "description": "Display an error message in the browser's console. (alias to console.error).",
            "itemtype": "method",
            "name": "error",
            "static": 1,
            "params": [
                {
                    "name": "mixed",
                    "description": "An object or a string to display.",
                    "type": "Object"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 49,
            "description": "Display a message in the HTML debug console.",
            "itemtype": "method",
            "name": "out",
            "static": 1,
            "params": [
                {
                    "name": "messageText",
                    "description": "A message to show.",
                    "type": "String"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 62,
            "description": "Clear the HTML debug console.",
            "itemtype": "method",
            "name": "clear",
            "static": 1,
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\Logger.js",
            "line": 74,
            "description": "Enable or disable the debugger.",
            "itemtype": "method",
            "name": "setDebugMode",
            "params": [
                {
                    "name": "enabled",
                    "description": "Set to ’true’ to enable or ’false’ to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "Logger",
            "module": "Wanaplan"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 17,
            "description": "Start the timer.",
            "itemtype": "method",
            "name": "start",
            "class": "LoopTimer",
            "module": "Wanaplan"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 25,
            "description": "Update elapsed time.",
            "itemtype": "method",
            "name": "update",
            "class": "LoopTimer",
            "module": "Wanaplan"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 35,
            "description": "Gets elapsedTime since the last update.",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "elapsedTime Returns the elpased time since the last update.",
                "type": "Number"
            },
            "class": "LoopTimer",
            "module": "Wanaplan"
        },
        {
            "file": "js\\LoopTimer.js",
            "line": 44,
            "description": "Gets the delta time since the last update.",
            "itemtype": "method",
            "name": "getDeltaTime",
            "return": {
                "description": "deltaTime Returns the delta time since the last update.",
                "type": "Number"
            },
            "class": "LoopTimer",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 27,
            "description": "Load all test files and add tests to the stack to be executed.",
            "itemtype": "method",
            "name": "registerTests",
            "params": [
                {
                    "name": "readyCB",
                    "description": "a callback called when all test files are fully loaded and redy to execute.",
                    "type": "Function"
                }
            ],
            "class": "TestManager",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 72,
            "description": "Add a test case to the stack of tests.",
            "itemtype": "method",
            "name": "addTest",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the test.",
                    "type": "String"
                },
                {
                    "name": "testFunc",
                    "description": "The function that will be called.\n\t \t\t\t\t\t Note: The test function MUST have two arguments \n\t \t\t\t\t\t \t   The first is a success callback and the last is an error callback.",
                    "type": "Function"
                }
            ],
            "class": "TestManager",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\functionals\\js\\TestManager.js",
            "line": 144,
            "description": "Start the test process. All tests are loaded then executed in the order of the requiredTestFiles array.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "delay",
                    "description": "The delay to wait before starting (ex. wait that the dom is ultra ready!).",
                    "type": "Number"
                }
            ],
            "class": "TestManager",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 1,
            "description": "Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 13,
            "description": "## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 20,
            "description": "Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 25,
            "description": "Create the Jasmine environment. This is used to run all specs in a project.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 30,
            "description": "## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 77,
            "description": "Add all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 86,
            "description": "Expose the interface for adding custom equality testers.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 93,
            "description": "Expose the interface for adding custom expectation matchers",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 100,
            "description": "Expose the mock interface for the JavaScript timeout functions",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 107,
            "description": "## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 120,
            "description": "## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 133,
            "description": "The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 139,
            "description": "Filter which specs will be run by matching the start of the full name against the `spec` query param.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 150,
            "description": "Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 158,
            "description": "## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "class": "",
            "module": "Wanaplan"
        },
        {
            "file": "tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js",
            "line": 173,
            "description": "Helper function for readability above.",
            "class": "",
            "module": "Wanaplan"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:1"
        },
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js:1"
        },
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:1"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Floor\\FloorController.js:453"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Components\\CoreComponents\\Floor\\FloorController.js:465"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:55"
        },
        {
            "message": "param name missing: {Object3d}",
            "line": " js\\Components\\CoreComponents\\Hopper\\HopperComponent3D.js:363"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cube.js:111"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Basic\\Cylinder.js:106"
        },
        {
            "message": "unknown tag: constructo",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\ChairIvar.js:11"
        },
        {
            "message": "unknown tag: note",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Furniture.js:1"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:36"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:58"
        },
        {
            "message": "param name missing: {Object3d}",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:447"
        },
        {
            "message": "unknown tag: warning",
            "line": " js\\Components\\CoreComponents\\Room\\RoomComponent3D.js:231"
        },
        {
            "message": "unknown tag: answer",
            "line": " js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorPanelComponent3D.js:1"
        },
        {
            "message": "unknown tag: sethardwarescalinglevel",
            "line": " js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js:98"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:7"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:73"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:83"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:96"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:132"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:146"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:156"
        },
        {
            "message": "unknown tag: abstract",
            "line": " js\\Components\\BaseComponent2D.js:167"
        },
        {
            "message": "unknown tag: cameraid",
            "line": " js\\Core\\Api\\Api.js:144"
        },
        {
            "message": "param name missing: {wnp.floorStructure}",
            "line": " js\\Core\\Api\\Api.js:600"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Core\\Api\\Api.js:724"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " js\\Core\\Api\\Api.js:735"
        },
        {
            "message": "unknown tag: coherencecontrol",
            "line": " js\\Core\\Core.js:1312"
        },
        {
            "message": "unknown tag: removecomponentbyname",
            "line": " js\\Core\\Engine2D.js:595"
        },
        {
            "message": "unknown tag: removecomponentbyname",
            "line": " js\\Core\\Engine3D.js:336"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\Core\\Structure.js:244"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\Core\\Structure.js:261"
        },
        {
            "message": "Missing item type\n../lib/classy.js                                                          *",
            "line": " injection\\photonui.js:3"
        },
        {
            "message": "Missing item type\nClassy - classy classes for JavaScript\n\n:copyright: (c) 2011 by Armin Ronacher. \n:license: BSD.",
            "line": " injection\\photonui.js:7"
        },
        {
            "message": "Missing item type\nphotonui.js                                                               *",
            "line": " injection\\photonui.js:168"
        },
        {
            "message": "Missing item type\nhelpers.js                                                                *",
            "line": " injection\\photonui.js:229"
        },
        {
            "message": "Missing item type\nbase.js                                                                   *",
            "line": " injection\\photonui.js:358"
        },
        {
            "message": "Missing item type\nwidget.js                                                                 *",
            "line": " injection\\photonui.js:668"
        },
        {
            "message": "Missing item type\nmisc/filemanager.js                                                       *",
            "line": " injection\\photonui.js:1125"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\BoundingLimitDisplayer.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:1"
        },
        {
            "message": "Missing item type\nstart displaying the handles at every camera move",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:57"
        },
        {
            "message": "Missing item type\nstop displaying the handles",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:73"
        },
        {
            "message": "Missing item type\ndispose handle specified by the name, or all the handles if name is omitted",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:206"
        },
        {
            "message": "Missing item type\nfill the _availableHandlesobject with true for one handle if the object can be edited along this axis, flase else\nis based in the getPropertyName",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\HandlesDisplayer.js:277"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\Decorator\\MesureDisplayer.js:1"
        },
        {
            "message": "Missing item type\nlisten masterReshaper",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:1"
        },
        {
            "message": "Missing item type\ndisplay the handle when the object is resized, when false the handle will be hided",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:104"
        },
        {
            "message": "Missing item type\ndisplay the handle when the object is resized, when false the handle will be hided",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:109"
        },
        {
            "message": "Missing item type\nanimate the handle when the cursor is hover a face",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:114"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the new position of the dragged face",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:119"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the face when the cursor is over it",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:124"
        },
        {
            "message": "Missing item type\ndisplay a plan to figure the old face when it is dragged",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:129"
        },
        {
            "message": "Missing item type\nround the object dimension",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:134"
        },
        {
            "message": "Missing item type\ndebug option",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:139"
        },
        {
            "message": "Missing item type\nreturn the true bounding box, where position is the center of the box and dimension the dimension of the box",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\Dimension\\DimensionReshaperComponent3D.js:194"
        },
        {
            "message": "Missing item type\nis responsive of notify UI event to reshaper children\nregister a unique reshaper with a askhand / releasehand mecanism\n\nanswer event thrown by ConfiguratorModComponent",
            "line": " js\\Components\\ConfiguratorComponent\\Reshaper\\MasterReshaperComponent3D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:1"
        },
        {
            "message": "Missing item type\nlaunchs the animation to focus the camera on the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:106"
        },
        {
            "message": "Missing item type\ncancel the animation, leave the camera where it is",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:186"
        },
        {
            "message": "Missing item type\ngo back to primar camera state",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorInOutAnimationComponent3D.js:195"
        },
        {
            "message": "Missing item type\nis responsive of holding the state of the configurator\nstate = idle | animationIn | ready | animationOut\n\nlisten to event that alter this state\nevent cycle follow this pattern : \n\n wnp.request.configurator.start\n           |\n wnp.engine3d.configurator.animationIn.begin\n           |\n wnp.engine3d.configurator.animationIn.end\n           |\n wnp.engine3d.configurator.start\n           |\n           |\n wnp.request.configurator.stop\n           |\n wnp.engine3d.configurator.stop\n           |\n wnp.engine3d.configurator.animationOut.begin\n           |\n wnp.engine3d.configurator.animationOut.end\n           |\n           v\n\n if the animation component is not present, this component simulate the animationIn|Out event to ensure consistency with others components\n\n\n is also responsive of inhibe actions that should not be performed in configurator mode",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorModComponent3D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorPanelComponent3D.js:343"
        },
        {
            "message": "Missing item type\n/!\\ does not support multimaterial yet",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:1"
        },
        {
            "message": "Missing item type\napply transparency on walls when they are between the target and the camera",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:68"
        },
        {
            "message": "Missing item type\napply transparency on all the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:73"
        },
        {
            "message": "Missing item type\napply transparency on all the object",
            "line": " js\\Components\\ConfiguratorComponent\\ConfiguratorXrayComponent3D.js:78"
        },
        {
            "message": "Missing item type\noptions\n  default   - default value if the value cannot be cast\n  round     - round the value : true to round to the closest unit, x to round to the closest x ( 2 for returning only peer value for exemple )\n  min       - the minimum\n  max       - the maximum",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:187"
        },
        {
            "message": "Missing item type\noptions\n  default             - default value if the value cannot be cast\n  intList             - if true the string is a number list, as 12;24.5;1\n  intListSeparator    - the separator of the list ( default is , )\n  intListOptions      - parse options of each number",
            "line": " js\\Components\\CoreComponents\\Object\\Programmable\\Programmable.js:232"
        },
        {
            "message": "Missing item type\nCette methode prend un structureObject, construit l'objet3d correspondant et lance l'ajout à la scene",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:298"
        },
        {
            "message": "Missing item type\nPrépare l'object3d en fonction de son objetStructure pour être ajouté à la scene\n le type peut etre dae / programmable / ou nimporte quoi d'autre",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:357"
        },
        {
            "message": "Missing item type\ncas d'un rechargement à chaud depuis clic sur etage ou passage 2D 3D\n=> on repositionne les objets groupés dans leur reperes de floor pour eviter que ca pete",
            "line": " js\\Components\\CoreComponents\\Object\\ObjectComponent3D.js:387"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Point\\Path.js:15"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\CoreComponents\\Point\\Path.js:17"
        },
        {
            "message": "Missing item type\nMoves the point by a given vector",
            "line": " js\\Components\\CoreComponents\\Point\\PointStructure.js:87"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent2D.js:71"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent2D.js:73"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent3D.js:56"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\DebugComponent\\DebugComponent3D.js:58"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorModComponent3D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\GroupConfiguratorComponent\\GroupConfiguratorPanelComponent3D.js:1"
        },
        {
            "message": "Missing item type\nEnregistre un composant pour qu'il puisse utiliser les fonctions d'historique",
            "line": " js\\Components\\HistoryComponent\\HistoryComponent.js:92"
        },
        {
            "message": "Missing item type\ntranslation hack\n_(\"Capture\") _(\"New\") _(\"Save\") _(\"Options\") _(\"Change language\") _(\"Full Screen\")",
            "line": " js\\Components\\MenuComponents\\TopMenuComponent.js:2"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\OctreeComponent\\LargeHolyColliderDebuger.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\OctreeComponent\\OctreePartitionerFactory.js:1"
        },
        {
            "message": "Missing item type\n// empiric proof\nvar dimension = new Point( Math.random() , Math.random() , Math.random() )\ndimension.normalize()\nvar s = computePropPath( 1000 , dimension )\nvar prob = new Point(\n    ( s.split('x').length-1 )/1000,\n    ( s.split('y').length-1 )/1000,\n    ( s.split('z').length-1 )/1000\n)\nprob.normalize()\nconsole.log( dimension )\nconsole.log( prob )",
            "line": " js\\Components\\OctreeComponent\\OctreePartitionerFactory.js:544"
        },
        {
            "message": "Missing item type\nChange the hardware scaling by reducing the backbuffer size (canvas internal size).",
            "line": " js\\Components\\PerformanceComponent\\HardwareScalingComponent3D.js:98"
        },
        {
            "message": "Missing item type",
            "line": " js\\Components\\GeneralOptionComponent2D.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:46"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:48"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:287"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:289"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:317"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:319"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:429"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:431"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:443"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:445"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:484"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:486"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:506"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:508"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:561"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:563"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:646"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Api\\Api.js:648"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:47"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:49"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:63"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Metal.js:65"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:16"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:18"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:30"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Sample.js:32"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:34"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:36"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:53"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\Textured.js:55"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:38"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:40"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:53"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Materials\\White.js:55"
        },
        {
            "message": "Missing item type\n/!\\ does not merge, simply replace value in existing input",
            "line": " js\\Core\\UI\\ContextMenu.js:202"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Box3.js:3"
        },
        {
            "message": "Missing item type\nCompute an animation by given an amnimatable object , source state and destination state, compute the animations babylon way and start play it",
            "line": " js\\Core\\CameraFeatures.js:516"
        },
        {
            "message": "Missing item type\nle but de cette methode est d'enregistrer en flat les uuid qui sont sauvegardés\ncela va permettre en cas de nouveau plan de recharger le localstorage si celui ci n'a jamais été sauvegardé",
            "line": " js\\Core\\Core.js:1024"
        },
        {
            "message": "Missing item type\nControl the coherence of a `Structure`.",
            "line": " js\\Core\\Core.js:1312"
        },
        {
            "message": "Missing item type\nRemove a component with it name.",
            "line": " js\\Core\\Engine2D.js:595"
        },
        {
            "message": "Missing item type\n*\n        Components management         *\n*",
            "line": " js\\Core\\Engine3D.js:279"
        },
        {
            "message": "Missing item type\nRemove a component with it name.",
            "line": " js\\Core\\Engine3D.js:336"
        },
        {
            "message": "Missing item type\n*\n        Collision detection           *\n*",
            "line": " js\\Core\\Engine3D.js:354"
        },
        {
            "message": "Missing item type\n*\n           Event handlers             *\n*",
            "line": " js\\Core\\Engine3D.js:410"
        },
        {
            "message": "Missing item type\n*\n      Lyfe cycle : State pattern      *\n*",
            "line": " js\\Core\\Engine3D.js:527"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:74"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:76"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:139"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:141"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:350"
        },
        {
            "message": "Missing item type",
            "line": " js\\Core\\Material.js:352"
        },
        {
            "message": "Missing item type\nObjet permettant de construire des materials.",
            "line": " js\\Core\\MaterialFactory.js:16"
        },
        {
            "message": "Missing item type\nprends une geometrie stratée et fermée et genere ses faces\ntop et bottom generent la face du dessus et du dessous si mis à true\nnbPoint est le nombre de point par strate",
            "line": " js\\Helpers\\GeometryHelper.js:523"
        },
        {
            "message": "Missing item type\nfor a mesh with face aligned with x,y,z axis\ndefine and set the UV map",
            "line": " js\\Helpers\\GeometryHelper.js:689"
        },
        {
            "message": "Missing item type\nRepresentation of the pillow like a cube but with 3*3*3 points\nTODO : uvs",
            "line": " js\\Helpers\\GeometryHelper.js:1083"
        },
        {
            "message": "Missing item type\nreturn the rotation quaternion of the object relatively to the world",
            "line": " js\\Helpers\\ObjectHelper.js:4"
        },
        {
            "message": "Missing item type\nreturn the oriented bounding box relatively to the world\nwhere position is the center of the box and dimension the dimension of the box",
            "line": " js\\Helpers\\ObjectHelper.js:28"
        },
        {
            "message": "Missing item type\nStarting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:1"
        },
        {
            "message": "Missing item type\n## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:13"
        },
        {
            "message": "Missing item type\nSince this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:20"
        },
        {
            "message": "Missing item type\nCreate the Jasmine environment. This is used to run all specs in a project.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:25"
        },
        {
            "message": "Missing item type\n## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:30"
        },
        {
            "message": "Missing item type\nAdd all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:77"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom equality testers.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:86"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom expectation matchers",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:93"
        },
        {
            "message": "Missing item type\nExpose the mock interface for the JavaScript timeout functions",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:100"
        },
        {
            "message": "Missing item type\n## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:107"
        },
        {
            "message": "Missing item type\n## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:120"
        },
        {
            "message": "Missing item type\nThe `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:133"
        },
        {
            "message": "Missing item type\nFilter which specs will be run by matching the start of the full name against the `spec` query param.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:139"
        },
        {
            "message": "Missing item type\nSetting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:150"
        },
        {
            "message": "Missing item type\n## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:158"
        },
        {
            "message": "Missing item type\nHelper function for readability above.",
            "line": " tools\\tests\\unit\\lib\\jasmine-2.0.0\\boot.js:173"
        }
    ]
}